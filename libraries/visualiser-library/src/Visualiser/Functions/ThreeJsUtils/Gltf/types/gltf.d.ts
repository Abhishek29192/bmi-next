/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The root object for a glTF asset.
 */
export type GlTF = GlTF1 & GlTF2;
export type GlTF1 = GlTFProperty & {
  /**
   * Names of glTF extensions used somewhere in this asset.
   */
  extensionsUsed?: [
    {
      [k: string]: unknown | undefined;
    } & string,
    ...({
      [k: string]: unknown | undefined;
    } & string)[]
  ];
  /**
   * Names of glTF extensions required to properly load this asset.
   */
  extensionsRequired?: [
    {
      [k: string]: unknown | undefined;
    } & string,
    ...({
      [k: string]: unknown | undefined;
    } & string)[]
  ];
  /**
   * An array of accessors.
   */
  accessors?: [Accessor, ...Accessor[]];
  /**
   * An array of keyframe animations.
   */
  animations?: [Animation, ...Animation[]];
  /**
   * Metadata about the glTF asset.
   */
  asset?: Asset;
  /**
   * An array of buffers.
   */
  buffers?: [Buffer, ...Buffer[]];
  /**
   * An array of bufferViews.
   */
  bufferViews?: [BufferView, ...BufferView[]];
  /**
   * An array of cameras.
   */
  cameras?: [Camera, ...Camera[]];
  /**
   * An array of images.
   */
  images?: [Image, ...Image3[]];
  /**
   * An array of materials.
   */
  materials?: [Material, ...Material[]];
  /**
   * An array of meshes.
   */
  meshes?: [Mesh, ...Mesh[]];
  /**
   * An array of nodes.
   */
  nodes?: [Node, ...Node[]];
  /**
   * An array of samplers.
   */
  samplers?: [Sampler, ...Sampler[]];
  /**
   * The index of the default scene.
   */
  scene?: GlTFId16;
  /**
   * An array of scenes.
   */
  scenes?: [Scene, ...Scene[]];
  /**
   * An array of skins.
   */
  skins?: [Skin, ...Skin[]];
  /**
   * An array of textures.
   */
  textures?: [Texture, ...Texture[]];
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
/**
 * A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's `vertexAttribPointer()` defines an attribute in a buffer.
 */
export type Accessor = GlTFChildOfRootProperty & {
  /**
   * The index of the bufferView.
   */
  bufferView?: GlTFId;
  /**
   * The offset relative to the start of the bufferView in bytes.
   */
  byteOffset?: number;
  /**
   * The datatype of components in the attribute.
   */
  componentType?: 5120 | 5121 | 5122 | 5123 | 5125 | 5126 | number;
  /**
   * Specifies whether integer data values should be normalized.
   */
  normalized?: boolean;
  /**
   * The number of attributes referenced by this accessor.
   */
  count?: number;
  /**
   * Specifies if the attribute is a scalar, vector, or matrix.
   */
  type?: "SCALAR" | "VEC2" | "VEC3" | "VEC4" | "MAT2" | "MAT3" | "MAT4" | string;
  /**
   * Maximum value of each component in this attribute.
   */
  max?:
    | [
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ];
  /**
   * Minimum value of each component in this attribute.
   */
  min?:
    | [
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ]
    | [
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number,
        {
          [k: string]: unknown | undefined;
        } & number
      ];
  /**
   * Sparse storage of attributes that deviate from their initialization value.
   */
  sparse?: AccessorSparse;
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFChildOfRootProperty = GlTFProperty;
export type GlTFId = GlTFId1 & GlTFId2;
export type GlTFId1 = {
  [k: string]: unknown | undefined;
};
export type GlTFId2 = number;
/**
 * Sparse storage of attributes that deviate from their initialization value.
 */
export type AccessorSparse = GlTFProperty;
/**
 * A keyframe animation.
 */
export type Animation = GlTFChildOfRootProperty & {
  /**
   * An array of channels, each of which targets an animation's sampler at a node's property. Different channels of the same animation can't have equal targets.
   */
  channels?: [AnimationChannel, ...AnimationChannel[]];
  /**
   * An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).
   */
  samplers?: [AnimationSampler, ...AnimationSampler[]];
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
/**
 * Targets an animation's sampler at a node's property.
 */
export type AnimationChannel = GlTFProperty & {
  /**
   * The index of a sampler in this animation used to compute the value for the target.
   */
  sampler?: GlTFId3;
  /**
   * The index of the node and TRS property to target.
   */
  target?: AnimationChannelTarget;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFId3 = GlTFId1 & GlTFId2;
/**
 * The index of the node and TRS property that an animation channel targets.
 */
export type AnimationChannelTarget = GlTFProperty;
/**
 * Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).
 */
export type AnimationSampler = GlTFProperty & {
  /**
   * The index of an accessor containing keyframe input values, e.g., time.
   */
  input?: GlTFId4;
  /**
   * Interpolation algorithm.
   */
  interpolation?: "LINEAR" | "STEP" | "CUBICSPLINE" | string;
  /**
   * The index of an accessor, containing keyframe output values.
   */
  output?: GlTFId5;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFId4 = GlTFId1 & GlTFId2;
export type GlTFId5 = GlTFId1 & GlTFId2;
/**
 * Metadata about the glTF asset.
 */
export type Asset = GlTFProperty;
/**
 * A buffer points to binary geometry, animation, or skins.
 */
export type Buffer = GlTFChildOfRootProperty & {
  /**
   * The uri of the buffer.
   */
  uri?: string;
  /**
   * The length of the buffer in bytes.
   */
  byteLength?: number;
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
/**
 * A view into a buffer generally representing a subset of the buffer.
 */
export type BufferView = GlTFChildOfRootProperty & {
  /**
   * The index of the buffer.
   */
  buffer?: GlTFId6;
  /**
   * The offset into the buffer in bytes.
   */
  byteOffset?: number;
  /**
   * The length of the bufferView in bytes.
   */
  byteLength?: number;
  /**
   * The stride, in bytes.
   */
  byteStride?: number;
  /**
   * The target that the GPU buffer should be bound to.
   */
  target?: 34962 | 34963 | number;
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFId6 = GlTFId1 & GlTFId2;
/**
 * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene.
 */
export type Camera = GlTFChildOfRootProperty & {
  /**
   * An orthographic camera containing properties to create an orthographic projection matrix.
   */
  orthographic?: CameraOrthographic;
  /**
   * A perspective camera containing properties to create a perspective projection matrix.
   */
  perspective?: CameraPerspective;
  /**
   * Specifies if the camera uses a perspective or orthographic projection.
   */
  type?: "perspective" | "orthographic" | string;
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
/**
 * An orthographic camera containing properties to create an orthographic projection matrix.
 */
export type CameraOrthographic = GlTFProperty;
/**
 * A perspective camera containing properties to create a perspective projection matrix.
 */
export type CameraPerspective = GlTFProperty;
/**
 * Image data used to create a texture. Image can be referenced by URI or `bufferView` index. `mimeType` is required in the latter case.
 */
export type Image = Image1 & Image2;
export type Image1 = GlTFChildOfRootProperty & {
  /**
   * The uri of the image.
   */
  uri?: string;
  /**
   * The image's MIME type. Required if `bufferView` is defined.
   */
  mimeType?: "image/jpeg" | "image/png" | string;
  /**
   * The index of the bufferView that contains the image. Use this instead of the image's uri property.
   */
  bufferView?: GlTFId7;
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFId7 = GlTFId1 & GlTFId2;
export type Image2 =
  | {
      [k: string]: unknown | undefined;
    }
  | {
      [k: string]: unknown | undefined;
    };
export type Image3 = Image1 & Image2;
/**
 * The material appearance of a primitive.
 */
export type Material = GlTFChildOfRootProperty & {
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  /**
   * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of `pbrMetallicRoughness` apply.
   */
  pbrMetallicRoughness?: MaterialPBRMetallicRoughness;
  /**
   * The normal map texture.
   */
  normalTexture?: MaterialNormalTextureInfo;
  /**
   * The occlusion map texture.
   */
  occlusionTexture?: MaterialOcclusionTextureInfo;
  /**
   * The emissive map texture.
   */
  emissiveTexture?: TextureInfo;
  /**
   * The emissive color of the material.
   */
  emissiveFactor?: [
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number
  ];
  /**
   * The alpha rendering mode of the material.
   */
  alphaMode?: "OPAQUE" | "MASK" | "BLEND" | string;
  /**
   * The alpha cutoff value of the material.
   */
  alphaCutoff?: number;
  /**
   * Specifies whether the material is double sided.
   */
  doubleSided?: boolean;
  [k: string]: unknown | undefined;
};
/**
 * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.
 */
export type MaterialPBRMetallicRoughness = GlTFProperty;
export type MaterialNormalTextureInfo = TextureInfo;
/**
 * Reference to a texture.
 */
export type TextureInfo = GlTFProperty;
export type MaterialOcclusionTextureInfo = TextureInfo;
/**
 * A set of primitives to be rendered.  A node can contain one mesh.  A node's transform places the mesh in the scene.
 */
export type Mesh = GlTFChildOfRootProperty & {
  /**
   * An array of primitives, each defining geometry to be rendered with a material.
   */
  primitives?: [MeshPrimitive, ...MeshPrimitive[]];
  /**
   * Array of weights to be applied to the Morph Targets.
   */
  weights?: [
    {
      [k: string]: unknown | undefined;
    } & number,
    ...({
      [k: string]: unknown | undefined;
    } & number)[]
  ];
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
/**
 * Geometry to be rendered with the given material.
 */
export type MeshPrimitive = GlTFProperty & {
  /**
   * A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data.
   */
  attributes?: {
    [k: string]: GlTFId8Undefined;
  };
  /**
   * The index of the accessor that contains the indices.
   */
  indices?: GlTFId9;
  /**
   * The index of the material to apply to this primitive when rendering.
   */
  material?: GlTFId10;
  /**
   * The type of primitives to render.
   */
  mode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | number;
  /**
   * An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only `POSITION`, `NORMAL`, and `TANGENT` supported) to their deviations in the Morph Target.
   */
  targets?: [
    {
      [k: string]: unknown | undefined;
    },
    ...{
      [k: string]: unknown | undefined;
    }[]
  ];
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFId8 = (GlTFId1 & GlTFId2) | undefined;
export type GlTFId9 = GlTFId1 & GlTFId2;
export type GlTFId10 = GlTFId1 & GlTFId2;
/**
 * A node in the node hierarchy.  When the node contains `skin`, all `mesh.primitives` must contain `JOINTS_0` and `WEIGHTS_0` attributes.  A node can have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; `matrix` will not be present.
 */
export type Node = GlTFChildOfRootProperty & {
  /**
   * The index of the camera referenced by this node.
   */
  camera?: GlTFId11;
  /**
   * The indices of this node's children.
   */
  children?: [GlTFId12, ...GlTFId13[]];
  /**
   * The index of the skin referenced by this node.
   */
  skin?: GlTFId14;
  /**
   * A floating-point 4x4 transformation matrix stored in column-major order.
   */
  matrix?: [
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number
  ];
  /**
   * The index of the mesh in this node.
   */
  mesh?: GlTFId15;
  /**
   * The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar.
   */
  rotation?: [
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number
  ];
  /**
   * The node's non-uniform scale, given as the scaling factors along the x, y, and z axes.
   */
  scale?: [
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number
  ];
  /**
   * The node's translation along the x, y, and z axes.
   */
  translation?: [
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number,
    {
      [k: string]: unknown | undefined;
    } & number
  ];
  /**
   * The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh.
   */
  weights?: [
    {
      [k: string]: unknown | undefined;
    } & number,
    ...({
      [k: string]: unknown | undefined;
    } & number)[]
  ];
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFId11 = GlTFId1 & GlTFId2;
export type GlTFId12 = GlTFId1 & GlTFId2;
export type GlTFId13 = GlTFId1 & GlTFId2;
export type GlTFId14 = GlTFId1 & GlTFId2;
export type GlTFId15 = GlTFId1 & GlTFId2;
/**
 * Texture sampler properties for filtering and wrapping modes.
 */
export type Sampler = GlTFChildOfRootProperty & {
  /**
   * Magnification filter.
   */
  magFilter?: 9728 | 9729 | number;
  /**
   * Minification filter.
   */
  minFilter?: 9728 | 9729 | 9984 | 9985 | 9986 | 9987 | number;
  /**
   * s wrapping mode.
   */
  wrapS?: 33071 | 33648 | 10497 | number;
  /**
   * t wrapping mode.
   */
  wrapT?: 33071 | 33648 | 10497 | number;
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFId16 = GlTFId1 & GlTFId2;
/**
 * The root nodes of a scene.
 */
export type Scene = GlTFChildOfRootProperty & {
  /**
   * The indices of each root node.
   */
  nodes?: [GlTFId17, ...GlTFId18[]];
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFId17 = GlTFId1 & GlTFId2;
export type GlTFId18 = GlTFId1 & GlTFId2;
/**
 * Joints and matrices defining a skin.
 */
export type Skin = GlTFChildOfRootProperty & {
  /**
   * The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied.
   */
  inverseBindMatrices?: GlTFId19;
  /**
   * The index of the node used as a skeleton root.
   */
  skeleton?: GlTFId20;
  /**
   * Indices of skeleton nodes, used as joints in this skin.
   */
  joints?: [GlTFId21, ...GlTFId22[]];
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFId19 = GlTFId1 & GlTFId2;
export type GlTFId20 = GlTFId1 & GlTFId2;
export type GlTFId21 = GlTFId1 & GlTFId2;
export type GlTFId22 = GlTFId1 & GlTFId2;
/**
 * A texture and its sampler.
 */
export type Texture = GlTFChildOfRootProperty & {
  /**
   * The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used.
   */
  sampler?: GlTFId23;
  /**
   * The index of the image used by this texture. When undefined, it is expected that an extension or other mechanism will supply an alternate texture source, otherwise behavior is undefined.
   */
  source?: GlTFId24;
  name?: unknown;
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
};
export type GlTFId23 = GlTFId1 & GlTFId2;
export type GlTFId24 = GlTFId1 & GlTFId2;

export interface GlTFProperty {
  extensions?: Extension;
  extras?: Extras;
  [k: string]: unknown | undefined;
}
/**
 * Dictionary object with extension-specific objects.
 */
export interface Extension {
  [k: string]:
    | {
        [k: string]: unknown | undefined;
      }
    | undefined;
}
/**
 * Application-specific data.
 */
export interface Extras {
  [k: string]: unknown | undefined;
}
export interface GlTF2 {
  /**
   * Names of glTF extensions used somewhere in this asset.
   */
  extensionsUsed?: [
    {
      [k: string]: unknown | undefined;
    } & string,
    ...({
      [k: string]: unknown | undefined;
    } & string)[]
  ];
  /**
   * Names of glTF extensions required to properly load this asset.
   */
  extensionsRequired?: [
    {
      [k: string]: unknown | undefined;
    } & string,
    ...({
      [k: string]: unknown | undefined;
    } & string)[]
  ];
  /**
   * An array of accessors.
   */
  accessors?: [Accessor, ...Accessor[]];
  /**
   * An array of keyframe animations.
   */
  animations?: [Animation, ...Animation[]];
  /**
   * Metadata about the glTF asset.
   */
  asset: Asset;
  /**
   * An array of buffers.
   */
  buffers?: [Buffer, ...Buffer[]];
  /**
   * An array of bufferViews.
   */
  bufferViews?: [BufferView, ...BufferView[]];
  /**
   * An array of cameras.
   */
  cameras?: [Camera, ...Camera[]];
  /**
   * An array of images.
   */
  images?: [Image, ...Image3[]];
  /**
   * An array of materials.
   */
  materials?: [Material, ...Material[]];
  /**
   * An array of meshes.
   */
  meshes?: [Mesh, ...Mesh[]];
  /**
   * An array of nodes.
   */
  nodes?: [Node, ...Node[]];
  /**
   * An array of samplers.
   */
  samplers?: [Sampler, ...Sampler[]];
  /**
   * The index of the default scene.
   */
  scene?: GlTFId16;
  /**
   * An array of scenes.
   */
  scenes?: [Scene, ...Scene[]];
  /**
   * An array of skins.
   */
  skins?: [Skin, ...Skin[]];
  /**
   * An array of textures.
   */
  textures?: [Texture, ...Texture[]];
  extensions?: unknown;
  extras?: unknown;
  [k: string]: unknown | undefined;
}
