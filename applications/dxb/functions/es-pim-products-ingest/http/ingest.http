## 200327_Primo_S_foot-_or_ridge_plate_Black

POST {{host}}
Content-Type: application/json
{
  "data": {
    "data": "{
            "type": "UPDATED",
            "itemType": "PRODUCTS",
            "items": [
                {
                    "approvalStatus": "approved",
                    "assets": [
                        {
                            "allowedToDownload": true,
                            "assetType": "DATA_SHEETS",
                            "fileSize": 270118,
                            "mime": "application/pdf",
                            "name": "TDS-Primo-shingel-v3",
                            "realFileName": "TDS-Primo-shingel-v3.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h9d/h32/8796911632414/TDS-Primo-shingel-v3.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "DOP",
                            "mime": "application/pdf",
                            "name": "DoP-Icopal-Takshingel-v3-(1)",
                            "realFileName": "DoP-Icopal-Takshingel-v3-(1).pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hef/h31/8796911697950/DoP-Icopal-Takshingel-v3-(1).pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "ASSEMBLY_INSTRUCTIONS",
                            "fileSize": 537675,
                            "mime": "application/pdf",
                            "name": "MON-Primo-shingel-v1",
                            "realFileName": "MON-Primo-shingel-v1.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hde/h2e/8796911763486/MON-Primo-shingel-v1.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MAINTENANCE_DOCUMENTS",
                            "mime": "application/pdf",
                            "name": "FDV-Takshingel",
                            "realFileName": "FDV-Takshingel.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/he0/h2b/8796911829022/FDV-Takshingel.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "PRODUCT_BROCHURE",
                            "fileSize": 5431611,
                            "mime": "application/pdf",
                            "name": "BMI-Takshingel-BRO-MON",
                            "realFileName": "BMI_Icopal_Takshingel_brochure.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h65/hbc/9008929800222/BMI-Icopal-Takshingel-brochurepdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "PRODUCT_BROCHURE",
                            "fileSize": 5431611,
                            "mime": "application/pdf",
                            "name": "BMI-Takshingel-BRO-MON",
                            "realFileName": "BMI_Icopal_Takshingel_brochure.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h65/hbc/9008929800222/BMI-Icopal-Takshingel-brochurepdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "ASSEMBLY_INSTRUCTIONS",
                            "fileSize": 33131035,
                            "mime": "application/pdf",
                            "name": "Takshingel_Monteringsveiledning_2021",
                            "realFileName": "BMI_Icopal_Takshingel_brochure_new_final_low_spread.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/he2/h71/8993686487070/BMI-Icopal-Takshingel-brochure-new-final-low-spreadpdf"
                        }
                    ],
                    "categories": [
                        {
                            "categoryType": "Brand",
                            "code": "Icopal",
                            "image": {
                                "allowedToDownload": true,
                                "altText": "Icopal RGB logo",
                                "assetType": "MASTER_IMAGE",
                                "containerId": "container_Icopal_RGB_Logo",
                                "fileSize": 6144,
                                "mime": "image/png",
                                "name": "bmi_icopal",
                                "realFileName": "bmi_icopal.png",
                                "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h77/h56/8801873297438/bmi-icopal.png"
                            },
                            "name": "Icopal",
                            "parentCategoryCode": "BMI_Brands"
                        },
                        {
                            "categoryType": "ProductFamily",
                            "code": "Primo_NO",
                            "name": "Primo NO",
                            "parentCategoryCode": "PRODUCT_FAMILY"
                        },
                        {
                            "categoryType": "Category",
                            "code": "ROOF_SHINGEL_NO",
                            "name": "Takshingel",
                            "parentCategoryCode": "PITCHEDROOF_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PRODUCTS_NO",
                            "name": "Produkter",
                            "parentCategoryCode": ""
                        },
                        {
                            "categoryType": "Category",
                            "code": "ROOF_NO",
                            "name": "Takprodukter",
                            "parentCategoryCode": "PRODUCTS_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PITCHEDROOF_NO",
                            "name": "Skråtak",
                            "parentCategoryCode": "ROOF_NO"
                        }
                    ],
                    "classifications": [
                        {
                            "code": "generalInformation",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/generalInformation.materials",
                                    "featureValues": [
                                        {
                                            "code": "BITUMEN",
                                            "value": "Bitumen"
                                        }
                                    ],
                                    "name": "Materiale"
                                }
                            ],
                            "name": "Generell informasjon"
                        },
                        {
                            "code": "measurements",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.length",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "2000"
                                        }
                                    ],
                                    "name": "Lengde"
                                },
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.width",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "255"
                                        }
                                    ],
                                    "name": "Bredde"
                                },
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.height",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "6"
                                        }
                                    ],
                                    "name": "Høyde"
                                }
                            ],
                            "name": "Produktdata"
                        },
                        {
                            "code": "scoringWeightAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/scoringWeightAttributes.scoringweight",
                                    "featureUnit": {
                                        "name": "point",
                                        "symbol": "p",
                                        "unitType": "point"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "992"
                                        }
                                    ],
                                    "name": "Scoring Weight"
                                }
                            ],
                            "name": "Produktrangering"
                        },
                        {
                            "code": "weightAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/weightAttributes.netweight",
                                    "featureUnit": {
                                        "name": "kilogram",
                                        "symbol": "kg",
                                        "unitType": "weight"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "1.8"
                                        }
                                    ],
                                    "name": "Nettovekt"
                                }
                            ],
                            "name": "Vekt"
                        }
                    ],
                    "code": "Primo_S_foot-_or_ridge_plate",
                    "description": "<p>Fot/m&oslash;neplater til Primo S</p>",
                    "externalProductCode": "57752622",
                    "images": [
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 5366941,
                            "mime": "image/jpeg",
                            "name": "30738355-primo-fot-mone",
                            "realFileName": "30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h24/hce/8799935660062/30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 327358,
                            "format": "Product-Hero-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Large-Desktop_30738355-primo-fot-mone",
                            "realFileName": "Product-Hero-Large-Desktop_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hba/hf7/8801146241054/Product-Hero-Large-Desktop-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 26620,
                            "format": "Product-Color-Selector-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Mobile_30738355-primo-fot-mone",
                            "realFileName": "Product-Color-Selector-Mobile_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hbc/hf4/8801146306590/Product-Color-Selector-Mobile-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 36945,
                            "format": "Product-Listing-Card-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Large-Desktop_30738355-primo-fot-mone",
                            "realFileName": "Product-Listing-Card-Large-Desktop_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hfb/hf3/8801146372126/Product-Listing-Card-Large-Desktop-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 89784,
                            "format": "Product-Hero-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Small-Desktop-Tablet_30738355-primo-fot-mone",
                            "realFileName": "Product-Hero-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hfd/hf0/8801146437662/Product-Hero-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 29977,
                            "format": "Product-Hero-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Mobile_30738355-primo-fot-mone",
                            "realFileName": "Product-Hero-Mobile_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hec/hed/8801146503198/Product-Hero-Mobile-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 40553,
                            "format": "Product-Color-Selector-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Large-Desktop_30738355-primo-fot-mone",
                            "realFileName": "Product-Color-Selector-Large-Desktop_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h3e/hed/8801146568734/Product-Color-Selector-Large-Desktop-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 29977,
                            "format": "Product-Color-Selector-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Small-Desktop-Tablet_30738355-primo-fot-mone",
                            "realFileName": "Product-Color-Selector-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h2d/hea/8801146634270/Product-Color-Selector-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 27637,
                            "format": "Product-Listing-Card-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Small-Desktop-Tablet_30738355-primo-fot-mone",
                            "realFileName": "Product-Listing-Card-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h7f/he9/8801146699806/Product-Listing-Card-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 28180,
                            "format": "Product-Listing-Card-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Mobile_30738355-primo-fot-mone",
                            "realFileName": "Product-Listing-Card-Mobile_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h6e/he6/8801146765342/Product-Listing-Card-Mobile-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 153821,
                            "format": "Web",
                            "mime": "image/jpeg",
                            "name": "Web_30738355-primo-fot-mone",
                            "realFileName": "Web_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h5a/hd1/8833155858462/Web-30738355-primo-fot-monejpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 11384975,
                            "format": "Print",
                            "mime": "image/tiff",
                            "name": "Print_30738355-primo-fot-monetiff",
                            "realFileName": "Print_30738355-primo-fot-monetiff",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h6a/hd4/8833155923998/Print-30738355-primo-fot-monetiff"
                        }
                    ],
                    "isSampleOrderAllowed": false,
                    "longDescription": "<p>Fot/m&oslash;neplater til Primo S</p>",
                    "name": "Primo fot/møneplate",
                    "summary": "",
                    "variantOptions": [
                        {
                            "approvalStatus": "approved",
                            "classifications": [
                                {
                                    "code": "appearanceAttributes",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/appearanceAttributes.texturefamily",
                                            "featureValues": [
                                                {
                                                    "code": "QUARTZ_SURFACE",
                                                    "value": "Bestrød overflate"
                                                }
                                            ],
                                            "name": "Overflate"
                                        }
                                    ],
                                    "name": "Farge og overflate"
                                },
                                {
                                    "code": "measurements",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/measurements.length",
                                            "featureUnit": {
                                                "name": "millimeter",
                                                "symbol": "mm",
                                                "unitType": "space"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "100"
                                                }
                                            ],
                                            "name": "Lengde"
                                        },
                                        {
                                            "code": "bmiClassificationCatalog/1.0/measurements.width",
                                            "featureUnit": {
                                                "name": "millimeter",
                                                "symbol": "mm",
                                                "unitType": "space"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "25,5"
                                                }
                                            ],
                                            "name": "Bredde"
                                        }
                                    ],
                                    "name": "Produktdata"
                                },
                                {
                                    "code": "weightAttributes",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/weightAttributes.netweight",
                                            "featureUnit": {
                                                "name": "kilogram",
                                                "symbol": "kg",
                                                "unitType": "weight"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "18"
                                                }
                                            ],
                                            "name": "Nettovekt"
                                        }
                                    ],
                                    "name": "Vekt"
                                }
                            ],
                            "code": "200327_Primo_S_foot-_or_ridge_plate_Black",
                            "externalProductCode": "57752622",
                            "images": [
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 5366941,
                                    "mime": "image/jpeg",
                                    "name": "30738355-primo-fot-mone",
                                    "realFileName": "30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h24/hce/8799935660062/30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 327358,
                                    "format": "Product-Hero-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Large-Desktop_30738355-primo-fot-mone",
                                    "realFileName": "Product-Hero-Large-Desktop_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hba/hf7/8801146241054/Product-Hero-Large-Desktop-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 26620,
                                    "format": "Product-Color-Selector-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Mobile_30738355-primo-fot-mone",
                                    "realFileName": "Product-Color-Selector-Mobile_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hbc/hf4/8801146306590/Product-Color-Selector-Mobile-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 36945,
                                    "format": "Product-Listing-Card-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Large-Desktop_30738355-primo-fot-mone",
                                    "realFileName": "Product-Listing-Card-Large-Desktop_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hfb/hf3/8801146372126/Product-Listing-Card-Large-Desktop-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 89784,
                                    "format": "Product-Hero-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Small-Desktop-Tablet_30738355-primo-fot-mone",
                                    "realFileName": "Product-Hero-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hfd/hf0/8801146437662/Product-Hero-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 29977,
                                    "format": "Product-Hero-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Mobile_30738355-primo-fot-mone",
                                    "realFileName": "Product-Hero-Mobile_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hec/hed/8801146503198/Product-Hero-Mobile-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 40553,
                                    "format": "Product-Color-Selector-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Large-Desktop_30738355-primo-fot-mone",
                                    "realFileName": "Product-Color-Selector-Large-Desktop_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h3e/hed/8801146568734/Product-Color-Selector-Large-Desktop-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 29977,
                                    "format": "Product-Color-Selector-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Small-Desktop-Tablet_30738355-primo-fot-mone",
                                    "realFileName": "Product-Color-Selector-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h2d/hea/8801146634270/Product-Color-Selector-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 27637,
                                    "format": "Product-Listing-Card-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Small-Desktop-Tablet_30738355-primo-fot-mone",
                                    "realFileName": "Product-Listing-Card-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h7f/he9/8801146699806/Product-Listing-Card-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 28180,
                                    "format": "Product-Listing-Card-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Mobile_30738355-primo-fot-mone",
                                    "realFileName": "Product-Listing-Card-Mobile_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h6e/he6/8801146765342/Product-Listing-Card-Mobile-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 153821,
                                    "format": "Web",
                                    "mime": "image/jpeg",
                                    "name": "Web_30738355-primo-fot-mone",
                                    "realFileName": "Web_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h5a/hd1/8833155858462/Web-30738355-primo-fot-monejpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 11384975,
                                    "format": "Print",
                                    "mime": "image/tiff",
                                    "name": "Print_30738355-primo-fot-monetiff",
                                    "realFileName": "Print_30738355-primo-fot-monetiff",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h6a/hd4/8833155923998/Print-30738355-primo-fot-monetiff"
                                }
                            ],
                            "isSampleOrderAllowed": false,
                            "longDescription": "<p>Fot/m&oslash;neplater til Primo S</p>"
                        }
                    ]
                }
            ]
        }"
  }
}

## 200317_Valdres_roof_shingle_Skifer

POST {{host}}
Content-Type: application/json
{
  "data": {
    "data": "{
            "type": "UPDATED",
            "itemType": "PRODUCTS",
            "items": [
                {
                    "approvalStatus": "approved",
                    "assets": [
                        {
                            "allowedToDownload": true,
                            "assetType": "DATA_SHEETS",
                            "fileSize": 275947,
                            "mime": "application/pdf",
                            "name": "TDS-Icopal-Takshingel-v1",
                            "realFileName": "TDS-Icopal-Takshingel-v1.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h0c/h65/8796959932446/TDS-Icopal-Takshingel-v1.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "CERTIFICATES",
                            "fileSize": 204752,
                            "mime": "application/pdf",
                            "name": "Garantibevis-Icopal-Takshingel",
                            "realFileName": "Garantibevis-Icopal-Takshingel.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hba/h65/8796959997982/Garantibevis-Icopal-Takshingel.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "DOP",
                            "fileSize": 221508,
                            "mime": "application/pdf",
                            "name": "DoP-Icopal-Takshingel-v3-(1)",
                            "realFileName": "DoP-Icopal-Takshingel-v3-(1).pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hc3/ha1/8796960063518/DoP-Icopal-Takshingel-v3-(1).pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "DECLARATION_OF_SAFETY",
                            "mime": "application/pdf",
                            "name": "HMF-m30166599",
                            "realFileName": "HMF-m30166599.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hc4/h9e/8796960129054/HMF-m30166599.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MAINTENANCE_DOCUMENTS",
                            "fileSize": 373599,
                            "mime": "application/pdf",
                            "name": "FDV Takshingel",
                            "realFileName": "FDV Takshingel.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h5c/ha9/8800292077598/FDV-Takshingel.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "PRODUCT_BROCHURE",
                            "fileSize": 5431611,
                            "mime": "application/pdf",
                            "name": "BMI-Takshingel-BRO-MON",
                            "realFileName": "BMI_Icopal_Takshingel_brochure.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h65/hbc/9008929800222/BMI-Icopal-Takshingel-brochurepdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "TECHNICAL_APPROVALS",
                            "mime": "application/octet-stream",
                            "name": "Teknisk godkjenning Icopal Takshingel",
                            "url": "https://www.sintefcertification.no/Product/Index/34"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "PRODUCT_BROCHURE",
                            "fileSize": 5431611,
                            "mime": "application/pdf",
                            "name": "BMI-Takshingel-BRO-MON",
                            "realFileName": "BMI_Icopal_Takshingel_brochure.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h65/hbc/9008929800222/BMI-Icopal-Takshingel-brochurepdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "ASSEMBLY_INSTRUCTIONS",
                            "fileSize": 33131035,
                            "mime": "application/pdf",
                            "name": "Takshingel_Monteringsveiledning_2021",
                            "realFileName": "BMI_Icopal_Takshingel_brochure_new_final_low_spread.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/he2/h71/8993686487070/BMI-Icopal-Takshingel-brochure-new-final-low-spreadpdf"
                        }
                    ],
                    "categories": [
                        {
                            "categoryType": "Brand",
                            "code": "Icopal",
                            "image": {
                                "allowedToDownload": true,
                                "altText": "Icopal RGB logo",
                                "assetType": "MASTER_IMAGE",
                                "containerId": "container_Icopal_RGB_Logo",
                                "fileSize": 6144,
                                "mime": "image/png",
                                "name": "bmi_icopal",
                                "realFileName": "bmi_icopal.png",
                                "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h77/h56/8801873297438/bmi-icopal.png"
                            },
                            "name": "Icopal",
                            "parentCategoryCode": "BMI_Brands"
                        },
                        {
                            "categoryType": "ProductFamily",
                            "code": "Shingel_Valdres",
                            "name": "Shingel Valdres",
                            "parentCategoryCode": "PRODUCT_FAMILY"
                        },
                        {
                            "categoryType": "Category",
                            "code": "ROOF_SHINGEL_NO",
                            "name": "Takshingel",
                            "parentCategoryCode": "PITCHEDROOF_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PITCHEDROOF_NO",
                            "name": "Skråtak",
                            "parentCategoryCode": "ROOF_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PRODUCTS_NO",
                            "name": "Produkter",
                            "parentCategoryCode": ""
                        },
                        {
                            "categoryType": "Category",
                            "code": "ROOF_NO",
                            "name": "Takprodukter",
                            "parentCategoryCode": "PRODUCTS_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PITCHEDROOF_NO",
                            "name": "Skråtak",
                            "parentCategoryCode": "ROOF_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PRODUCTS_NO",
                            "name": "Produkter",
                            "parentCategoryCode": ""
                        },
                        {
                            "categoryType": "Category",
                            "code": "ROOF_NO",
                            "name": "Takprodukter",
                            "parentCategoryCode": "PRODUCTS_NO"
                        }
                    ],
                    "classifications": [
                        {
                            "code": "sheetsPackingAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/sheetsPackingAttributes.numberofsheetsperpack",
                                    "featureValues": [
                                        {
                                            "value": "22"
                                        }
                                    ],
                                    "name": "Antall takshingel i pakken"
                                }
                            ],
                            "name": "Takshingel forpakning"
                        },
                        {
                            "code": "roofAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/roofAttributes.minimumpitch",
                                    "featureUnit": {
                                        "name": "degree",
                                        "symbol": "°",
                                        "unitType": "slope"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "15"
                                        }
                                    ],
                                    "name": "Laveste takvinkel"
                                }
                            ],
                            "name": "Tak attributter"
                        },
                        {
                            "code": "generalInformation",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/generalInformation.materials",
                                    "featureValues": [
                                        {
                                            "code": "BITUMEN",
                                            "value": "Bitumen"
                                        }
                                    ],
                                    "name": "Materiale"
                                }
                            ],
                            "name": "Generell informasjon"
                        },
                        {
                            "code": "measurements",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.length",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "1000"
                                        }
                                    ],
                                    "name": "Lengde"
                                },
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.thickness",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "3,2"
                                        }
                                    ],
                                    "name": "Tykkelse"
                                },
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.width",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "330"
                                        }
                                    ],
                                    "name": "Bredde"
                                },
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.additionalmeasurement",
                                    "featureValues": [
                                        {
                                            "value": "143"
                                        }
                                    ],
                                    "name": "Dekkbredde"
                                }
                            ],
                            "name": "Produktdata"
                        },
                        {
                            "code": "safetyInformation",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/safetyInformation.firesafetyclass",
                                    "featureValues": [
                                        {
                                            "code": "F",
                                            "value": "F"
                                        }
                                    ],
                                    "name": "Brannklasse"
                                }
                            ],
                            "name": "Sikkerhetsinformasjon"
                        },
                        {
                            "code": "scoringWeightAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/scoringWeightAttributes.scoringweight",
                                    "featureUnit": {
                                        "name": "point",
                                        "symbol": "p",
                                        "unitType": "point"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "998"
                                        }
                                    ],
                                    "name": "Scoring Weight"
                                }
                            ],
                            "name": "Produktrangering"
                        },
                        {
                            "code": "weightAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/weightAttributes.weightpersqm",
                                    "featureUnit": {
                                        "name": "kilogram",
                                        "symbol": "kg",
                                        "unitType": "weight"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "8,3"
                                        }
                                    ],
                                    "name": "Vekt pr.kvm"
                                }
                            ],
                            "name": "Vekt"
                        }
                    ],
                    "code": "Valdres_roof_shingle",
                    "description": "<p>Icopal&nbsp;takshingel Type Valdres er en popul&aelig;r shingel som med sin dr&aring;peform ser ut som gammel skifertekking.&nbsp; Overflaten p&aring; shingelen er naturlig, knust skifer fra Icopals eget skiferbrudd i Valdres. Foruten &aring; sette farge og m&oslash;nster p&aring; taket, beskytter skiferen asfalten mot solens ultrafiolette str&aring;ler. Store felt med kraftkleber sikrerer rask nedklebing av tungene.</p>\n<p>Type Valdres benyttes p&aring; skr&aring; tak med fast undertak av bord, finer eller OSB plater. Minstefall er 15 &deg;. Underlagsbelegg skal benyttes f.o.m. 15&deg; t.o.m. 18&deg; og i v&aelig;rharde sr&oslash;k. 1 pakke dekker 3,15m2.</p>\n<p><strong>Kort leggetid,lang levetid</strong></p>\n<p>Taket er den delen av huset som er mest utsatt for v&aelig;r og vind. Med Takshingel f&aring;r du et robust og slitesterkt tak som motst&aring;r naturkreftene i mange ti&aring;r. Icopal Takshingel er like velegnet til nybygg som til rehabilitering, og passer b&aring;de til hytter og hus. I tillegg er den enkel &aring; legge, lett &aring; frakte og krever lite forarbeid.</p>\n<p><strong>Moderne l&oslash;sninger, bygd p&aring; tradisjoner</strong></p>\n<p>Icopal Takshingel best&aring;r av glassfilt som er impregnert og belagt med SBS spesialasfalt. Sammen med skiferoverflaten gj&oslash;r dette shingelen til et sterkt og smidig produkt som det er lett &aring; legge. SBS asfalten gir ogs&aring; meget god tetting rundt pappspikerne. Et unikt og kraftig klebesystem sikrer umiddelbar nedklebing av shingel-tungene. N&aring;r shingelen legges er det ingen folie som m&aring; rives av f&oslash;r montering, noe som reduserer avfall ved taktekkingen.</p>\n<p>Produktet innehar SINTEF Teknisk Godkjenning nr.2036</p>",
                    "images": [
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 2948753,
                            "mime": "image/jpeg",
                            "name": "44134353-valdres",
                            "realFileName": "44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hf1/h45/9011313639454/44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 503562,
                            "format": "Product-Hero-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Large-Desktop_44134353-valdres",
                            "realFileName": "Product-Hero-Large-Desktop_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/ha6/hb8/9011351879710/Product-Hero-Large-Desktop-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 21965,
                            "format": "Product-Color-Selector-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Mobile_44134353-valdres",
                            "realFileName": "Product-Color-Selector-Mobile_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hb7/hbb/9011351945246/Product-Color-Selector-Mobile-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 44046,
                            "format": "Product-Listing-Card-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Large-Desktop_44134353-valdres",
                            "realFileName": "Product-Listing-Card-Large-Desktop_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h8b/hf9/9011352010782/Product-Listing-Card-Large-Desktop-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 141044,
                            "format": "Product-Hero-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Small-Desktop-Tablet_44134353-valdres",
                            "realFileName": "Product-Hero-Small-Desktop-Tablet_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hdd/hf8/9011352076318/Product-Hero-Small-Desktop-Tablet-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 29316,
                            "format": "Product-Hero-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Mobile_44134353-valdres",
                            "realFileName": "Product-Hero-Mobile_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hcc/hf5/9011352141854/Product-Hero-Mobile-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 50988,
                            "format": "Product-Color-Selector-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Large-Desktop_44134353-valdres",
                            "realFileName": "Product-Color-Selector-Large-Desktop_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hce/hf2/9011352207390/Product-Color-Selector-Large-Desktop-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 29316,
                            "format": "Product-Color-Selector-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Small-Desktop-Tablet_44134353-valdres",
                            "realFileName": "Product-Color-Selector-Small-Desktop-Tablet_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h0d/hf2/9011352272926/Product-Color-Selector-Small-Desktop-Tablet-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 24200,
                            "format": "Product-Listing-Card-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Small-Desktop-Tablet_44134353-valdres",
                            "realFileName": "Product-Listing-Card-Small-Desktop-Tablet_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h0f/hef/9011352338462/Product-Listing-Card-Small-Desktop-Tablet-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 25573,
                            "format": "Product-Listing-Card-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Mobile_44134353-valdres",
                            "realFileName": "Product-Listing-Card-Mobile_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hfe/heb/9011352403998/Product-Listing-Card-Mobile-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 232072,
                            "format": "Web",
                            "mime": "image/jpeg",
                            "name": "Web_44134353-valdres",
                            "realFileName": "Web_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h50/heb/9011352469534/Web-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 6198733,
                            "format": "Print",
                            "mime": "image/tiff",
                            "name": "Print_44134353-valdres",
                            "realFileName": "Print_44134353-valdres.tiff",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h3e/he8/9011352535070/Print-44134353-valdrestiff"
                        }
                    ],
                    "isSampleOrderAllowed": false,
                    "longDescription": "<p>Icopal&nbsp;takshingel Type Valdres er en popul&aelig;r shingel som med sin dr&aring;peform ser ut som gammel skifertekking.&nbsp; Overflaten p&aring; shingelen er naturlig, knust skifer fra Icopals eget skiferbrudd i Valdres. Foruten &aring; sette farge og m&oslash;nster p&aring; taket, beskytter skiferen asfalten mot solens ultrafiolette str&aring;ler. Store felt med kraftkleber sikrerer rask nedklebing av tungene.</p>\n<p>Type Valdres benyttes p&aring; skr&aring; tak med fast undertak av bord, finer eller OSB plater. Minstefall er 15 &deg;. Underlagsbelegg skal benyttes f.o.m. 15&deg; t.o.m. 18&deg; og i v&aelig;rharde sr&oslash;k. 1 pakke dekker 3,15m2.</p>\n<p><strong>Kort leggetid,lang levetid</strong></p>\n<p>Taket er den delen av huset som er mest utsatt for v&aelig;r og vind. Med Takshingel f&aring;r du et robust og slitesterkt tak som motst&aring;r naturkreftene i mange ti&aring;r. Icopal Takshingel er like velegnet til nybygg som til rehabilitering, og passer b&aring;de til hytter og hus. I tillegg er den enkel &aring; legge, lett &aring; frakte og krever lite forarbeid.</p>\n<p><strong>Moderne l&oslash;sninger, bygd p&aring; tradisjoner</strong></p>\n<p>Icopal Takshingel best&aring;r av glassfilt som er impregnert og belagt med SBS spesialasfalt. Sammen med skiferoverflaten gj&oslash;r dette shingelen til et sterkt og smidig produkt som det er lett &aring; legge. SBS asfalten gir ogs&aring; meget god tetting rundt pappspikerne. Et unikt og kraftig klebesystem sikrer umiddelbar nedklebing av shingel-tungene. N&aring;r shingelen legges er det ingen folie som m&aring; rives av f&oslash;r montering, noe som reduserer avfall ved taktekkingen.</p>\n<p>Produktet innehar SINTEF Teknisk Godkjenning nr.2036</p>",
                    "name": "Valdres takshingel",
                    "shortDescription": "Type Valdres er en populær shingel som med sin dråpeform ser ut som gammel skifertekking. Type Valdres Kan monteres på skråtak med fast undertak ned til 15° fall.",
                    "summary": "Type Valdres er en populær shingel som med sin dråpeform ser ut som gammel skifertekking. Type Valdres Kan monteres på skråtak med fast undertak ned til 15° fall.",
                    "variantOptions": [
                        {
                            "approvalStatus": "approved",
                            "classifications": [
                                {
                                    "code": "appearanceAttributes",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/appearanceAttributes.colour",
                                            "featureValues": [
                                                {
                                                    "value": "Skifer"
                                                }
                                            ],
                                            "name": "Farge"
                                        },
                                        {
                                            "code": "bmiClassificationCatalog/1.0/appearanceAttributes.colourfamily",
                                            "featureValues": [
                                                {
                                                    "code": "GREY",
                                                    "value": "Grå"
                                                }
                                            ],
                                            "name": "Farge"
                                        }
                                    ],
                                    "name": "Farge og overflate"
                                },
                                {
                                    "code": "measurements",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/measurements.length",
                                            "featureUnit": {
                                                "name": "millimeter",
                                                "symbol": "mm",
                                                "unitType": "space"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "1000"
                                                }
                                            ],
                                            "name": "Lengde"
                                        },
                                        {
                                            "code": "bmiClassificationCatalog/1.0/measurements.width",
                                            "featureUnit": {
                                                "name": "millimeter",
                                                "symbol": "mm",
                                                "unitType": "space"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "330"
                                                }
                                            ],
                                            "name": "Bredde"
                                        }
                                    ],
                                    "name": "Produktdata"
                                },
                                {
                                    "code": "weightAttributes",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/weightAttributes.netweight",
                                            "featureUnit": {
                                                "name": "kilogram",
                                                "symbol": "kg",
                                                "unitType": "weight"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "26.5"
                                                }
                                            ],
                                            "name": "Nettovekt"
                                        }
                                    ],
                                    "name": "Vekt"
                                }
                            ],
                            "code": "200317_Valdres_roof_shingle_Skifer",
                            "externalProductCode": "44134353",
                            "images": [
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 2948753,
                                    "mime": "image/jpeg",
                                    "name": "Valdres takshingel",
                                    "realFileName": "Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hb5/hb6/8973794639902/Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 505049,
                                    "format": "Product-Hero-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Large-Desktop_Valdres takshingel",
                                    "realFileName": "Product-Hero-Large-Desktop_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hde/h02/8973929644062/Product-Hero-Large-Desktop-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 21992,
                                    "format": "Product-Color-Selector-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Mobile_Valdres takshingel",
                                    "realFileName": "Product-Color-Selector-Mobile_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h1f/h00/8973929709598/Product-Color-Selector-Mobile-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 44171,
                                    "format": "Product-Listing-Card-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Large-Desktop_Valdres takshingel",
                                    "realFileName": "Product-Listing-Card-Large-Desktop_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/he0/h00/8973929775134/Product-Listing-Card-Large-Desktop-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 141458,
                                    "format": "Product-Hero-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Small-Desktop-Tablet_Valdres takshingel",
                                    "realFileName": "Product-Hero-Small-Desktop-Tablet_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hf1/h03/8973929840670/Product-Hero-Small-Desktop-Tablet-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 29375,
                                    "format": "Product-Hero-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Mobile_Valdres takshingel",
                                    "realFileName": "Product-Hero-Mobile_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hef/h06/8973929906206/Product-Hero-Mobile-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 51121,
                                    "format": "Product-Color-Selector-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Large-Desktop_Valdres takshingel",
                                    "realFileName": "Product-Color-Selector-Large-Desktop_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hb0/h07/8973929971742/Product-Color-Selector-Large-Desktop-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 29375,
                                    "format": "Product-Color-Selector-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Small-Desktop-Tablet_Valdres takshingel",
                                    "realFileName": "Product-Color-Selector-Small-Desktop-Tablet_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hdf/hff/8973930037278/Product-Color-Selector-Small-Desktop-Tablet-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 24235,
                                    "format": "Product-Listing-Card-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Small-Desktop-Tablet_Valdres takshingel",
                                    "realFileName": "Product-Listing-Card-Small-Desktop-Tablet_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hcf/hfc/8973930102814/Product-Listing-Card-Small-Desktop-Tablet-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 25611,
                                    "format": "Product-Listing-Card-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Mobile_Valdres takshingel",
                                    "realFileName": "Product-Listing-Card-Mobile_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h20/hfc/8973930168350/Product-Listing-Card-Mobile-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 234108,
                                    "format": "Web",
                                    "mime": "image/jpeg",
                                    "name": "Web_Valdres takshingel",
                                    "realFileName": "Web_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h10/hf9/8973930233886/Web-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 13024318,
                                    "format": "Print",
                                    "mime": "image/tiff",
                                    "name": "Print_Valdres takshingel",
                                    "realFileName": "Print_Valdres takshingel.tiff",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h61/hf8/8973930299422/Print-Valdres-takshingeltiff"
                                }
                            ],
                            "isSampleOrderAllowed": false,
                            "longDescription": "<p>Icopal&nbsp;takshingel Type Valdres er en popul&aelig;r shingel som med sin dr&aring;peform ser ut som gammel skifertekking.&nbsp; Overflaten p&aring; shingelen er naturlig, knust skifer fra Icopals eget skiferbrudd i Valdres. Foruten &aring; sette farge og m&oslash;nster p&aring; taket, beskytter skiferen asfalten mot solens ultrafiolette str&aring;ler. Store felt med kraftkleber sikrerer rask nedklebing av tungene.</p>\n<p>Type Valdres benyttes p&aring; skr&aring; tak med fast undertak av bord, finer eller OSB plater. Minstefall er 15 &deg;. Underlagsbelegg skal benyttes f.o.m. 15&deg; t.o.m. 18&deg; og i v&aelig;rharde sr&oslash;k. 1 pakke dekker 3,15m2.</p>\n<p><strong>Kort leggetid,lang levetid</strong></p>\n<p>Taket er den delen av huset som er mest utsatt for v&aelig;r og vind. Med Takshingel f&aring;r du et robust og slitesterkt tak som motst&aring;r naturkreftene i mange ti&aring;r. Icopal Takshingel er like velegnet til nybygg som til rehabilitering, og passer b&aring;de til hytter og hus. I tillegg er den enkel &aring; legge, lett &aring; frakte og krever lite forarbeid.</p>\n<p><strong>Moderne l&oslash;sninger, bygd p&aring; tradisjoner</strong></p>\n<p>Icopal Takshingel best&aring;r av glassfilt som er impregnert og belagt med SBS spesialasfalt. Sammen med skiferoverflaten gj&oslash;r dette shingelen til et sterkt og smidig produkt som det er lett &aring; legge. SBS asfalten gir ogs&aring; meget god tetting rundt pappspikerne. Et unikt og kraftig klebesystem sikrer umiddelbar nedklebing av shingel-tungene. N&aring;r shingelen legges er det ingen folie som m&aring; rives av f&oslash;r montering, noe som reduserer avfall ved taktekkingen.</p>\n<p>Produktet innehar SINTEF Teknisk Godkjenning nr.2036</p>",
                            "shortDescription": "Type Valdres er en populær shingel som med sin dråpeform ser ut som gammel skifertekking. Type Valdres Kan monteres på skråtak med fast undertak ned til 15° fall."
                        }
                    ]
                }
            ]
        }"
  }
}
