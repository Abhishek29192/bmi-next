## 200327_Primo_S_foot-_or_ridge_plate_Black

POST {{host}}
Content-Type: application/json
{
  "data": {
    "data": "{
            "type": "UPDATED",
            "itemType": "PRODUCTS",
            "items": [
                {
                    "approvalStatus": "approved",
                    "assets": [
                        {
                            "allowedToDownload": true,
                            "assetType": "DATA_SHEETS",
                            "fileSize": 270118,
                            "mime": "application/pdf",
                            "name": "TDS-Primo-shingel-v3",
                            "realFileName": "TDS-Primo-shingel-v3.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h9d/h32/8796911632414/TDS-Primo-shingel-v3.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "DOP",
                            "mime": "application/pdf",
                            "name": "DoP-Icopal-Takshingel-v3-(1)",
                            "realFileName": "DoP-Icopal-Takshingel-v3-(1).pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hef/h31/8796911697950/DoP-Icopal-Takshingel-v3-(1).pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "ASSEMBLY_INSTRUCTIONS",
                            "fileSize": 537675,
                            "mime": "application/pdf",
                            "name": "MON-Primo-shingel-v1",
                            "realFileName": "MON-Primo-shingel-v1.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hde/h2e/8796911763486/MON-Primo-shingel-v1.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MAINTENANCE_DOCUMENTS",
                            "mime": "application/pdf",
                            "name": "FDV-Takshingel",
                            "realFileName": "FDV-Takshingel.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/he0/h2b/8796911829022/FDV-Takshingel.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "PRODUCT_BROCHURE",
                            "fileSize": 5431611,
                            "mime": "application/pdf",
                            "name": "BMI-Takshingel-BRO-MON",
                            "realFileName": "BMI_Icopal_Takshingel_brochure.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h65/hbc/9008929800222/BMI-Icopal-Takshingel-brochurepdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "PRODUCT_BROCHURE",
                            "fileSize": 5431611,
                            "mime": "application/pdf",
                            "name": "BMI-Takshingel-BRO-MON",
                            "realFileName": "BMI_Icopal_Takshingel_brochure.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h65/hbc/9008929800222/BMI-Icopal-Takshingel-brochurepdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "ASSEMBLY_INSTRUCTIONS",
                            "fileSize": 33131035,
                            "mime": "application/pdf",
                            "name": "Takshingel_Monteringsveiledning_2021",
                            "realFileName": "BMI_Icopal_Takshingel_brochure_new_final_low_spread.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/he2/h71/8993686487070/BMI-Icopal-Takshingel-brochure-new-final-low-spreadpdf"
                        }
                    ],
                    "categories": [
                        {
                            "categoryType": "Brand",
                            "code": "Icopal",
                            "image": {
                                "allowedToDownload": true,
                                "altText": "Icopal RGB logo",
                                "assetType": "MASTER_IMAGE",
                                "containerId": "container_Icopal_RGB_Logo",
                                "fileSize": 6144,
                                "mime": "image/png",
                                "name": "bmi_icopal",
                                "realFileName": "bmi_icopal.png",
                                "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h77/h56/8801873297438/bmi-icopal.png"
                            },
                            "name": "Icopal",
                            "parentCategoryCode": "BMI_Brands"
                        },
                        {
                            "categoryType": "ProductFamily",
                            "code": "Primo_NO",
                            "name": "Primo NO",
                            "parentCategoryCode": "PRODUCT_FAMILY"
                        },
                        {
                            "categoryType": "Category",
                            "code": "ROOF_SHINGEL_NO",
                            "name": "Takshingel",
                            "parentCategoryCode": "PITCHEDROOF_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PRODUCTS_NO",
                            "name": "Produkter",
                            "parentCategoryCode": ""
                        },
                        {
                            "categoryType": "Category",
                            "code": "ROOF_NO",
                            "name": "Takprodukter",
                            "parentCategoryCode": "PRODUCTS_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PITCHEDROOF_NO",
                            "name": "Skråtak",
                            "parentCategoryCode": "ROOF_NO"
                        }
                    ],
                    "classifications": [
                        {
                            "code": "generalInformation",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/generalInformation.materials",
                                    "featureValues": [
                                        {
                                            "code": "BITUMEN",
                                            "value": "Bitumen"
                                        }
                                    ],
                                    "name": "Materiale"
                                }
                            ],
                            "name": "Generell informasjon"
                        },
                        {
                            "code": "measurements",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.length",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "2000"
                                        }
                                    ],
                                    "name": "Lengde"
                                },
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.width",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "255"
                                        }
                                    ],
                                    "name": "Bredde"
                                },
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.height",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "6"
                                        }
                                    ],
                                    "name": "Høyde"
                                }
                            ],
                            "name": "Produktdata"
                        },
                        {
                            "code": "scoringWeightAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/scoringWeightAttributes.scoringweight",
                                    "featureUnit": {
                                        "name": "point",
                                        "symbol": "p",
                                        "unitType": "point"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "992"
                                        }
                                    ],
                                    "name": "Scoring Weight"
                                }
                            ],
                            "name": "Produktrangering"
                        },
                        {
                            "code": "weightAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/weightAttributes.netweight",
                                    "featureUnit": {
                                        "name": "kilogram",
                                        "symbol": "kg",
                                        "unitType": "weight"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "1.8"
                                        }
                                    ],
                                    "name": "Nettovekt"
                                }
                            ],
                            "name": "Vekt"
                        }
                    ],
                    "code": "Primo_S_foot-_or_ridge_plate",
                    "description": "<p>Fot/m&oslash;neplater til Primo S</p>",
                    "externalProductCode": "57752622",
                    "images": [
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 5366941,
                            "mime": "image/jpeg",
                            "name": "30738355-primo-fot-mone",
                            "realFileName": "30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h24/hce/8799935660062/30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 327358,
                            "format": "Product-Hero-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Large-Desktop_30738355-primo-fot-mone",
                            "realFileName": "Product-Hero-Large-Desktop_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hba/hf7/8801146241054/Product-Hero-Large-Desktop-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 26620,
                            "format": "Product-Color-Selector-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Mobile_30738355-primo-fot-mone",
                            "realFileName": "Product-Color-Selector-Mobile_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hbc/hf4/8801146306590/Product-Color-Selector-Mobile-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 36945,
                            "format": "Product-Listing-Card-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Large-Desktop_30738355-primo-fot-mone",
                            "realFileName": "Product-Listing-Card-Large-Desktop_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hfb/hf3/8801146372126/Product-Listing-Card-Large-Desktop-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 89784,
                            "format": "Product-Hero-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Small-Desktop-Tablet_30738355-primo-fot-mone",
                            "realFileName": "Product-Hero-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hfd/hf0/8801146437662/Product-Hero-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 29977,
                            "format": "Product-Hero-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Mobile_30738355-primo-fot-mone",
                            "realFileName": "Product-Hero-Mobile_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hec/hed/8801146503198/Product-Hero-Mobile-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 40553,
                            "format": "Product-Color-Selector-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Large-Desktop_30738355-primo-fot-mone",
                            "realFileName": "Product-Color-Selector-Large-Desktop_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h3e/hed/8801146568734/Product-Color-Selector-Large-Desktop-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 29977,
                            "format": "Product-Color-Selector-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Small-Desktop-Tablet_30738355-primo-fot-mone",
                            "realFileName": "Product-Color-Selector-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h2d/hea/8801146634270/Product-Color-Selector-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 27637,
                            "format": "Product-Listing-Card-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Small-Desktop-Tablet_30738355-primo-fot-mone",
                            "realFileName": "Product-Listing-Card-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h7f/he9/8801146699806/Product-Listing-Card-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 28180,
                            "format": "Product-Listing-Card-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Mobile_30738355-primo-fot-mone",
                            "realFileName": "Product-Listing-Card-Mobile_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h6e/he6/8801146765342/Product-Listing-Card-Mobile-30738355-primo-fot-mone.jpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 153821,
                            "format": "Web",
                            "mime": "image/jpeg",
                            "name": "Web_30738355-primo-fot-mone",
                            "realFileName": "Web_30738355-primo-fot-mone.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h5a/hd1/8833155858462/Web-30738355-primo-fot-monejpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                            "fileSize": 11384975,
                            "format": "Print",
                            "mime": "image/tiff",
                            "name": "Print_30738355-primo-fot-monetiff",
                            "realFileName": "Print_30738355-primo-fot-monetiff",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h6a/hd4/8833155923998/Print-30738355-primo-fot-monetiff"
                        }
                    ],
                    "isSampleOrderAllowed": false,
                    "longDescription": "<p>Fot/m&oslash;neplater til Primo S</p>",
                    "name": "Primo fot/møneplate",
                    "summary": "",
                    "variantOptions": [
                        {
                            "approvalStatus": "approved",
                            "classifications": [
                                {
                                    "code": "appearanceAttributes",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/appearanceAttributes.texturefamily",
                                            "featureValues": [
                                                {
                                                    "code": "QUARTZ_SURFACE",
                                                    "value": "Bestrød overflate"
                                                }
                                            ],
                                            "name": "Overflate"
                                        }
                                    ],
                                    "name": "Farge og overflate"
                                },
                                {
                                    "code": "measurements",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/measurements.length",
                                            "featureUnit": {
                                                "name": "millimeter",
                                                "symbol": "mm",
                                                "unitType": "space"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "100"
                                                }
                                            ],
                                            "name": "Lengde"
                                        },
                                        {
                                            "code": "bmiClassificationCatalog/1.0/measurements.width",
                                            "featureUnit": {
                                                "name": "millimeter",
                                                "symbol": "mm",
                                                "unitType": "space"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "25,5"
                                                }
                                            ],
                                            "name": "Bredde"
                                        }
                                    ],
                                    "name": "Produktdata"
                                },
                                {
                                    "code": "weightAttributes",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/weightAttributes.netweight",
                                            "featureUnit": {
                                                "name": "kilogram",
                                                "symbol": "kg",
                                                "unitType": "weight"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "18"
                                                }
                                            ],
                                            "name": "Nettovekt"
                                        }
                                    ],
                                    "name": "Vekt"
                                }
                            ],
                            "code": "200327_Primo_S_foot-_or_ridge_plate_Black",
                            "externalProductCode": "57752622",
                            "images": [
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 5366941,
                                    "mime": "image/jpeg",
                                    "name": "30738355-primo-fot-mone",
                                    "realFileName": "30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h24/hce/8799935660062/30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 327358,
                                    "format": "Product-Hero-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Large-Desktop_30738355-primo-fot-mone",
                                    "realFileName": "Product-Hero-Large-Desktop_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hba/hf7/8801146241054/Product-Hero-Large-Desktop-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 26620,
                                    "format": "Product-Color-Selector-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Mobile_30738355-primo-fot-mone",
                                    "realFileName": "Product-Color-Selector-Mobile_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hbc/hf4/8801146306590/Product-Color-Selector-Mobile-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 36945,
                                    "format": "Product-Listing-Card-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Large-Desktop_30738355-primo-fot-mone",
                                    "realFileName": "Product-Listing-Card-Large-Desktop_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hfb/hf3/8801146372126/Product-Listing-Card-Large-Desktop-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 89784,
                                    "format": "Product-Hero-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Small-Desktop-Tablet_30738355-primo-fot-mone",
                                    "realFileName": "Product-Hero-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hfd/hf0/8801146437662/Product-Hero-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 29977,
                                    "format": "Product-Hero-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Mobile_30738355-primo-fot-mone",
                                    "realFileName": "Product-Hero-Mobile_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hec/hed/8801146503198/Product-Hero-Mobile-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 40553,
                                    "format": "Product-Color-Selector-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Large-Desktop_30738355-primo-fot-mone",
                                    "realFileName": "Product-Color-Selector-Large-Desktop_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h3e/hed/8801146568734/Product-Color-Selector-Large-Desktop-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 29977,
                                    "format": "Product-Color-Selector-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Small-Desktop-Tablet_30738355-primo-fot-mone",
                                    "realFileName": "Product-Color-Selector-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h2d/hea/8801146634270/Product-Color-Selector-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 27637,
                                    "format": "Product-Listing-Card-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Small-Desktop-Tablet_30738355-primo-fot-mone",
                                    "realFileName": "Product-Listing-Card-Small-Desktop-Tablet_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h7f/he9/8801146699806/Product-Listing-Card-Small-Desktop-Tablet-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 28180,
                                    "format": "Product-Listing-Card-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Mobile_30738355-primo-fot-mone",
                                    "realFileName": "Product-Listing-Card-Mobile_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h6e/he6/8801146765342/Product-Listing-Card-Mobile-30738355-primo-fot-mone.jpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 153821,
                                    "format": "Web",
                                    "mime": "image/jpeg",
                                    "name": "Web_30738355-primo-fot-mone",
                                    "realFileName": "Web_30738355-primo-fot-mone.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h5a/hd1/8833155858462/Web-30738355-primo-fot-monejpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Produktbilde takshingel Primo fot/møne grafittsort",
                                    "fileSize": 11384975,
                                    "format": "Print",
                                    "mime": "image/tiff",
                                    "name": "Print_30738355-primo-fot-monetiff",
                                    "realFileName": "Print_30738355-primo-fot-monetiff",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h6a/hd4/8833155923998/Print-30738355-primo-fot-monetiff"
                                }
                            ],
                            "isSampleOrderAllowed": false,
                            "longDescription": "<p>Fot/m&oslash;neplater til Primo S</p>"
                        }
                    ]
                }
            ]
        }"
  }
}

## 200317_Valdres_roof_shingle_Skifer

POST {{host}}
Content-Type: application/json
{
  "data": {
    "data": "{
            "type": "UPDATED",
            "itemType": "PRODUCTS",
            "items": [
                {
                    "approvalStatus": "approved",
                    "assets": [
                        {
                            "allowedToDownload": true,
                            "assetType": "DATA_SHEETS",
                            "fileSize": 275947,
                            "mime": "application/pdf",
                            "name": "TDS-Icopal-Takshingel-v1",
                            "realFileName": "TDS-Icopal-Takshingel-v1.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h0c/h65/8796959932446/TDS-Icopal-Takshingel-v1.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "CERTIFICATES",
                            "fileSize": 204752,
                            "mime": "application/pdf",
                            "name": "Garantibevis-Icopal-Takshingel",
                            "realFileName": "Garantibevis-Icopal-Takshingel.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hba/h65/8796959997982/Garantibevis-Icopal-Takshingel.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "DOP",
                            "fileSize": 221508,
                            "mime": "application/pdf",
                            "name": "DoP-Icopal-Takshingel-v3-(1)",
                            "realFileName": "DoP-Icopal-Takshingel-v3-(1).pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hc3/ha1/8796960063518/DoP-Icopal-Takshingel-v3-(1).pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "DECLARATION_OF_SAFETY",
                            "mime": "application/pdf",
                            "name": "HMF-m30166599",
                            "realFileName": "HMF-m30166599.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hc4/h9e/8796960129054/HMF-m30166599.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MAINTENANCE_DOCUMENTS",
                            "fileSize": 373599,
                            "mime": "application/pdf",
                            "name": "FDV Takshingel",
                            "realFileName": "FDV Takshingel.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h5c/ha9/8800292077598/FDV-Takshingel.pdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "PRODUCT_BROCHURE",
                            "fileSize": 5431611,
                            "mime": "application/pdf",
                            "name": "BMI-Takshingel-BRO-MON",
                            "realFileName": "BMI_Icopal_Takshingel_brochure.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h65/hbc/9008929800222/BMI-Icopal-Takshingel-brochurepdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "TECHNICAL_APPROVALS",
                            "mime": "application/octet-stream",
                            "name": "Teknisk godkjenning Icopal Takshingel",
                            "url": "https://www.sintefcertification.no/Product/Index/34"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "PRODUCT_BROCHURE",
                            "fileSize": 5431611,
                            "mime": "application/pdf",
                            "name": "BMI-Takshingel-BRO-MON",
                            "realFileName": "BMI_Icopal_Takshingel_brochure.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h65/hbc/9008929800222/BMI-Icopal-Takshingel-brochurepdf"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "ASSEMBLY_INSTRUCTIONS",
                            "fileSize": 33131035,
                            "mime": "application/pdf",
                            "name": "Takshingel_Monteringsveiledning_2021",
                            "realFileName": "BMI_Icopal_Takshingel_brochure_new_final_low_spread.pdf",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/he2/h71/8993686487070/BMI-Icopal-Takshingel-brochure-new-final-low-spreadpdf"
                        }
                    ],
                    "categories": [
                        {
                            "categoryType": "Brand",
                            "code": "Icopal",
                            "image": {
                                "allowedToDownload": true,
                                "altText": "Icopal RGB logo",
                                "assetType": "MASTER_IMAGE",
                                "containerId": "container_Icopal_RGB_Logo",
                                "fileSize": 6144,
                                "mime": "image/png",
                                "name": "bmi_icopal",
                                "realFileName": "bmi_icopal.png",
                                "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h77/h56/8801873297438/bmi-icopal.png"
                            },
                            "name": "Icopal",
                            "parentCategoryCode": "BMI_Brands"
                        },
                        {
                            "categoryType": "ProductFamily",
                            "code": "Shingel_Valdres",
                            "name": "Shingel Valdres",
                            "parentCategoryCode": "PRODUCT_FAMILY"
                        },
                        {
                            "categoryType": "Category",
                            "code": "ROOF_SHINGEL_NO",
                            "name": "Takshingel",
                            "parentCategoryCode": "PITCHEDROOF_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PITCHEDROOF_NO",
                            "name": "Skråtak",
                            "parentCategoryCode": "ROOF_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PRODUCTS_NO",
                            "name": "Produkter",
                            "parentCategoryCode": ""
                        },
                        {
                            "categoryType": "Category",
                            "code": "ROOF_NO",
                            "name": "Takprodukter",
                            "parentCategoryCode": "PRODUCTS_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PITCHEDROOF_NO",
                            "name": "Skråtak",
                            "parentCategoryCode": "ROOF_NO"
                        },
                        {
                            "categoryType": "Category",
                            "code": "PRODUCTS_NO",
                            "name": "Produkter",
                            "parentCategoryCode": ""
                        },
                        {
                            "categoryType": "Category",
                            "code": "ROOF_NO",
                            "name": "Takprodukter",
                            "parentCategoryCode": "PRODUCTS_NO"
                        }
                    ],
                    "classifications": [
                        {
                            "code": "sheetsPackingAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/sheetsPackingAttributes.numberofsheetsperpack",
                                    "featureValues": [
                                        {
                                            "value": "22"
                                        }
                                    ],
                                    "name": "Antall takshingel i pakken"
                                }
                            ],
                            "name": "Takshingel forpakning"
                        },
                        {
                            "code": "roofAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/roofAttributes.minimumpitch",
                                    "featureUnit": {
                                        "name": "degree",
                                        "symbol": "°",
                                        "unitType": "slope"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "15"
                                        }
                                    ],
                                    "name": "Laveste takvinkel"
                                }
                            ],
                            "name": "Tak attributter"
                        },
                        {
                            "code": "generalInformation",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/generalInformation.materials",
                                    "featureValues": [
                                        {
                                            "code": "BITUMEN",
                                            "value": "Bitumen"
                                        }
                                    ],
                                    "name": "Materiale"
                                }
                            ],
                            "name": "Generell informasjon"
                        },
                        {
                            "code": "measurements",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.length",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "1000"
                                        }
                                    ],
                                    "name": "Lengde"
                                },
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.thickness",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "3,2"
                                        }
                                    ],
                                    "name": "Tykkelse"
                                },
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.width",
                                    "featureUnit": {
                                        "name": "millimeter",
                                        "symbol": "mm",
                                        "unitType": "space"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "330"
                                        }
                                    ],
                                    "name": "Bredde"
                                },
                                {
                                    "code": "bmiClassificationCatalog/1.0/measurements.additionalmeasurement",
                                    "featureValues": [
                                        {
                                            "value": "143"
                                        }
                                    ],
                                    "name": "Dekkbredde"
                                }
                            ],
                            "name": "Produktdata"
                        },
                        {
                            "code": "safetyInformation",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/safetyInformation.firesafetyclass",
                                    "featureValues": [
                                        {
                                            "code": "F",
                                            "value": "F"
                                        }
                                    ],
                                    "name": "Brannklasse"
                                }
                            ],
                            "name": "Sikkerhetsinformasjon"
                        },
                        {
                            "code": "scoringWeightAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/scoringWeightAttributes.scoringweight",
                                    "featureUnit": {
                                        "name": "point",
                                        "symbol": "p",
                                        "unitType": "point"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "998"
                                        }
                                    ],
                                    "name": "Scoring Weight"
                                }
                            ],
                            "name": "Produktrangering"
                        },
                        {
                            "code": "weightAttributes",
                            "features": [
                                {
                                    "code": "bmiClassificationCatalog/1.0/weightAttributes.weightpersqm",
                                    "featureUnit": {
                                        "name": "kilogram",
                                        "symbol": "kg",
                                        "unitType": "weight"
                                    },
                                    "featureValues": [
                                        {
                                            "value": "8,3"
                                        }
                                    ],
                                    "name": "Vekt pr.kvm"
                                }
                            ],
                            "name": "Vekt"
                        }
                    ],
                    "code": "Valdres_roof_shingle",
                    "description": "<p>Icopal&nbsp;takshingel Type Valdres er en popul&aelig;r shingel som med sin dr&aring;peform ser ut som gammel skifertekking.&nbsp; Overflaten p&aring; shingelen er naturlig, knust skifer fra Icopals eget skiferbrudd i Valdres. Foruten &aring; sette farge og m&oslash;nster p&aring; taket, beskytter skiferen asfalten mot solens ultrafiolette str&aring;ler. Store felt med kraftkleber sikrerer rask nedklebing av tungene.</p>\n<p>Type Valdres benyttes p&aring; skr&aring; tak med fast undertak av bord, finer eller OSB plater. Minstefall er 15 &deg;. Underlagsbelegg skal benyttes f.o.m. 15&deg; t.o.m. 18&deg; og i v&aelig;rharde sr&oslash;k. 1 pakke dekker 3,15m2.</p>\n<p><strong>Kort leggetid,lang levetid</strong></p>\n<p>Taket er den delen av huset som er mest utsatt for v&aelig;r og vind. Med Takshingel f&aring;r du et robust og slitesterkt tak som motst&aring;r naturkreftene i mange ti&aring;r. Icopal Takshingel er like velegnet til nybygg som til rehabilitering, og passer b&aring;de til hytter og hus. I tillegg er den enkel &aring; legge, lett &aring; frakte og krever lite forarbeid.</p>\n<p><strong>Moderne l&oslash;sninger, bygd p&aring; tradisjoner</strong></p>\n<p>Icopal Takshingel best&aring;r av glassfilt som er impregnert og belagt med SBS spesialasfalt. Sammen med skiferoverflaten gj&oslash;r dette shingelen til et sterkt og smidig produkt som det er lett &aring; legge. SBS asfalten gir ogs&aring; meget god tetting rundt pappspikerne. Et unikt og kraftig klebesystem sikrer umiddelbar nedklebing av shingel-tungene. N&aring;r shingelen legges er det ingen folie som m&aring; rives av f&oslash;r montering, noe som reduserer avfall ved taktekkingen.</p>\n<p>Produktet innehar SINTEF Teknisk Godkjenning nr.2036</p>",
                    "images": [
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 2948753,
                            "mime": "image/jpeg",
                            "name": "44134353-valdres",
                            "realFileName": "44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hf1/h45/9011313639454/44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 503562,
                            "format": "Product-Hero-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Large-Desktop_44134353-valdres",
                            "realFileName": "Product-Hero-Large-Desktop_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/ha6/hb8/9011351879710/Product-Hero-Large-Desktop-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 21965,
                            "format": "Product-Color-Selector-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Mobile_44134353-valdres",
                            "realFileName": "Product-Color-Selector-Mobile_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hb7/hbb/9011351945246/Product-Color-Selector-Mobile-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 44046,
                            "format": "Product-Listing-Card-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Large-Desktop_44134353-valdres",
                            "realFileName": "Product-Listing-Card-Large-Desktop_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h8b/hf9/9011352010782/Product-Listing-Card-Large-Desktop-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 141044,
                            "format": "Product-Hero-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Small-Desktop-Tablet_44134353-valdres",
                            "realFileName": "Product-Hero-Small-Desktop-Tablet_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hdd/hf8/9011352076318/Product-Hero-Small-Desktop-Tablet-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 29316,
                            "format": "Product-Hero-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Hero-Mobile_44134353-valdres",
                            "realFileName": "Product-Hero-Mobile_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hcc/hf5/9011352141854/Product-Hero-Mobile-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 50988,
                            "format": "Product-Color-Selector-Large-Desktop",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Large-Desktop_44134353-valdres",
                            "realFileName": "Product-Color-Selector-Large-Desktop_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hce/hf2/9011352207390/Product-Color-Selector-Large-Desktop-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 29316,
                            "format": "Product-Color-Selector-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Color-Selector-Small-Desktop-Tablet_44134353-valdres",
                            "realFileName": "Product-Color-Selector-Small-Desktop-Tablet_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h0d/hf2/9011352272926/Product-Color-Selector-Small-Desktop-Tablet-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 24200,
                            "format": "Product-Listing-Card-Small-Desktop-Tablet",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Small-Desktop-Tablet_44134353-valdres",
                            "realFileName": "Product-Listing-Card-Small-Desktop-Tablet_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h0f/hef/9011352338462/Product-Listing-Card-Small-Desktop-Tablet-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 25573,
                            "format": "Product-Listing-Card-Mobile",
                            "mime": "image/jpeg",
                            "name": "Product-Listing-Card-Mobile_44134353-valdres",
                            "realFileName": "Product-Listing-Card-Mobile_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hfe/heb/9011352403998/Product-Listing-Card-Mobile-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 232072,
                            "format": "Web",
                            "mime": "image/jpeg",
                            "name": "Web_44134353-valdres",
                            "realFileName": "Web_44134353-valdres.jpg",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h50/heb/9011352469534/Web-44134353-valdresjpg"
                        },
                        {
                            "allowedToDownload": true,
                            "assetType": "MASTER_IMAGE",
                            "containerId": "container_00003042_Valdres_roof_shingle_Valdres-takshingel.jpg",
                            "fileSize": 6198733,
                            "format": "Print",
                            "mime": "image/tiff",
                            "name": "Print_44134353-valdres",
                            "realFileName": "Print_44134353-valdres.tiff",
                            "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h3e/he8/9011352535070/Print-44134353-valdrestiff"
                        }
                    ],
                    "isSampleOrderAllowed": false,
                    "longDescription": "<p>Icopal&nbsp;takshingel Type Valdres er en popul&aelig;r shingel som med sin dr&aring;peform ser ut som gammel skifertekking.&nbsp; Overflaten p&aring; shingelen er naturlig, knust skifer fra Icopals eget skiferbrudd i Valdres. Foruten &aring; sette farge og m&oslash;nster p&aring; taket, beskytter skiferen asfalten mot solens ultrafiolette str&aring;ler. Store felt med kraftkleber sikrerer rask nedklebing av tungene.</p>\n<p>Type Valdres benyttes p&aring; skr&aring; tak med fast undertak av bord, finer eller OSB plater. Minstefall er 15 &deg;. Underlagsbelegg skal benyttes f.o.m. 15&deg; t.o.m. 18&deg; og i v&aelig;rharde sr&oslash;k. 1 pakke dekker 3,15m2.</p>\n<p><strong>Kort leggetid,lang levetid</strong></p>\n<p>Taket er den delen av huset som er mest utsatt for v&aelig;r og vind. Med Takshingel f&aring;r du et robust og slitesterkt tak som motst&aring;r naturkreftene i mange ti&aring;r. Icopal Takshingel er like velegnet til nybygg som til rehabilitering, og passer b&aring;de til hytter og hus. I tillegg er den enkel &aring; legge, lett &aring; frakte og krever lite forarbeid.</p>\n<p><strong>Moderne l&oslash;sninger, bygd p&aring; tradisjoner</strong></p>\n<p>Icopal Takshingel best&aring;r av glassfilt som er impregnert og belagt med SBS spesialasfalt. Sammen med skiferoverflaten gj&oslash;r dette shingelen til et sterkt og smidig produkt som det er lett &aring; legge. SBS asfalten gir ogs&aring; meget god tetting rundt pappspikerne. Et unikt og kraftig klebesystem sikrer umiddelbar nedklebing av shingel-tungene. N&aring;r shingelen legges er det ingen folie som m&aring; rives av f&oslash;r montering, noe som reduserer avfall ved taktekkingen.</p>\n<p>Produktet innehar SINTEF Teknisk Godkjenning nr.2036</p>",
                    "name": "Valdres takshingel",
                    "shortDescription": "Type Valdres er en populær shingel som med sin dråpeform ser ut som gammel skifertekking. Type Valdres Kan monteres på skråtak med fast undertak ned til 15° fall.",
                    "summary": "Type Valdres er en populær shingel som med sin dråpeform ser ut som gammel skifertekking. Type Valdres Kan monteres på skråtak med fast undertak ned til 15° fall.",
                    "variantOptions": [
                        {
                            "approvalStatus": "approved",
                            "classifications": [
                                {
                                    "code": "appearanceAttributes",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/appearanceAttributes.colour",
                                            "featureValues": [
                                                {
                                                    "value": "Skifer"
                                                }
                                            ],
                                            "name": "Farge"
                                        },
                                        {
                                            "code": "bmiClassificationCatalog/1.0/appearanceAttributes.colourfamily",
                                            "featureValues": [
                                                {
                                                    "code": "GREY",
                                                    "value": "Grå"
                                                }
                                            ],
                                            "name": "Farge"
                                        }
                                    ],
                                    "name": "Farge og overflate"
                                },
                                {
                                    "code": "measurements",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/measurements.length",
                                            "featureUnit": {
                                                "name": "millimeter",
                                                "symbol": "mm",
                                                "unitType": "space"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "1000"
                                                }
                                            ],
                                            "name": "Lengde"
                                        },
                                        {
                                            "code": "bmiClassificationCatalog/1.0/measurements.width",
                                            "featureUnit": {
                                                "name": "millimeter",
                                                "symbol": "mm",
                                                "unitType": "space"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "330"
                                                }
                                            ],
                                            "name": "Bredde"
                                        }
                                    ],
                                    "name": "Produktdata"
                                },
                                {
                                    "code": "weightAttributes",
                                    "features": [
                                        {
                                            "code": "bmiClassificationCatalog/1.0/weightAttributes.netweight",
                                            "featureUnit": {
                                                "name": "kilogram",
                                                "symbol": "kg",
                                                "unitType": "weight"
                                            },
                                            "featureValues": [
                                                {
                                                    "value": "26.5"
                                                }
                                            ],
                                            "name": "Nettovekt"
                                        }
                                    ],
                                    "name": "Vekt"
                                }
                            ],
                            "code": "200317_Valdres_roof_shingle_Skifer",
                            "externalProductCode": "44134353",
                            "images": [
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 2948753,
                                    "mime": "image/jpeg",
                                    "name": "Valdres takshingel",
                                    "realFileName": "Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hb5/hb6/8973794639902/Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 505049,
                                    "format": "Product-Hero-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Large-Desktop_Valdres takshingel",
                                    "realFileName": "Product-Hero-Large-Desktop_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hde/h02/8973929644062/Product-Hero-Large-Desktop-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 21992,
                                    "format": "Product-Color-Selector-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Mobile_Valdres takshingel",
                                    "realFileName": "Product-Color-Selector-Mobile_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h1f/h00/8973929709598/Product-Color-Selector-Mobile-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 44171,
                                    "format": "Product-Listing-Card-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Large-Desktop_Valdres takshingel",
                                    "realFileName": "Product-Listing-Card-Large-Desktop_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/he0/h00/8973929775134/Product-Listing-Card-Large-Desktop-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 141458,
                                    "format": "Product-Hero-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Small-Desktop-Tablet_Valdres takshingel",
                                    "realFileName": "Product-Hero-Small-Desktop-Tablet_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hf1/h03/8973929840670/Product-Hero-Small-Desktop-Tablet-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 29375,
                                    "format": "Product-Hero-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Hero-Mobile_Valdres takshingel",
                                    "realFileName": "Product-Hero-Mobile_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hef/h06/8973929906206/Product-Hero-Mobile-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 51121,
                                    "format": "Product-Color-Selector-Large-Desktop",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Large-Desktop_Valdres takshingel",
                                    "realFileName": "Product-Color-Selector-Large-Desktop_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hb0/h07/8973929971742/Product-Color-Selector-Large-Desktop-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 29375,
                                    "format": "Product-Color-Selector-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Color-Selector-Small-Desktop-Tablet_Valdres takshingel",
                                    "realFileName": "Product-Color-Selector-Small-Desktop-Tablet_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hdf/hff/8973930037278/Product-Color-Selector-Small-Desktop-Tablet-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 24235,
                                    "format": "Product-Listing-Card-Small-Desktop-Tablet",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Small-Desktop-Tablet_Valdres takshingel",
                                    "realFileName": "Product-Listing-Card-Small-Desktop-Tablet_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hcf/hfc/8973930102814/Product-Listing-Card-Small-Desktop-Tablet-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 25611,
                                    "format": "Product-Listing-Card-Mobile",
                                    "mime": "image/jpeg",
                                    "name": "Product-Listing-Card-Mobile_Valdres takshingel",
                                    "realFileName": "Product-Listing-Card-Mobile_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h20/hfc/8973930168350/Product-Listing-Card-Mobile-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 234108,
                                    "format": "Web",
                                    "mime": "image/jpeg",
                                    "name": "Web_Valdres takshingel",
                                    "realFileName": "Web_Valdres takshingel.jpg",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h10/hf9/8973930233886/Web-Valdres-takshingeljpg"
                                },
                                {
                                    "allowedToDownload": true,
                                    "assetType": "MASTER_IMAGE",
                                    "containerId": "container_Valdres takshingel.jpg",
                                    "fileSize": 13024318,
                                    "format": "Print",
                                    "mime": "image/tiff",
                                    "name": "Print_Valdres takshingel",
                                    "realFileName": "Print_Valdres takshingel.tiff",
                                    "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h61/hf8/8973930299422/Print-Valdres-takshingeltiff"
                                }
                            ],
                            "isSampleOrderAllowed": false,
                            "longDescription": "<p>Icopal&nbsp;takshingel Type Valdres er en popul&aelig;r shingel som med sin dr&aring;peform ser ut som gammel skifertekking.&nbsp; Overflaten p&aring; shingelen er naturlig, knust skifer fra Icopals eget skiferbrudd i Valdres. Foruten &aring; sette farge og m&oslash;nster p&aring; taket, beskytter skiferen asfalten mot solens ultrafiolette str&aring;ler. Store felt med kraftkleber sikrerer rask nedklebing av tungene.</p>\n<p>Type Valdres benyttes p&aring; skr&aring; tak med fast undertak av bord, finer eller OSB plater. Minstefall er 15 &deg;. Underlagsbelegg skal benyttes f.o.m. 15&deg; t.o.m. 18&deg; og i v&aelig;rharde sr&oslash;k. 1 pakke dekker 3,15m2.</p>\n<p><strong>Kort leggetid,lang levetid</strong></p>\n<p>Taket er den delen av huset som er mest utsatt for v&aelig;r og vind. Med Takshingel f&aring;r du et robust og slitesterkt tak som motst&aring;r naturkreftene i mange ti&aring;r. Icopal Takshingel er like velegnet til nybygg som til rehabilitering, og passer b&aring;de til hytter og hus. I tillegg er den enkel &aring; legge, lett &aring; frakte og krever lite forarbeid.</p>\n<p><strong>Moderne l&oslash;sninger, bygd p&aring; tradisjoner</strong></p>\n<p>Icopal Takshingel best&aring;r av glassfilt som er impregnert og belagt med SBS spesialasfalt. Sammen med skiferoverflaten gj&oslash;r dette shingelen til et sterkt og smidig produkt som det er lett &aring; legge. SBS asfalten gir ogs&aring; meget god tetting rundt pappspikerne. Et unikt og kraftig klebesystem sikrer umiddelbar nedklebing av shingel-tungene. N&aring;r shingelen legges er det ingen folie som m&aring; rives av f&oslash;r montering, noe som reduserer avfall ved taktekkingen.</p>\n<p>Produktet innehar SINTEF Teknisk Godkjenning nr.2036</p>",
                            "shortDescription": "Type Valdres er en populær shingel som med sin dråpeform ser ut som gammel skifertekking. Type Valdres Kan monteres på skråtak med fast undertak ned til 15° fall."
                        }
                    ]
                }
            ]
        }"
  }
}

## 004574_Fabric_Fiberduk_white
POST {{host}}
Content-Type: application/json
{
  "data": {
    "data": "{
  "type": "UPDATED",
  "itemType": "PRODUCTS",
  "items": [
    {
  "approvalStatus": "approved",
  "categories": [
    {
      "categoryType": "Brand",
      "code": "BMI_Components",
      "name": "BMI Components",
      "parentCategoryCode": "BMI_Brands"
    },
    {
      "categoryType": "Category",
      "code": "UNDERLAY_PVC_FOIL_FLATROOF_NO",
      "name": "Underlagsbelegg PVC folie flate tak",
      "parentCategoryCode": "PVC_FOIL_FLATROOF_NO"
    },
    {
      "categoryType": "Category",
      "code": "CONSTRUCTION",
      "name": "Andre byggevarer",
      "parentCategoryCode": "PRODUCTS_NO"
    },
    {
      "categoryType": "Category",
      "code": "SOLAR_AERODEK_NO",
      "name": "Solar AeroDek",
      "parentCategoryCode": "Solar_NO"
    },
    {
      "categoryType": "Category",
      "code": "PVC_FLATROOF_NO",
      "name": "PVC ",
      "parentCategoryCode": "FLATROOF_NO"
    },
    {
      "categoryType": "Category",
      "code": "PRODUCTS_NO",
      "name": "Produkter",
      "parentCategoryCode": ""
    },
    {
      "categoryType": "Category",
      "code": "FLATROOF_NO",
      "name": "Flate tak",
      "parentCategoryCode": "ROOF_NO"
    },
    {
      "categoryType": "Category",
      "code": "PVC_FOIL_FLATROOF_NO",
      "name": "PVC takfolie flate tak",
      "parentCategoryCode": "PVC_FLATROOF_NO"
    },
    {
      "categoryType": "Category",
      "code": "ROOF_NO",
      "name": "Takprodukter",
      "parentCategoryCode": "PRODUCTS_NO"
    },
    {
      "categoryType": "Category",
      "code": "PRODUCTS_NO",
      "name": "Produkter",
      "parentCategoryCode": ""
    },
    {
      "categoryType": "Category",
      "code": "PRODUCTS_NO",
      "name": "Produkter",
      "parentCategoryCode": ""
    },
    {
      "categoryType": "ProductFamily",
      "code": "PRODUCT_FAMILY",
      "name": "Produktfamilie"
    },
    {
      "categoryType": "ProductFamily",
      "code": "Solar_NO",
      "name": "Solar_NO",
      "parentCategoryCode": "PRODUCT_FAMILY"
    },
    {
      "categoryType": "Category",
      "code": "SOLAR_NO",
      "name": "Solar",
      "parentCategoryCode": "PRODUCTS_NO"
    }
  ],
  "classifications": [
    {
      "code": "scoringWeightAttributes",
      "features": [
        {
          "code": "bmiClassificationCatalog/1.0/scoringWeightAttributes.scoringweight",
          "featureValues": [
            {
              "value": "1"
            }
          ],
          "name": "Scoring Weight"
        }
      ],
      "name": "Produktrangering"
    }
  ],
  "code": "Fabric_Fiberduk",
  "description": "<p>testing..</p>",
  "images": [
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 37041,
      "mime": "image/jpeg",
      "name": "turmalin sad 3",
      "realFileName": "turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h1a/h25/8974699986974/turmalin-sad-3jpg"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 68058,
      "format": "Product-Hero-Large-Desktop",
      "mime": "image/jpeg",
      "name": "Product-Hero-Large-Desktop_turmalin sad 3",
      "realFileName": "Product-Hero-Large-Desktop_turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h75/h92/8975158706206/Product-Hero-Large-Desktop-turmalin-sad-3jpg"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 23997,
      "format": "Product-Color-Selector-Mobile",
      "mime": "image/jpeg",
      "name": "Product-Color-Selector-Mobile_turmalin sad 3",
      "realFileName": "Product-Color-Selector-Mobile_turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h36/h93/8975158771742/Product-Color-Selector-Mobile-turmalin-sad-3jpg"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 28222,
      "format": "Product-Listing-Card-Large-Desktop",
      "mime": "image/jpeg",
      "name": "Product-Listing-Card-Large-Desktop_turmalin sad 3",
      "realFileName": "Product-Listing-Card-Large-Desktop_turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h34/h96/8975158837278/Product-Listing-Card-Large-Desktop-turmalin-sad-3jpg"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 43836,
      "format": "Product-Hero-Small-Desktop-Tablet",
      "mime": "image/jpeg",
      "name": "Product-Hero-Small-Desktop-Tablet_turmalin sad 3",
      "realFileName": "Product-Hero-Small-Desktop-Tablet_turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h45/h99/8975158902814/Product-Hero-Small-Desktop-Tablet-turmalin-sad-3jpg"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 33186,
      "format": "Product-Hero-Mobile",
      "mime": "image/jpeg",
      "name": "Product-Hero-Mobile_turmalin sad 3",
      "realFileName": "Product-Hero-Mobile_turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hf3/h99/8975158968350/Product-Hero-Mobile-turmalin-sad-3jpg"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 41719,
      "format": "Product-Color-Selector-Large-Desktop",
      "mime": "image/jpeg",
      "name": "Product-Color-Selector-Large-Desktop_turmalin sad 3",
      "realFileName": "Product-Color-Selector-Large-Desktop_turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/hb0/he4/8975159033886/Product-Color-Selector-Large-Desktop-turmalin-sad-3jpg"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 29898,
      "format": "Product-Color-Selector-Small-Desktop-Tablet",
      "mime": "image/jpeg",
      "name": "Product-Color-Selector-Small-Desktop-Tablet_turmalin sad 3",
      "realFileName": "Product-Color-Selector-Small-Desktop-Tablet_turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h5e/he5/8975159099422/Product-Color-Selector-Small-Desktop-Tablet-turmalin-sad-3jpg"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 21285,
      "format": "Product-Listing-Card-Small-Desktop-Tablet",
      "mime": "image/jpeg",
      "name": "Product-Listing-Card-Small-Desktop-Tablet_turmalin sad 3",
      "realFileName": "Product-Listing-Card-Small-Desktop-Tablet_turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h6f/he8/8975159164958/Product-Listing-Card-Small-Desktop-Tablet-turmalin-sad-3jpg"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 21801,
      "format": "Product-Listing-Card-Mobile",
      "mime": "image/jpeg",
      "name": "Product-Listing-Card-Mobile_turmalin sad 3",
      "realFileName": "Product-Listing-Card-Mobile_turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h80/heb/8975159230494/Product-Listing-Card-Mobile-turmalin-sad-3jpg"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 701422,
      "format": "Print",
      "mime": "image/tiff",
      "name": "Print_turmalin sad 3",
      "realFileName": "Print_turmalin sad 3.tiff",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h3f/hef/8975159361566/Print-turmalin-sad-3tiff"
    },
    {
      "allowedToDownload": true,
      "assetType": "MASTER_IMAGE",
      "containerId": "container_turmalin sad 3.jpg",
      "fileSize": 78577,
      "format": "Web",
      "mime": "image/jpeg",
      "name": "Web_turmalin sad 3",
      "realFileName": "Web_turmalin sad 3.jpg",
      "url": "https://bmipimngqa.azureedge.net/sys-master-hybris-media/h2f/hec/8975159296030/Web-turmalin-sad-3jpg"
    }
  ],
  "longDescription": "<p>testing..</p>",
  "name": "Fabric (Fiberduk)_excel",
  "summary": "",
  "variantOptions": [
    {
      "approvalStatus": "approved",
      "classifications": [
        {
          "code": "appearanceAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/appearanceAttributes.variantattribute",
              "featureValues": [
                {
                  "value": "TESTING"
                }
              ],
              "name": "Variant attributt"
            },
            {
              "code": "bmiClassificationCatalog/1.0/appearanceAttributes.colourfamily",
              "featureValues": [
                {
                  "code": "WHITE",
                  "value": "Hvit"
                }
              ],
              "name": "Farge"
            },
            {
              "code": "bmiClassificationCatalog/1.0/appearanceAttributes.texturefamily",
              "featureValues": [
                {
                  "code": "CLASSIC",
                  "value": "Classic"
                }
              ],
              "name": "Overflate"
            }
          ],
          "name": "Farge og overflate"
        },
        {
          "code": "packagingInformation",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.quantityperunit",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Antall per enhet"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.quantityperpallet",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Quantity Per Pallet"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.packagingtype",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Pakningstype"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.sqmperpallet",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Kvm pr.pall"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.packagingsize",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Pakkestørrelse"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.numberofunitsperpallet",
              "featureValues": [
                {
                  "value": "23234"
                }
              ],
              "name": "Number Of Units Per Pallet"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.packsperpallet",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Pakker pr.pall"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.numberofunitsperpack",
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Number Of Units Per Pack"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.quantityperpack",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Quantity Per Pack"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.packagingweight",
              "featureUnit": {
                "name": "kilogram",
                "symbol": "kg",
                "unitType": "weight"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Vekt pakke"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.packagingvolume",
              "featureUnit": {
                "name": "cubic meter",
                "symbol": "m³",
                "unitType": "volume"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Volum pakke"
            },
            {
              "code": "bmiClassificationCatalog/1.0/packagingInformation.weightperpack",
              "featureUnit": {
                "name": "kilogram",
                "symbol": "kg",
                "unitType": "weight"
              },
              "featureValues": [
                {
                  "value": "23423423"
                }
              ],
              "name": "vekt pr. pakke"
            }
          ],
          "name": "Forpakningsinformasjon"
        },
        {
          "code": "flatroofAndConstruction",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/flatroofAndConstruction.resistancetostaticloading",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Resistance to Static Loading"
            },
            {
              "code": "bmiClassificationCatalog/1.0/flatroofAndConstruction.durabilityofwatertightnessagainstchemicals",
              "featureValues": [
                {
                  "value": "23423423"
                }
              ],
              "name": "Durability of Watertightness Against Chemicals"
            },
            {
              "code": "bmiClassificationCatalog/1.0/flatroofAndConstruction.durabilityofwatertightnessagainstaging",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Durability of Watertightness Against Aging"
            }
          ],
          "name": "Flate tak & konstruksjon"
        },
        {
          "code": "resistanceAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/resistanceAttributes.heatresistancelimit",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Heat Resistance Limit"
            },
            {
              "code": "bmiClassificationCatalog/1.0/resistanceAttributes.selfadhesive",
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Selvklebende"
            },
            {
              "code": "bmiClassificationCatalog/1.0/resistanceAttributes.weldablewithopenflame",
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Sveisbar med åpen flamme"
            }
          ],
          "name": "Motstandsegenskaper"
        },
        {
          "code": "uvResistanceAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/uvResistanceAttributes.uvresistance",
              "featureUnit": {
                "name": "week",
                "symbol": "week",
                "unitType": "time"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "UV-motstand"
            }
          ],
          "name": "UV Resistance Attributes"
        },
        {
          "code": "generalInformation",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/generalInformation.modeldesignation",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Modellbetegnelse"
            },
            {
              "code": "bmiClassificationCatalog/1.0/generalInformation.collectiondesignation",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Collection Designation"
            },
            {
              "code": "bmiClassificationCatalog/1.0/generalInformation.content",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Content"
            },
            {
              "code": "bmiClassificationCatalog/1.0/generalInformation.classification",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Classification"
            },
            {
              "code": "bmiClassificationCatalog/1.0/generalInformation.voluntarycertification",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Voluntary Certification"
            },
            {
              "code": "bmiClassificationCatalog/1.0/generalInformation.application",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Application"
            }
          ],
          "name": "Generell informasjon"
        },
        {
          "code": "measurements",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/measurements.length",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "520"
                }
              ],
              "name": "Lengde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/measurements.width",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "4530"
                }
              ],
              "name": "Bredde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/measurements.height",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "501"
                }
              ],
              "name": "Høyde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/measurements.volume",
              "featureUnit": {
                "name": "cubic meter",
                "symbol": "m³",
                "unitType": "volume"
              },
              "featureValues": [
                {
                  "value": "60.930"
                }
              ],
              "name": "Volum"
            },
            {
              "code": "bmiClassificationCatalog/1.0/measurements.baseunitofmeasure",
              "featureValues": [
                {
                  "value": "PCE"
                }
              ],
              "name": "Base Unit Of Measure"
            }
          ],
          "name": "Produktdata"
        },
        {
          "code": "bmiGuaranteeAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/bmiGuaranteeAttributes.bmiguarantee",
              "featureUnit": {
                "name": "year",
                "symbol": "y",
                "unitType": "time"
              },
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "BMI Guarantee"
            }
          ],
          "name": "BMI Garanti attributter"
        },
        {
          "code": "safetyInformation",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/safetyInformation.dangeroussubstances",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Dangerous Substances"
            },
            {
              "code": "bmiClassificationCatalog/1.0/safetyInformation.firereaction",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Fire Reaction"
            },
            {
              "code": "bmiClassificationCatalog/1.0/safetyInformation.firebehavior",
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Fire Behavior"
            },
            {
              "code": "bmiClassificationCatalog/1.0/safetyInformation.firesafetyclass",
              "featureValues": [
                {
                  "code": "F",
                  "value": "F"
                }
              ],
              "name": "Brannklasse"
            }
          ],
          "name": "Sikkerhetsinformasjon"
        },
        {
          "code": "weightAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/weightAttributes.netweight",
              "featureUnit": {
                "name": "kilogram",
                "symbol": "kg",
                "unitType": "weight"
              },
              "featureValues": [
                {
                  "value": "49.400"
                }
              ],
              "name": "Nettovekt"
            },
            {
              "code": "bmiClassificationCatalog/1.0/weightAttributes.grossweight",
              "featureUnit": {
                "name": "kilogram",
                "symbol": "kg",
                "unitType": "weight"
              },
              "featureValues": [
                {
                  "value": "14.400"
                }
              ],
              "name": "Bruttovekt"
            }
          ],
          "name": "Vekt"
        },
        {
          "code": "enduranceAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/enduranceAttributes.resistancetowaterpassage",
              "featureValues": [
                {
                  "value": "4545"
                }
              ],
              "name": "Resistance To Water Passage"
            },
            {
              "code": "bmiClassificationCatalog/1.0/enduranceAttributes.selfadhesivestrips",
              "featureValues": [
                {
                  "value": "23544"
                }
              ],
              "name": "Selvklebende strips"
            },
            {
              "code": "bmiClassificationCatalog/1.0/enduranceAttributes.resistancetoimpact",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "11111"
                }
              ],
              "name": "Resistance To Impact"
            }
          ],
          "name": "Utholdenhetsattributter"
        },
        {
          "code": "solarAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.modulelengthafterinstallation",
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Modul dekklengde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.modulewidthafterinstallation",
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Modul dekkbredde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.moduleheightafterinstallation",
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Modul byggehøyde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.deckwidth",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "234324"
                }
              ],
              "name": "Dekkbredde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.decklengthtegalit",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Dekklengde Zanda Minster"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.decklengthturmalin",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Dekklengde Turmalin"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.nominalpowerpnom",
              "featureUnit": {
                "name": "watt",
                "symbol": "W",
                "unitType": "power"
              },
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Nominal Power (Pnom)"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.moduleweight",
              "featureUnit": {
                "name": "kilogram",
                "symbol": "kg",
                "unitType": "weight"
              },
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Modul vekt"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.decklengthclassicmonterodonau",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Deck Length Classic, Montero, Donau"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.roofpitch",
              "featureUnit": {
                "name": "degree",
                "symbol": "°",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Takvinkel"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.roofpitchturmalin",
              "featureUnit": {
                "name": "degree",
                "symbol": "°",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Takvinkel Turmalin"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.celldimensionslxw",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Cell Dimensions (L x W)"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.roofpitchclassicmonterodonau",
              "featureUnit": {
                "name": "degree",
                "symbol": "°",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Roof Pitch Classic, Montero, Donau"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.roofpitchtegalit",
              "featureUnit": {
                "name": "degree",
                "symbol": "°",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Takvinkel Zanda Minster"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.numberofcells",
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Number Of Cells"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.celltype",
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Cell Type"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.frontcovertype",
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Front Cover Type"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.cablediametrer",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Cable Diametrer"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.glassthickness",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Glasstykkelse"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.typeofsolarglass",
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Type Of Solarglass"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.lighttransmittance",
              "featureUnit": {
                "name": "percent",
                "symbol": "%",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Light Transmittance"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.modulewidth",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Modul bredde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.moduleheight",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "456"
                }
              ],
              "name": "Modul høyde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.modulelength",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Modul lengde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/solarAttributes.colourofflashing",
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Colour Of Flashing"
            }
          ],
          "name": "Solar Attributes"
        },
        {
          "code": "layerAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/layerAttributes.layer",
              "featureValues": [
                {
                  "code": "LAYER_1",
                  "value": "Layer 1"
                }
              ],
              "name": "Layer"
            }
          ],
          "name": "Lagattributter"
        },
        {
          "code": "elongationAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/elongationAttributes.elongationatbreaktransverse",
              "featureUnit": {
                "name": "percent",
                "symbol": "%",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "454"
                }
              ],
              "name": "Elongation At Break - Transverse"
            },
            {
              "code": "bmiClassificationCatalog/1.0/elongationAttributes.elongationatbreaklongitudinal",
              "featureUnit": {
                "name": "percent",
                "symbol": "%",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "4545"
                }
              ],
              "name": "Elongation At Break - Longitudinal"
            },
            {
              "code": "bmiClassificationCatalog/1.0/elongationAttributes.elongation",
              "featureValues": [
                {
                  "value": "554"
                }
              ],
              "name": "Elongation"
            }
          ],
          "name": "Elongation Attributes"
        },
        {
          "code": "durabilityAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/durabilityAttributes.resistancetotearingnaillongitudinal",
              "featureUnit": {
                "name": "newton",
                "symbol": "N",
                "unitType": "strength"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Resistance To Tearing - Nail - Longitudinal"
            },
            {
              "code": "bmiClassificationCatalog/1.0/durabilityAttributes.resistancetotearingnailtransverse",
              "featureUnit": {
                "name": "newton",
                "symbol": "N",
                "unitType": "strength"
              },
              "featureValues": [
                {
                  "value": "234234234"
                }
              ],
              "name": "Resistance To Tearing - Nail - Transverse"
            },
            {
              "code": "bmiClassificationCatalog/1.0/durabilityAttributes.maximumtensilestrengthper50mmtransverse",
              "featureUnit": {
                "name": "newton",
                "symbol": "N",
                "unitType": "strength"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Maximum Tensile Strength Per 50 mm - Transverse"
            },
            {
              "code": "bmiClassificationCatalog/1.0/durabilityAttributes.maximumtensilestrengthper50mmlongitudinal",
              "featureUnit": {
                "name": "newton",
                "symbol": "N",
                "unitType": "strength"
              },
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Maximum Tensile Strength Per 50 mm - Longitudinal"
            },
            {
              "code": "bmiClassificationCatalog/1.0/durabilityAttributes.flowresistanceatelevatedtemperature",
              "featureUnit": {
                "name": "degree Celsius",
                "symbol": "°C",
                "unitType": "temperature"
              },
              "featureValues": [
                {
                  "value": "23424"
                }
              ],
              "name": "Flow Resistance At Elevated Temperature"
            }
          ],
          "name": "Holdbarhetsattributter"
        },
        {
          "code": "flatRoofAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/flatRoofAttributes.minimumsubstratedepth",
              "featureUnit": {
                "name": "millimeter",
                "symbol": "mm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "554"
                }
              ],
              "name": "Minste underlagsdybde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/flatRoofAttributes.peelresistance",
              "featureUnit": {
                "name": "newton",
                "symbol": "N",
                "unitType": "strength"
              },
              "featureValues": [
                {
                  "value": "1111"
                }
              ],
              "name": "Peel Resistance"
            },
            {
              "code": "bmiClassificationCatalog/1.0/flatRoofAttributes.shearresistanceper50mm",
              "featureUnit": {
                "name": "newton",
                "symbol": "N",
                "unitType": "strength"
              },
              "featureValues": [
                {
                  "value": "23232"
                }
              ],
              "name": "Shear Resistance per 50 mm"
            },
            {
              "code": "bmiClassificationCatalog/1.0/flatRoofAttributes.curingtime",
              "featureValues": [
                {
                  "value": "234234234"
                }
              ],
              "name": "Curing Time"
            },
            {
              "code": "bmiClassificationCatalog/1.0/flatRoofAttributes.foldabilityatlowtemperatures",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Foldability at low temperatures"
            },
            {
              "code": "bmiClassificationCatalog/1.0/flatRoofAttributes.jointsheerstrength",
              "featureValues": [
                {
                  "value": "3434"
                }
              ],
              "name": "Joint sheer strength"
            },
            {
              "code": "bmiClassificationCatalog/1.0/flatRoofAttributes.externalfireperformance",
              "featureValues": [
                {
                  "value": "234234234"
                }
              ],
              "name": "External fire performance"
            },
            {
              "code": "bmiClassificationCatalog/1.0/flatRoofAttributes.jointpeelresistance",
              "featureValues": [
                {
                  "value": "5454"
                }
              ],
              "name": "Joint peel resistance"
            }
          ],
          "name": "Flate tak attributter"
        },
        {
          "code": "compoundAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/compoundAttributes.compound",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Compound"
            }
          ],
          "name": "Compound Attributes"
        },
        {
          "code": "reinforcementAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/reinforcementAttributes.reinforcement",
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Reinforcement"
            }
          ],
          "name": "Forsterkningsattributter"
        },
        {
          "code": "rollsAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/rollsAttributes.rolllength",
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Rull lengde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/rollsAttributes.coveringcapacitysqmperroll",
              "featureValues": [
                {
                  "value": "234"
                }
              ],
              "name": "Covering Capacity Sqm Per Roll"
            },
            {
              "code": "bmiClassificationCatalog/1.0/rollsAttributes.rollwidth",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Rull bredde"
            },
            {
              "code": "bmiClassificationCatalog/1.0/rollsAttributes.rangeofvariableperwidth",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Range Of Variable Per Width"
            },
            {
              "code": "bmiClassificationCatalog/1.0/rollsAttributes.weightperroll",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Rull vekt"
            },
            {
              "code": "bmiClassificationCatalog/1.0/rollsAttributes.bondingmethod",
              "featureValues": [
                {
                  "code": "STRIPE_BONDING",
                  "value": "Stripe Bonding"
                }
              ],
              "name": "Bonding method"
            }
          ],
          "name": "Rullprodukter attributter"
        },
        {
          "code": "rollsPackingAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/rollsPackingAttributes.numberofrollperpallet",
              "featureValues": [
                {
                  "value": "324234"
                }
              ],
              "name": "Antall ruller per pall"
            }
          ],
          "name": "Rolls Packing Attributes"
        },
        {
          "code": "surfaceTextureDownside",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureDownside.type",
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Type"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureDownside.seedinggrainstructuremaizecontentofgrainsizehalfmmdownside",
              "featureUnit": {
                "name": "percent",
                "symbol": "%",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Seeding - grain structure - maize content of grain size <0.5mm"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureDownside.seedingtypedownside",
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Seeding type"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureDownside.seedinglinertype",
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Seeding - liner - type"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureDownside.grainstructuremaizecontentofgrainsizehalfmm",
              "featureUnit": {
                "name": "percent",
                "symbol": "%",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Grain structure - maize content of grain size <0.5mm"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureDownside.massperunitareameanvalue",
              "featureUnit": {
                "name": "gram per square meter",
                "symbol": "g/m²",
                "unitType": "surfaceDensity"
              },
              "featureValues": [
                {
                  "value": "345"
                }
              ],
              "name": "Mass per unit area mean value"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureDownside.seedinglinerthicknessmeanvalue",
              "featureUnit": {
                "name": "micrometer",
                "symbol": "μm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Seeding - liner - thickness mean value"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureDownside.seedingmassperunitareameanvaluedownside",
              "featureUnit": {
                "name": "gram per square meter",
                "symbol": "g/m²",
                "unitType": "surfaceDensity"
              },
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Seeding - Mass per unit area mean value"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureDownside.laminatingfilmthicknessdownside",
              "featureUnit": {
                "name": "micrometer",
                "symbol": "μm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "34534"
                }
              ],
              "name": "Laminating film - thickness"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureDownside.backingfleecemassperunitareadownside",
              "featureUnit": {
                "name": "gram per square meter",
                "symbol": "g/m²",
                "unitType": "surfaceDensity"
              },
              "featureValues": [
                {
                  "value": "345345"
                }
              ],
              "name": "Backing fleece - mass per unit area"
            }
          ],
          "name": "Overflate undersiden"
        },
        {
          "code": "surfaceTextureUpside",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureUpside.seedingtypeupside",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Seeding type"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureUpside.aluminiumcompositethicknessmeanvalue",
              "featureUnit": {
                "name": "micrometer",
                "symbol": "μm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Aluminium composite - thickness - mean value"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureUpside.seedingmassperunitareameanvalueupside",
              "featureUnit": {
                "name": "gram per square meter",
                "symbol": "g/m²",
                "unitType": "surfaceDensity"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Seeding - Mass per unit area mean value"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureUpside.laminatingfilmthicknessupside",
              "featureUnit": {
                "name": "micrometer",
                "symbol": "μm",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Laminating film - thickness"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureUpside.seedinggrainstructuremaizecontentofgrainsizehalfmmupside",
              "featureUnit": {
                "name": "percent",
                "symbol": "%",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Seeding - grain structure - maize content of grain size <0.5mm"
            },
            {
              "code": "bmiClassificationCatalog/1.0/surfaceTextureUpside.backingfleecemassperunitareaupside",
              "featureUnit": {
                "name": "gram per square meter",
                "symbol": "g/m²",
                "unitType": "surfaceDensity"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Backing fleece - mass per unit area"
            }
          ],
          "name": "Overflate oversiden"
        },
        {
          "code": "waterVaporTransmissionAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/waterVaporTransmissionAttributes.watervapordiffusionresistancefactormu",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Water Vapor Diffusion Resistance Factor mu"
            },
            {
              "code": "bmiClassificationCatalog/1.0/waterVaporTransmissionAttributes.watervapordiffusionequivalentairlayerthickness",
              "featureUnit": {
                "name": "meter",
                "symbol": "m",
                "unitType": "space"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Water Vapor Diffusion Equivalent Air Layer Thickness"
            }
          ],
          "name": "Water Vapor Transmission Attributes"
        },
        {
          "code": "performanceAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/performanceAttributes.tensilestrength",
              "featureUnit": {
                "name": "dekanewton",
                "symbol": "daN",
                "unitType": "strength"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Tensile Strength"
            },
            {
              "code": "bmiClassificationCatalog/1.0/performanceAttributes.surfacedownside",
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Overflate på undersiden"
            },
            {
              "code": "bmiClassificationCatalog/1.0/performanceAttributes.surfaceupside",
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Overflate på oversiden"
            },
            {
              "code": "bmiClassificationCatalog/1.0/performanceAttributes.lowtempflexibility",
              "featureUnit": {
                "name": "degree Celsius",
                "symbol": "°C",
                "unitType": "temperature"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Low Temp Flexibility"
            },
            {
              "code": "bmiClassificationCatalog/1.0/performanceAttributes.watercolumn",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Water Column"
            }
          ],
          "name": "Ytelsesattributter"
        },
        {
          "code": "roofAttributes",
          "features": [
            {
              "code": "bmiClassificationCatalog/1.0/roofAttributes.productnorm",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Product Norm"
            },
            {
              "code": "bmiClassificationCatalog/1.0/roofAttributes.applicationnorm",
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Application Norm"
            },
            {
              "code": "bmiClassificationCatalog/1.0/roofAttributes.operatingtemperaturerange",
              "featureUnit": {
                "name": "degree Celsius",
                "symbol": "°C",
                "unitType": "temperature"
              },
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Operating Temperature Range"
            },
            {
              "code": "bmiClassificationCatalog/1.0/roofAttributes.minimumpitch",
              "featureUnit": {
                "name": "degree",
                "symbol": "°",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "23423"
                }
              ],
              "name": "Laveste takvinkel"
            },
            {
              "code": "bmiClassificationCatalog/1.0/roofAttributes.maximumpitch",
              "featureUnit": {
                "name": "degree",
                "symbol": "°",
                "unitType": "slope"
              },
              "featureValues": [
                {
                  "value": "234234"
                }
              ],
              "name": "Høyeste takvinkel"
            }
          ],
          "name": "Tak attributter"
        }
      ],
      "code": "004574_Fabric_Fiberduk_white",
      "longDescription": "<p>testing..</p>",
      "s4MaterialNumber": "sri_00000010009001"
    }
  ]
}
  ]
}
"
  }
}
