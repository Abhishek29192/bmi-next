test_head:
  extends: .test_jest
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == 'master')"
      changes:
        - applications/dxb/head/**/*
        - components/**/*
        - libraries/**/*
        - jest/**/*
        - package.json
        - "**/package.json"
  variables:
    WORKSPACE: "@bmi/head"
    ROOT_DIR: "applications/dxb/head"

test_mr_coverage_head:
  extends: .test_jest_mr_coverage
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - applications/dxb/head/**/*
        - components/**/*
        - libraries/**/*
        - jest/**/*
        - package.json
  variables:
    WORKSPACE: "@bmi/head"

build_head:
  stage: build
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == 'master')"
      changes:
        - applications/dxb/head/**/*
        - components/**/*
        - libraries/**/*
        - package.json
        - "**/package.json"
  needs:
    - install
  variables:
    GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES: "true"
  before_script:
    - yarn config set cache-folder ${PWD}/.yarn_cache
  script:
    - yarn workspace @bmi/head check:ts
    - yarn workspace @bmi/head build
  artifacts:
    paths:
      - applications/dxb/head/public
  cache:
    - key:
        files:
          - yarn.lock
      policy: pull
      untracked: false
      paths:
        - "**/node_modules"
        - ".yarn_cache"
    - key: build_head
      policy: pull-push
      untracked: false
      paths:
        - "applications/dxb/head/.cache"
        - "applications/dxb/head/public"

deploy_head_preview:
  stage: deploy
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - applications/dxb/head/**/*
        - components/**/*
        - libraries/**/*
  needs:
    - build_head
  before_script:
    - yarn config set cache-folder ~/.yarn
    - apt-get update
    - apt-get install -y jq
  script:
    - |
      cd applications/dxb/head
      node ./scripts/netlify-toml-builder.js
      node ./scripts/netlify-token-replacer.js
      cd ../../../
      DEPLOY_RESULT=$(npx netlify deploy --dir applications/dxb/head/public --site "${NETLIFY_HEAD_SITE_ID}" --auth "${NETLIFY_AUTH_TOKEN}" --json) || exit 0
      echo ${DEPLOY_RESULT}
      SITE_URL=$(echo ${DEPLOY_RESULT} | jq -r '.deploy_url')
      curl --request POST --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" -H "Content-Type: application/json" \
        -d "{\"body\":\"Deployed to: ${SITE_URL}\"}" \
        "https://gitlab.com/api/v4/projects/19163612/merge_requests/${CI_MERGE_REQUEST_IID}/notes"
      echo "${SITE_URL}" > deploy_head
  artifacts:
    paths:
      - deploy_head

# https://www.zaproxy.org/docs/docker/baseline-scan/
# Triggered by Netlify when deploy is complete
# Disabled until it can be fixed
baseline_scan_head_preview:
  stage: dynamic security
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - applications/dxb/head/**/*
        - components/**/*
        - libraries/**/*
  needs:
    - deploy_head_preview
  image: owasp/zap2docker-stable:latest
  cache: {}
  script:
    - |
      [ ! -f "deploy_head" ] && echo "Nothing deployed to test" && exit 0
      base_url=$(cat deploy_head)
      [ -z "${base_url}" ] && echo "Nothing deployed to test" && exit 0
      mkdir /zap/wrk
      cp applications/dxb/head/dast/* /zap/wrk
      xmlstarlet ed --inplace -P -u '/configuration/context/authentication/form/loginurl' -v "${base_url}" /zap/wrk/mr.context
      zap-baseline.py -t "${base_url}/no/" -r zap_output.html -n mr.context -U qa || exit 0
  artifacts:
    paths:
      - zap_output.html

# https://www.zaproxy.org/docs/docker/full-scan/
# Should be set as a scheduled job for cron 0 0 * * 0 (midnight every sunday)
# SAST_DISABLED should be set to true
full_scan_head_qa:
  stage: dynamic security
  rules:
    - if: "$WHICH_SCHEDULE == 'full_scan_head_qa'"
      when: delayed
      start_in: 1 minute
  image: owasp/zap2docker-stable:latest
  cache: {}
  script:
    - zap-full-scan.py -t https://bmi-dxb-head-qa.netlify.app/ -r zap_output.html -n applications/dxb/head/qa.context -U qa
  artifacts:
    paths:
      - zap_output.html

# https://www.zaproxy.org/docs/docker/baseline-scan/
# Should be set as a scheduled job for cron 0 0 * * 0 (midnight every sunday)
# SAST_DISABLED should be set to true
# When happy with how this works, change to use zap-full-scan.py
baseline_scan_head_prod:
  stage: dynamic security
  rules:
    - if: '$WHICH_SCHEDULE == "baseline_scan_head_prod"'
  image: owasp/zap2docker-stable:latest
  script:
    - zap-baseline.py -t https://bmi-dxb-head-production.netlify.app -r zap_output.html -n applications/dxb/head/prod.context
  artifacts:
    paths:
      - zap_output.html

# https://github.com/GoogleChrome/lighthouse-ci
# Lighthouse scan on netlify build
lighthouseci_scan_head_preview:
  stage: lighthouse scan
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - applications/dxb/head/**/*
        - components/**/*
        - libraries/**/*
  needs:
    - deploy_head_preview
  image: cypress/browsers:node14.15.0-chrome86-ff82
  variables:
    # Required as QA password has a `$` in it
    NETLIFY_PWD: "$NETLIFY_PASSWORD_QA"
  script:
    - |
      [ ! -f "deploy_head" ] && echo "Nothing deployed to test" && exit 0
      base_url=$(cat deploy_head)
      [ -z "${base_url}" ] && echo "Nothing deployed to test" && exit 0
      urls=(
        "${base_url}/no/"
        "${base_url}/no/metal-tiles/contact-us/"
        "${base_url}/no/product-category-page/product-sub-category-page/aerodek-robust-plus/"
      )
      params="--collect.settings.pwd=${NETLIFY_PWD}"
      for url in ${urls[@]}; do
        params="$params --collect.url=${url}"
      done
      yarn workspace @bmi/head lighthouse ${params} || echo "LHCI failed!"
  artifacts:
    paths:
      - applications/dxb/head/lighthouseci/reports

# https://github.com/GoogleChrome/lighthouse-ci
# Should be set as a scheduled job for cron 0 2 * * 0 (2am every sunday) for QA
# Additional scheduled jobs for Pre-Prod and Prod at 3am and 4am
# SAST_DISABLED should be set to true
lighthouseci_scan_head:
  stage: lighthouse scan
  variables:
    # Required as QA password has a `$` in it
    NETLIFY_PWD: "$LIGHTHOUSE_PWD"
  rules:
    - if: "$WHICH_SCHEDULE == 'lighthouseci_scan_head'"
  image: cypress/browsers:node14.15.0-chrome86-ff82
  script:
    - sed -i 's/"http:\/\/localhost:8000\/no"/'$LIGHTHOUSE_URLS'/g' applications/dxb/head/lighthouserc.js
    - yarn workspace @bmi/head lighthouse --collect.settings.pwd=$NETLIFY_PWD
  artifacts:
    paths:
      - applications/dxb/head/lighthouseci/reports

############################################################################
# Templates used by each market to run content migrations
############################################################################
.migrate_content:
  variables:
    DXB_MARKET_ID: "" # Two letter market ID  -i.e. NO
  stage: migration
  rules:
    - if: '($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master") || $CI_COMMIT_TAG'
      changes:
        - libraries/migrate/projects/dxb/**/*
  before_script:
    - |
      apt-get update
      apt-get install -y jq

      if [ "$CI_COMMIT_BRANCH" == "master" ]; then
        SOURCE_BRANCH=master
        DXB_MIGRATION_CREDENTIALS=$DXB_MIGRATION_CREDENTIALS_QA
      fi
          
      if [[ "$CI_COMMIT_TAG" =~ $DXB_RELEASE_TAG_FORMAT_PREPROD ]]; then
        SOURCE_BRANCH=pre-production
        DXB_MIGRATION_CREDENTIALS=$DXB_MIGRATION_CREDENTIALS_PREPROD
      fi

      if [[ "$CI_COMMIT_TAG" =~ $DXB_RELEASE_TAG_FORMAT_PROD ]]; then
        SOURCE_BRANCH=production
        DXB_MIGRATION_CREDENTIALS=$DXB_MIGRATION_CREDENTIALS_PROD
      fi

      export PROJECT_RELATIVE_PATH=projects/dxb
      export MANAGEMENT_ACCESS_TOKEN=$(cat $DXB_MIGRATION_CREDENTIALS | jq -r --arg DXB_MARKET_ID "$DXB_MARKET_ID" '. [$DXB_MARKET_ID] | .MANAGEMENT_ACCESS_TOKEN')
      export SPACE_ID=$(cat $DXB_MIGRATION_CREDENTIALS | jq -r --arg DXB_MARKET_ID "$DXB_MARKET_ID" '. [$DXB_MARKET_ID] | .SPACE_ID')
  script:
    - yarn build-contentful true $SOURCE_BRANCH $CI_COMMIT_TAG

.deploy_gatsby_cloud:
  variables:
    DXB_MARKET_ID: "" # Two letter market ID  -i.e. NO
  stage: deploy
  rules:
    - if: '($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master") || $CI_COMMIT_TAG'
      changes:
        - libraries/migrate/projects/dxb/**/*
  before_script:
    - |
      apt-get update
      apt-get install -y jq

      if [ "$CI_COMMIT_BRANCH" == "master" ]; then
        DXB_BUILD_HOOKS=$DXB_BUILD_HOOKS_QA
      fi
          
      if [[ "$CI_COMMIT_TAG" =~ $DXB_RELEASE_TAG_FORMAT_PREPROD ]]; then
        DXB_BUILD_HOOKS=$DXB_BUILD_HOOKS_PREPROD
      fi

      if [[ "$CI_COMMIT_TAG" =~ $DXB_RELEASE_TAG_FORMAT_PROD ]]; then
        DXB_BUILD_HOOKS=$DXB_BUILD_HOOKS_PROD
      fi
  script:
    - |
      DXB_MARKET_BUILD_HOOK=$(cat $DXB_BUILD_HOOKS | jq -r --arg DXB_MARKET_ID "$DXB_MARKET_ID" '. [$DXB_MARKET_ID]')
      curl -X POST -d {} $DXB_MARKET_BUILD_HOOK

##############################################################
# Market specific migration and deploy jobs start from here
##############################################################

migrate_content_norway:
  extends: .migrate_content
  needs:
    - install
  variables:
    DXB_MARKET_ID: "NO"

deploy_gatsby_cloud_norway:
  extends: .deploy_gatsby_cloud
  needs:
    - migrate_content_norway
  variables:
    DXB_MARKET_ID: "NO"
# Uncomment once ready
# migrate_content_italy:
#   extends: .migrate_content
#   needs:
#     - install
#   variables:
#     DXB_MARKET_ID: "IT"
#   rules:
#     - if: "$CI_COMMIT_TAG" # Only trigger for tags as Italy is not on QA
#       changes:
#         - libraries/migrate/projects/dxb/**/*

# deploy_gatsby_cloud_italy:
#   extends: .deploy_gatsby_cloud
#   needs:
#     - migrate_content_italy
#   variables:
#     DXB_MARKET_ID: "IT"
#   rules:
#     - if: "$CI_COMMIT_TAG" # Only trigger for tags as Italy is not on QA
#       changes:
#         - libraries/migrate/projects/dxb/**/*
##############################################################
# Market specific migration and deploy jobs end here
##############################################################
