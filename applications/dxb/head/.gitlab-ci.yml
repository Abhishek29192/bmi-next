test_head:
  extends: .test_yarn_workspace
  rules:
    - !reference [ .ingore_release_mrs, rules ]
    - if: !reference [ .run_for_changes_on_main, rules, if ]
      changes:
        - applications/dxb/head/**/*
        - jest/**/*
        - yarn.lock
    - if: !reference [ .run_for_changes_on_mr, rules, if ]
      changes:
        - applications/dxb/head/**/*
        - jest/**/*
        - yarn.lock
  variables:
    WORKSPACE: "@bmi/head"
    ROOT_DIR: "applications/dxb/head"

test_mr_coverage_head:
  extends: .test_mr_coverage_yarn_workspace
  rules:
    - !reference [ .ingore_release_mrs, rules ]
    - if: !reference [ .run_for_changes_on_main, rules, if ]
      changes:
        - applications/dxb/head/**/*
    - if: !reference [ .run_for_changes_on_mr, rules, if ]
      changes:
        - applications/dxb/head/**/*
  variables:
    WORKSPACE: "@bmi/head"
    ROOT_DIR: "applications/dxb/head"

compile_head_mr:
  extends: .compile_yarn_workspace
  rules:
    - !reference [ .ingore_release_mrs, rules ]
    - if: !reference [ .run_for_changes_on_main, rules, if ]
      changes:
        - applications/dxb/head/**/*
        - yarn.lock
    - if: !reference [ .run_for_changes_on_mr, rules, if ]
      changes:
        - applications/dxb/head/**/*
        - yarn.lock
  variables:
    WORKSPACE: "@bmi/head"
    ROOT_DIR: "applications/dxb/head"

wait_until_head_deployed_to_gatsby:
  stage: deploy
  image: !reference [ .node-full-image, image ]
  rules:
    - !reference [ .ingore_release_mrs, rules ]
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - "applications/dxb/contentful-migrate/**/*"
      when: never
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - applications/dxb/head/**/*
  needs: [ ]
  cache: { }
  timeout: 15m
  script:
    - applications/dxb/head/scripts/gatsby-cloud-mr-url.sh
  artifacts:
    paths:
      - deploy_head

# https://www.zaproxy.org/docs/docker/baseline-scan/
.base_scan:
  stage: post deploy
  rules:
    - when: never
  image: !reference [ .owasp-image, image ]
  cache: { }
  script:
    - mkdir /zap/wrk
    - cp applications/dxb/head/dast/* /zap/wrk
    - zap-baseline.py -t "${BASE_URL}" -J gl-dast-report.json -r zap_output.html -n ${ZAP_ENVIRONMENT}.context -U ${ZAP_ENVIRONMENT} || failed=true
    - cp /zap/wrk/gl-dast-report.json .
    - cp /zap/wrk/zap_output.html  .
    - "[ $failed ] && exit 1"
  artifacts:
    reports:
      dast: gl-dast-report.json
    paths:
      - zap_output.html
    when: always

# https://www.zaproxy.org/docs/docker/full-scan/
.full_scan:
  stage: post deploy
  rules:
    - when: never
  image: !reference [ .owasp-image, image ]
  timeout: 3h
  cache: { }
  script:
    - mkdir /zap/wrk
    - cp applications/dxb/head/dast/* /zap/wrk
    - xmlstarlet ed --inplace -P -u '/configuration/context/authentication/form/loginurl' -v "${BASE_URL}" applications/dxb/head/dast/${ZAP_ENVIRONMENT}.context
    - xmlstarlet ed --inplace -P -u '/configuration/context/authentication/form/loginpageurl' -v "${BASE_URL}" applications/dxb/head/dast/${ZAP_ENVIRONMENT}.context
    - zap-full-scan.py -t "${BASE_URL}" -J gl-dast-report.json -r zap_output.html -n ${ZAP_ENVIRONMENT}.context -U ${ZAP_ENVIRONMENT} || failed=true
    - cp /zap/wrk/gl-dast-report.json .
    - cp /zap/wrk/zap_output.html  .
    - "[ $failed ] && exit 1"
  artifacts:
    reports:
      dast: gl-dast-report.json
    paths:
      - zap_output.html
    when: always

# Triggered when Gatsby deploy is complete
baseline_scan_head_preview:
  extends: .base_scan
  rules:
    - !reference [ .ingore_release_mrs, rules ]
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - "applications/dxb/contentful-migrate/**/*"
      when: never
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - applications/dxb/head/**/*
  needs:
    - wait_until_head_deployed_to_gatsby
  allow_failure: true
  variables:
    ZAP_ENVIRONMENT: "mr"
  before_script:
    - |
      [ ! -f "deploy_head" ] && echo "Nothing deployed to test" && exit 0
      export BASE_URL=$(cat deploy_head)
      [ -z "${BASE_URL}" ] && echo "Nothing deployed to test" && exit 0
      export BASE_URL=${BASE_URL}/no

# Should be set as a scheduled job for cron 0 0 * * 0 (midnight every sunday)
# SAST_DISABLED should be set to true
full_scan_head_qa:
  extends: .full_scan
  rules:
    - if: "$WHICH_SCHEDULE == 'full_scan_head_qa'"
  variables:
    BASE_URL: https://dxbqa.gatsbyjs.io/no/
    ZAP_ENVIRONMENT: qa

full_scan_head_pre_prod:
  extends: .full_scan
  rules:
    - if: "$WHICH_SCHEDULE == 'full_scan_head_pre_prod'"
  variables:
    ZAP_ENVIRONMENT: pre-production

# Should be set as a scheduled job for cron 0 0 * * 0 (midnight every sunday)
# SAST_DISABLED should be set to true
# When happy with how this works, change to use zap-full-scan.py
baseline_scan_head_prod:
  extends: .base_scan
  rules:
    - if: '$WHICH_SCHEDULE == "baseline_scan_head_prod"'
  variables:
    ZAP_ENVIRONMENT: production

# https://github.com/GoogleChrome/lighthouse-ci
.lighthouse_scan:
  stage: post deploy
  variables:
    # Required as QA password has a `$` in it
    NETLIFY_PWD: "$LIGHTHOUSE_PWD"
  rules:
    - when: never
  image: !reference [ .cypress-image, image ]
  script:
    - |
      params="--collect.settings.pwd=${NETLIFY_PWD}"
      for url in ${LIGHTHOUSE_URLS[@]}; do
        params="$params --collect.url=${url}"
      done
      yarn workspace @bmi/head lighthouse ${params}
  artifacts:
    when: always
    paths:
      - applications/dxb/head/lighthouseci/reports

# Lighthouse scan on netlify build
lighthouseci_scan_head_preview:
  extends: .lighthouse_scan
  rules:
    - !reference [ .ingore_release_mrs, rules ]
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - "applications/dxb/contentful-migrate/**/*"
      when: never
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - applications/dxb/head/**/*
  needs:
    - job: install_yarn
      optional: true
    - wait_until_head_deployed_to_gatsby
  variables:
    # Required as QA password has a `$` in it
    NETLIFY_PWD: "$NETLIFY_PASSWORD_QA"
  before_script:
    - |
      [ ! -f "deploy_head" ] && echo "Nothing deployed to test" && exit 0
      export base_url=$(cat deploy_head)
      [ -z "${base_url}" ] && echo "Nothing deployed to test" && exit 0
      export LIGHTHOUSE_URLS=(
        "${base_url}/no/"
        "${base_url}/no/contact-us/"
        "${base_url}/no/metal-tiles/"
        "${base_url}/no/roof-products/"
        "${base_url}/no/p/zanda-arktis-normalstein-svart-betong-289333998/"
        "${base_url}/no/s/thermaweld-firesmart-warm-roof-ply-osb-safe2torch-282193240/"
        "${base_url}/no/documentation-landing-page/technical-product-catalogues-for-automation/"
        "${base_url}/no/find-a-merchant/"
        "${base_url}/no/search/?q=zanda"
      )

# Should be set as a scheduled job for cron 0 2 * * 0 (2am every sunday) for QA
# Additional scheduled jobs for Pre-Prod and Prod at 3am and 4am
# SAST_DISABLED should be set to true
lighthouseci_scan_head:
  extends: .lighthouse_scan
  rules:
    - if: "$WHICH_SCHEDULE == 'lighthouseci_scan_head'"
