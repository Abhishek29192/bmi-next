"""
Represents common properties across pages.
"""
interface ContentfulPage {
  id: ID!

  "The name of this page, representative of the type."
  title: String!

  "The url for this page, devoid of any prefix."
  slug: String!

  "The brand logo for this page."
  brandLogo: String

  "The short description for this page."
  subtitle: String

  "The main image of this page. Can be used when referencing this page."
  featuredImage: ContentfulAsset

  "The page should show the sign up banner."
  showSignUpBanner: Boolean

  "Tag for the page"
  tag: ContentfulTag
}

"""
Represents a simple page type, implementing ContentfulPage.
"""
type ContentfulSimplePage implements ContentfulPage & Node {
  id: ID!

  "The name of this page, representative of the type."
  title: String!

  "The url for this page, devoid of any prefix."
  slug: String!

  "The brand logo for this page."
  brandLogo: String

  "The short description for this page."
  subtitle: String

  "The main image of this page. Can be used when referencing this page."
  featuredImage: ContentfulAsset

  "The page should show the sign up banner."
  showSignUpBanner: Boolean

  "Tag for the page"
  tag: ContentfulTag #
}

"""
Represents a contact us page, implementing ContentfulPage.
"""
type ContentfulContactUsPage implements ContentfulPage & Node {
  id: ID!

  "The name of this page, representative of the type."
  title: String!

  "The url for this page, devoid of any prefix."
  slug: String!

  "This field will always return null."
  brandLogo: String

  "The short description for this page."
  subtitle: String

  "The main image of this page. Can be used when referencing this page."
  featuredImage: ContentfulAsset

  "The page should show the sign up banner."
  showSignUpBanner: Boolean

  "Tag for the page"
  tag: ContentfulTag
}

"""
Represents a team page, implementing ContentfulPage.
"""
type ContentfulTeamPage implements ContentfulPage & Node {
  id: ID!

  "The name of this page, representative of the type."
  title: String!

  "The url for this page, devoid of any prefix."
  slug: String!

  "This field will always return null."
  brandLogo: String

  "This field will always return null."
  subtitle: String

  "The main image of this page. Can be used when referencing this page."
  featuredImage: ContentfulAsset

  "The page should show the sign up banner."
  showSignUpBanner: Boolean

  "Tag for the page"
  tag: ContentfulTag
}

"""
Represents a product lister page content type.
"""
type contentfulProductListerPageContentRichTextNode implements Node {
  id: ID!

  "The JSON for this content."
  json: JSON
}

"""
Represents a product lister page, implementing ContentfulPage.
"""
type ContentfulProductListerPage implements ContentfulPage & Node {
  id: ID!

  "The name of this page, representative of the type."
  title: String!

  "The url for this page, devoid of any prefix."
  slug: String!

  "This field will always return null."
  brandLogo: String

  "The PIM category this page is attached to."
  categoryCode: String!

  "The description for this category."
  content: contentfulProductListerPageContentRichTextNode!

  "The features for this category."
  features: [String]

  "The link for extra information about this category's features."
  featuresLink: ContentfulLink @link(from: "featuresLink___NODE")

  "This field will always return null."
  subtitle: String

  "The main image of this page. Can be used when referencing this page."
  featuredImage: ContentfulAsset

  "The page should show the sign up banner."
  showSignUpBanner: Boolean

  "Tag for the page"
  tag: ContentfulTag
}

"""
Represents a combination of Title, Description, Image, and Link combination.
"""
type ContentfulPromo implements Node {
  "The title should always be required."
  title: String!

  "The Brand logo for this promotion."
  brandLogo: String

  "Tag for the promo"
  tag: ContentfulTag
}

"""
Represents a tag that group pages in a category
"""
type ContentfulTag implements Node {
  id: ID!

  "The title should always be required."
  title: String!
}

"""
Represents a union for a combination of promo or pages.
"""
union ContentfulPromoOrPage =
    ContentfulPromo
  | ContentfulContactUsPage
  | ContentfulSimplePage
  | ContentfulTeamPage
  | ContentfulProductListerPage

"""
Represents the rich text content for the ContentfulCardCollectionSection.
"""
type RichText implements Node {
  id: ID!

  "The JSON for this content."
  json: JSON
}

"""
Represents a collection of pages or promos.
"""
type ContentfulCardCollectionSection implements Node {
  id: ID!

  "The title for this section."
  title: String

  "The description for this section."
  description: RichText

  "The type of card for this section."
  cardType: String!

  "The text that should be used as card link label."
  cardLabel: String

  "The section should be grouped in categories."
  groupCards: Boolean

  "The link for this section."
  link: ContentfulLink # @link(from: "link__NODE")
}

"""
Represents a union for all the possible sections available in a page.
"""
union ContentfulSection =
    ContentfulCardCollectionSection
  | ContentfulCarouselSection
  | ContentfulFormSection
  | ContentfulLeadBlockSection
  | ContentfulTabsOrAccordionSection
  | ContentfulVillainSection
  | ContentfulTitleWithContent

"""
Represents a key value pair for UI strings.
"""
type ContentfulMicroCopy implements Node {
  "The key for this pair."
  key: String!

  "The value for this pair."
  value: String!
}

"""
Represents a list of resources for global settings.
"""
type ContentfulResources implements Node {
  "The micro copy pairs for these resources."
  microCopy: [ContentfulMicroCopy]

  "The elements for the product details page sidebar for these resources."
  pdpSidebarItems: [ContentfulTitleWithContent]

  "The title for the product details page cards for these resources."
  pdpCardsTitle: String

  "The cards for the product content details for these resources."
  pdpCards: [ContentfulPromoOrPage]
}

"""
Represents a site settings and its pages.
"""
type ContentfulSite implements Node {
  "The global settings for this site."
  resources: ContentfulResources
}
