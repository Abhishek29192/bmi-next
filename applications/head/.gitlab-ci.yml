image: node:12

test_head:
  stage: test
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == 'master')"
      changes:
        - applications/head/**/*
        - components/**/*
        - libraries/**/*
        - jest/**/*
        - package.json
  needs: [install]
  before_script:
    - yarn config set cache-folder ${PWD}/.yarn_cache
  script:
    - yarn workspace @bmi/head coverage:jest
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    when: always
    reports:
      junit:
        - applications/head/junit.xml

build_head:
  stage: build
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == 'master')"
      changes:
        - applications/head/**/*
        - components/**/*
        - libraries/**/*
        - package.json
  needs: [install]
  variables:
    GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES: "true"
  before_script:
    - yarn config set cache-folder ${PWD}/.yarn_cache
  script:
    - yarn workspace @bmi/head check:ts
    - yarn workspace @bmi/head build
  artifacts:
    paths:
      - applications/head/public
  cache:
    - key:
        files:
          - yarn.lock
      policy: pull
      untracked: false
      paths:
        - "**/node_modules"
        - ".yarn_cache"
    - key: build_head
      policy: pull-push
      untracked: false
      paths:
        - "applications/head/.cache"
        - "applications/head/public"

deploy_head_preview:
  stage: deploy
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'"
      changes:
        - applications/head/**/*
        - components/**/*
        - libraries/**/*
  needs:
    - build_head
  before_script:
    - yarn config set cache-folder ~/.yarn
    - apt-get update
    - apt-get install -y jq
  script:
    - |
      DEPLOY_RESULT=$(npx netlify deploy --dir applications/head/public --site "${NETLIFY_HEAD_SITE_ID}" --auth "${NETLIFY_AUTH_TOKEN}" --json) || exit 0
      echo ${DEPLOY_RESULT}
      curl --request POST --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" -H "Content-Type: application/json" \
        -d "{\"body\":\"Deployed to: $(echo ${DEPLOY_RESULT} | jq -r '.deploy_url')\"}" \
        "https://gitlab.com/api/v4/projects/19163612/merge_requests/${CI_MERGE_REQUEST_IID}/notes"

# https://www.zaproxy.org/docs/docker/baseline-scan/
# Triggered by Netlify when deploy is complete
baseline_scan_head:
  image: owasp/zap2docker-stable:latest
  stage: dynamic_security
  rules:
    - if: "$SITE_URL_FROM_NETLIFY != null && $SITE_FROM_NETLIFY == 'head' && $CONTEXT_FROM_NETLIFY"
  cache: {}
  script:
    - zap-baseline.py -t ${SITE_URL_FROM_NETLIFY} -r zap_output.html -n applications/head/CONTEXT_FROM_NETLIFY.context -U $CONTEXT_FROM_NETLIFY || exit 0
  artifacts:
    paths:
      - zap_output.html

# https://www.zaproxy.org/docs/docker/full-scan/
# Should be set as a scheduled job for cron 0 0 * * 0 (midnight every sunday)
# SAST_DISABLED should be set to true
# When happy with how this works, change to use zap-full-scan.py
full_scan_head_qa:
  stage: dynamic_security
  rules:
    - if: "$WHICH_SCHEDULE == 'full_scan_head_qa'"
  image: owasp/zap2docker-stable:latest
  cache: {}
  script:
    - zap-full-scan.py -t https://bmi-dxb-head-qa.netlify.app/ -r zap_output.html -n applications/head/qa.context -U qa
  artifacts:
    paths:
      - zap_output.html

# https://www.zaproxy.org/docs/docker/baseline-scan/
# Should be set as a scheduled job for cron 0 0 * * 0 (midnight every sunday)
# SAST_DISABLED should be set to true
# When happy with how this works, change to use zap-full-scan.py
baseline_scan_head_prod:
  stage: dynamic_security
  rules:
    - if: '$WHICH_SCHEDULE == "baseline_scan_head_prod"'
  image: owasp/zap2docker-stable:latest
  script:
    - zap-baseline.py -t https://bmi-dxb-head-production.netlify.app -r zap_output.html -n applications/head/production.context
  artifacts:
    paths:
      - zap_output.html

# https://github.com/GoogleChrome/lighthouse-ci
# Lighthouse scan on netlify build
lighthouseci_build_scan_head:
  stage: lighthouse_scan
  rules:
    - if: "$SITE_URL_FROM_NETLIFY != null && $SITE_FROM_NETLIFY == 'head' && ($CI_COMMIT_REF_NAME != 'master' && $CI_COMMIT_REF_NAME != 'pre-production' && $CI_COMMIT_REF_NAME != 'production')"
  image: cypress/browsers:node14.15.0-chrome86-ff82
  script:
    - cd applications/head
    - yarn lhci autorun --collect.url='$SITE_URL_FROM_NETLIFY' || echo "LHCI failed!"
  artifacts:
    paths:
      - applications/head/.lighthouseci

# https://github.com/GoogleChrome/lighthouse-ci
# Should be set as a scheduled job for cron 0 2 * * 0 (2am every sunday) for QA
# Additional scheduled jobs for Pre-Prod and Prod at 3am and 4am
# SAST_DISABLED should be set to true
lighthouseci_scan_head:
  stage: lighthouse_scan
  variables:
    NETLIFY_PWD: "$LIGHTHOUSE_PWD"
  rules:
    - if: "$WHICH_SCHEDULE == 'lighthouseci_scan_head'"
  image: cypress/browsers:node14.15.0-chrome86-ff82
  script:
    - cd applications/head
    - sed -i 's/"http:\/\/localhost:8000\/no"/'$LIGHTHOUSE_URLS'/g' lighthouserc.js
    - yarn lhci autorun --collect.settings.pwd=$NETLIFY_PWD
  artifacts:
    paths:
      - applications/head/.lighthouseci
