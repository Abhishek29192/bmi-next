directive @external on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

"""The root query type which gives access points into the data universe."""
type Query {
  """Reads and enables pagination through a set of `Course`."""
  courses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseCondition
  ): CoursesConnection

  """Reads and enables pagination through a set of `CourseCatalog`."""
  courseCatalogs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CourseCatalog`."""
    orderBy: [CourseCatalogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseCatalogCondition
  ): CourseCatalogsConnection

  """Reads and enables pagination through a set of `CourseCatalogue`."""
  courseCatalogues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CourseCatalogue`."""
    orderBy: [CourseCataloguesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseCatalogueCondition
  ): CourseCataloguesConnection

  """Reads and enables pagination through a set of `CourseEnrollment`."""
  courseEnrollments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CourseEnrollment`."""
    orderBy: [CourseEnrollmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseEnrollmentCondition
  ): CourseEnrollmentsConnection

  """Reads and enables pagination through a set of `CourseTemp`."""
  courseTemps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CourseTemp`."""
    orderBy: [CourseTempsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseTempCondition
  ): CourseTempsConnection
  course(id: Int!): Course
  courseByCourseId(courseId: Int!): Course
  courseCatalog(id: Int!): CourseCatalog
  courseCatalogue(id: Int!): CourseCatalogue
  courseEnrollment(id: Int!): CourseEnrollment
  courseTemp(id: Int!): CourseTemp

  """Reads a single `Course` using its globally unique `ID`."""
  courseByNodeId(
    """The globally unique `ID` to be used in selecting a single `Course`."""
    nodeId: ID!
  ): Course

  """Reads a single `CourseCatalog` using its globally unique `ID`."""
  courseCatalogByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CourseCatalog`.
    """
    nodeId: ID!
  ): CourseCatalog

  """Reads a single `CourseCatalogue` using its globally unique `ID`."""
  courseCatalogueByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CourseCatalogue`.
    """
    nodeId: ID!
  ): CourseCatalogue

  """Reads a single `CourseEnrollment` using its globally unique `ID`."""
  courseEnrollmentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CourseEnrollment`.
    """
    nodeId: ID!
  ): CourseEnrollment

  """Reads a single `CourseTemp` using its globally unique `ID`."""
  courseTempByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CourseTemp`.
    """
    nodeId: ID!
  ): CourseTemp

  """
  Fetches a list of entities using their representations; used for Apollo
  Federation.
  """
  _entities(representations: [_Any!]!): [_Entity]! @deprecated(reason: "Only Apollo Federation should use this")

  """
  Entrypoint for Apollo Federation to determine more information about
  this service.
  """
  _service: _Service! @deprecated(reason: "Only Apollo Federation should use this")
  token: Token
  tokenByUsername(username: String!): Token
}

"""A connection to a list of `Course` values."""
type CoursesConnection {
  """A list of `Course` objects."""
  nodes: [Course!]!

  """
  A list of edges which contains the `Course` and cursor to aid in pagination.
  """
  edges: [CoursesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Course` you could get from the connection."""
  totalCount: Int!
}

"""A training course that BMI offers in Docebo"""
type Course {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Primary key"""
  id: Int!

  """Docebo CourseId"""
  courseId: Int

  """technology"""
  technology: String

  """A short name for the Course taken from Docebo"""
  name: String

  """A reference to the image"""
  image: String

  """Promoted courses a listed higher than others"""
  promoted: Boolean

  """
  Some text from Docebo indicating whether it is a webinar, classroom etc
  """
  trainingType: String

  """Text description from Docebo"""
  description: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `CourseCatalogue`."""
  courseCatalogues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CourseCatalogue`."""
    orderBy: [CourseCataloguesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseCatalogueCondition
  ): CourseCataloguesConnection!

  """Reads and enables pagination through a set of `CourseEnrollment`."""
  courseEnrollments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CourseEnrollment`."""
    orderBy: [CourseEnrollmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseEnrollmentCondition
  ): CourseEnrollmentsConnection!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A connection to a list of `CourseCatalogue` values."""
type CourseCataloguesConnection {
  """A list of `CourseCatalogue` objects."""
  nodes: [CourseCatalogue!]!

  """
  A list of edges which contains the `CourseCatalogue` and cursor to aid in pagination.
  """
  edges: [CourseCataloguesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CourseCatalogue` you could get from the connection.
  """
  totalCount: Int!
}

"""Course Catalog"""
type CourseCatalogue {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Primary key"""
  id: Int!

  """fk"""
  catalogueId: Int

  """fk"""
  courseId: Int
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Course` that is related to this `CourseCatalogue`."""
  course: Course
}

"""A `CourseCatalogue` edge in the connection."""
type CourseCataloguesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CourseCatalogue` at the end of the edge."""
  node: CourseCatalogue!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `CourseCatalogue`."""
enum CourseCataloguesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COURSE_ID_ASC
  COURSE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CourseCatalogue` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CourseCatalogueCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `courseId` field."""
  courseId: Int
}

"""A connection to a list of `CourseEnrollment` values."""
type CourseEnrollmentsConnection {
  """A list of `CourseEnrollment` objects."""
  nodes: [CourseEnrollment!]!

  """
  A list of edges which contains the `CourseEnrollment` and cursor to aid in pagination.
  """
  edges: [CourseEnrollmentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CourseEnrollment` you could get from the connection.
  """
  totalCount: Int!
}

"""Course Enrollments"""
type CourseEnrollment {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Primary key"""
  id: Int!

  """fk"""
  userId: Int

  """fk"""
  courseId: Int

  """status"""
  status: String

  """url"""
  url: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Course` that is related to this `CourseEnrollment`."""
  course: Course
}

"""A `CourseEnrollment` edge in the connection."""
type CourseEnrollmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CourseEnrollment` at the end of the edge."""
  node: CourseEnrollment!
}

"""Methods to use when ordering `CourseEnrollment`."""
enum CourseEnrollmentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COURSE_ID_ASC
  COURSE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CourseEnrollment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CourseEnrollmentCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `courseId` field."""
  courseId: Int
}

"""A `Course` edge in the connection."""
type CoursesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Course` at the end of the edge."""
  node: Course!
}

"""Methods to use when ordering `Course`."""
enum CoursesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COURSE_ID_ASC
  COURSE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Course` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CourseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `courseId` field."""
  courseId: Int
}

"""A connection to a list of `CourseCatalog` values."""
type CourseCatalogsConnection {
  """A list of `CourseCatalog` objects."""
  nodes: [CourseCatalog!]!

  """
  A list of edges which contains the `CourseCatalog` and cursor to aid in pagination.
  """
  edges: [CourseCatalogsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CourseCatalog` you could get from the connection."""
  totalCount: Int!
}

"""Course Catalog"""
type CourseCatalog {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Primary key"""
  id: Int!

  """fk"""
  catalogId: Int

  """fk"""
  courseId: Int
  createdAt: Datetime!
  updatedAt: Datetime!
}

"""A `CourseCatalog` edge in the connection."""
type CourseCatalogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CourseCatalog` at the end of the edge."""
  node: CourseCatalog!
}

"""Methods to use when ordering `CourseCatalog`."""
enum CourseCatalogsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COURSE_ID_ASC
  COURSE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CourseCatalog` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CourseCatalogCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `courseId` field."""
  courseId: Int
}

"""A connection to a list of `CourseTemp` values."""
type CourseTempsConnection {
  """A list of `CourseTemp` objects."""
  nodes: [CourseTemp!]!

  """
  A list of edges which contains the `CourseTemp` and cursor to aid in pagination.
  """
  edges: [CourseTempsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CourseTemp` you could get from the connection."""
  totalCount: Int!
}

"""A temporary training course that BMI offers in Docebo"""
type CourseTemp {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Primary key"""
  id: Int!

  """Docebo CourseId"""
  courseId: Int

  """technology"""
  technology: String

  """A short name for the Course taken from Docebo"""
  name: String

  """A reference to the image"""
  image: String

  """Promoted courses a listed higher than others"""
  promoted: Boolean

  """
  Some text from Docebo indicating whether it is a webinar, classroom etc
  """
  trainingType: String

  """Text description from Docebo"""
  description: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

"""A `CourseTemp` edge in the connection."""
type CourseTempsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CourseTemp` at the end of the edge."""
  node: CourseTemp!
}

"""Methods to use when ordering `CourseTemp`."""
enum CourseTempsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CourseTemp` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CourseTempCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""A union of all federated types (those that use the @key directive)."""
union _Entity = Course | CourseCatalogue | CourseEnrollment | CourseCatalog | CourseTemp

scalar _Any

"""Describes our federated service."""
type _Service {
  """
  The GraphQL Schema Language definiton of our endpoint including the
  Apollo Federation directives (but not their definitions or the special
  Apollo Federation fields).
  """
  sdl: String @deprecated(reason: "Only Apollo Federation should use this")
}

type Token {
  access_token: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Course`."""
  createCourse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCourseInput!
  ): CreateCoursePayload

  """Creates a single `CourseCatalog`."""
  createCourseCatalog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCourseCatalogInput!
  ): CreateCourseCatalogPayload

  """Creates a single `CourseCatalogue`."""
  createCourseCatalogue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCourseCatalogueInput!
  ): CreateCourseCataloguePayload

  """Creates a single `CourseEnrollment`."""
  createCourseEnrollment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCourseEnrollmentInput!
  ): CreateCourseEnrollmentPayload

  """Creates a single `CourseTemp`."""
  createCourseTemp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCourseTempInput!
  ): CreateCourseTempPayload

  """Updates a single `Course` using its globally unique id and a patch."""
  updateCourseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseByNodeIdInput!
  ): UpdateCoursePayload

  """Updates a single `Course` using a unique key and a patch."""
  updateCourse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseInput!
  ): UpdateCoursePayload

  """Updates a single `Course` using a unique key and a patch."""
  updateCourseByCourseId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseByCourseIdInput!
  ): UpdateCoursePayload

  """
  Updates a single `CourseCatalog` using its globally unique id and a patch.
  """
  updateCourseCatalogByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseCatalogByNodeIdInput!
  ): UpdateCourseCatalogPayload

  """Updates a single `CourseCatalog` using a unique key and a patch."""
  updateCourseCatalog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseCatalogInput!
  ): UpdateCourseCatalogPayload

  """
  Updates a single `CourseCatalogue` using its globally unique id and a patch.
  """
  updateCourseCatalogueByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseCatalogueByNodeIdInput!
  ): UpdateCourseCataloguePayload

  """Updates a single `CourseCatalogue` using a unique key and a patch."""
  updateCourseCatalogue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseCatalogueInput!
  ): UpdateCourseCataloguePayload

  """
  Updates a single `CourseEnrollment` using its globally unique id and a patch.
  """
  updateCourseEnrollmentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseEnrollmentByNodeIdInput!
  ): UpdateCourseEnrollmentPayload

  """Updates a single `CourseEnrollment` using a unique key and a patch."""
  updateCourseEnrollment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseEnrollmentInput!
  ): UpdateCourseEnrollmentPayload

  """
  Updates a single `CourseTemp` using its globally unique id and a patch.
  """
  updateCourseTempByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseTempByNodeIdInput!
  ): UpdateCourseTempPayload

  """Updates a single `CourseTemp` using a unique key and a patch."""
  updateCourseTemp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseTempInput!
  ): UpdateCourseTempPayload

  """Deletes a single `Course` using its globally unique id."""
  deleteCourseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseByNodeIdInput!
  ): DeleteCoursePayload

  """Deletes a single `Course` using a unique key."""
  deleteCourse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseInput!
  ): DeleteCoursePayload

  """Deletes a single `Course` using a unique key."""
  deleteCourseByCourseId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseByCourseIdInput!
  ): DeleteCoursePayload

  """Deletes a single `CourseCatalog` using its globally unique id."""
  deleteCourseCatalogByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseCatalogByNodeIdInput!
  ): DeleteCourseCatalogPayload

  """Deletes a single `CourseCatalog` using a unique key."""
  deleteCourseCatalog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseCatalogInput!
  ): DeleteCourseCatalogPayload

  """Deletes a single `CourseCatalogue` using its globally unique id."""
  deleteCourseCatalogueByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseCatalogueByNodeIdInput!
  ): DeleteCourseCataloguePayload

  """Deletes a single `CourseCatalogue` using a unique key."""
  deleteCourseCatalogue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseCatalogueInput!
  ): DeleteCourseCataloguePayload

  """Deletes a single `CourseEnrollment` using its globally unique id."""
  deleteCourseEnrollmentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseEnrollmentByNodeIdInput!
  ): DeleteCourseEnrollmentPayload

  """Deletes a single `CourseEnrollment` using a unique key."""
  deleteCourseEnrollment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseEnrollmentInput!
  ): DeleteCourseEnrollmentPayload

  """Deletes a single `CourseTemp` using its globally unique id."""
  deleteCourseTempByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseTempByNodeIdInput!
  ): DeleteCourseTempPayload

  """Deletes a single `CourseTemp` using a unique key."""
  deleteCourseTemp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseTempInput!
  ): DeleteCourseTempPayload
  courseUpdateByTemp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CourseUpdateByTempInput!
  ): CourseUpdateByTempPayload
  createSSOUrl(username: String!, path: String): SSOUrlOutput
}

"""The output of our create `Course` mutation."""
type CreateCoursePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Course` that was created by this mutation."""
  course: Course

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Course`. May be used by Relay 1."""
  courseEdge(
    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CoursesEdge
}

"""All input for the create `Course` mutation."""
input CreateCourseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Course` to be created by this mutation."""
  course: CourseInput!
}

"""An input for mutations affecting `Course`"""
input CourseInput {
  """Primary key"""
  id: Int

  """Docebo CourseId"""
  courseId: Int

  """technology"""
  technology: String

  """A short name for the Course taken from Docebo"""
  name: String

  """A reference to the image"""
  image: String

  """Promoted courses a listed higher than others"""
  promoted: Boolean

  """
  Some text from Docebo indicating whether it is a webinar, classroom etc
  """
  trainingType: String

  """Text description from Docebo"""
  description: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `CourseCatalog` mutation."""
type CreateCourseCatalogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseCatalog` that was created by this mutation."""
  courseCatalog: CourseCatalog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CourseCatalog`. May be used by Relay 1."""
  courseCatalogEdge(
    """The method to use when ordering `CourseCatalog`."""
    orderBy: [CourseCatalogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseCatalogsEdge
}

"""All input for the create `CourseCatalog` mutation."""
input CreateCourseCatalogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CourseCatalog` to be created by this mutation."""
  courseCatalog: CourseCatalogInput!
}

"""An input for mutations affecting `CourseCatalog`"""
input CourseCatalogInput {
  """Primary key"""
  id: Int

  """fk"""
  catalogId: Int

  """fk"""
  courseId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `CourseCatalogue` mutation."""
type CreateCourseCataloguePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseCatalogue` that was created by this mutation."""
  courseCatalogue: CourseCatalogue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Course` that is related to this `CourseCatalogue`."""
  course: Course

  """An edge for our `CourseCatalogue`. May be used by Relay 1."""
  courseCatalogueEdge(
    """The method to use when ordering `CourseCatalogue`."""
    orderBy: [CourseCataloguesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseCataloguesEdge
}

"""All input for the create `CourseCatalogue` mutation."""
input CreateCourseCatalogueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CourseCatalogue` to be created by this mutation."""
  courseCatalogue: CourseCatalogueInput!
}

"""An input for mutations affecting `CourseCatalogue`"""
input CourseCatalogueInput {
  """Primary key"""
  id: Int

  """fk"""
  catalogueId: Int

  """fk"""
  courseId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `CourseEnrollment` mutation."""
type CreateCourseEnrollmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseEnrollment` that was created by this mutation."""
  courseEnrollment: CourseEnrollment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Course` that is related to this `CourseEnrollment`."""
  course: Course

  """An edge for our `CourseEnrollment`. May be used by Relay 1."""
  courseEnrollmentEdge(
    """The method to use when ordering `CourseEnrollment`."""
    orderBy: [CourseEnrollmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseEnrollmentsEdge
}

"""All input for the create `CourseEnrollment` mutation."""
input CreateCourseEnrollmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CourseEnrollment` to be created by this mutation."""
  courseEnrollment: CourseEnrollmentInput!
}

"""An input for mutations affecting `CourseEnrollment`"""
input CourseEnrollmentInput {
  """Primary key"""
  id: Int

  """fk"""
  userId: Int

  """fk"""
  courseId: Int

  """status"""
  status: String

  """url"""
  url: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `CourseTemp` mutation."""
type CreateCourseTempPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseTemp` that was created by this mutation."""
  courseTemp: CourseTemp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CourseTemp`. May be used by Relay 1."""
  courseTempEdge(
    """The method to use when ordering `CourseTemp`."""
    orderBy: [CourseTempsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseTempsEdge
}

"""All input for the create `CourseTemp` mutation."""
input CreateCourseTempInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CourseTemp` to be created by this mutation."""
  courseTemp: CourseTempInput!
}

"""An input for mutations affecting `CourseTemp`"""
input CourseTempInput {
  """Primary key"""
  id: Int

  """Docebo CourseId"""
  courseId: Int

  """technology"""
  technology: String

  """A short name for the Course taken from Docebo"""
  name: String

  """A reference to the image"""
  image: String

  """Promoted courses a listed higher than others"""
  promoted: Boolean

  """
  Some text from Docebo indicating whether it is a webinar, classroom etc
  """
  trainingType: String

  """Text description from Docebo"""
  description: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our update `Course` mutation."""
type UpdateCoursePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Course` that was updated by this mutation."""
  course: Course

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Course`. May be used by Relay 1."""
  courseEdge(
    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CoursesEdge
}

"""All input for the `updateCourseByNodeId` mutation."""
input UpdateCourseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Course` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Course` being updated.
  """
  patch: CoursePatch!
}

"""
Represents an update to a `Course`. Fields that are set will be updated.
"""
input CoursePatch {
  """Primary key"""
  id: Int

  """Docebo CourseId"""
  courseId: Int

  """technology"""
  technology: String

  """A short name for the Course taken from Docebo"""
  name: String

  """A reference to the image"""
  image: String

  """Promoted courses a listed higher than others"""
  promoted: Boolean

  """
  Some text from Docebo indicating whether it is a webinar, classroom etc
  """
  trainingType: String

  """Text description from Docebo"""
  description: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateCourse` mutation."""
input UpdateCourseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Course` being updated.
  """
  patch: CoursePatch!

  """Primary key"""
  id: Int!
}

"""All input for the `updateCourseByCourseId` mutation."""
input UpdateCourseByCourseIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Course` being updated.
  """
  patch: CoursePatch!

  """Docebo CourseId"""
  courseId: Int!
}

"""The output of our update `CourseCatalog` mutation."""
type UpdateCourseCatalogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseCatalog` that was updated by this mutation."""
  courseCatalog: CourseCatalog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CourseCatalog`. May be used by Relay 1."""
  courseCatalogEdge(
    """The method to use when ordering `CourseCatalog`."""
    orderBy: [CourseCatalogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseCatalogsEdge
}

"""All input for the `updateCourseCatalogByNodeId` mutation."""
input UpdateCourseCatalogByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CourseCatalog` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CourseCatalog` being updated.
  """
  patch: CourseCatalogPatch!
}

"""
Represents an update to a `CourseCatalog`. Fields that are set will be updated.
"""
input CourseCatalogPatch {
  """Primary key"""
  id: Int

  """fk"""
  catalogId: Int

  """fk"""
  courseId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateCourseCatalog` mutation."""
input UpdateCourseCatalogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CourseCatalog` being updated.
  """
  patch: CourseCatalogPatch!

  """Primary key"""
  id: Int!
}

"""The output of our update `CourseCatalogue` mutation."""
type UpdateCourseCataloguePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseCatalogue` that was updated by this mutation."""
  courseCatalogue: CourseCatalogue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Course` that is related to this `CourseCatalogue`."""
  course: Course

  """An edge for our `CourseCatalogue`. May be used by Relay 1."""
  courseCatalogueEdge(
    """The method to use when ordering `CourseCatalogue`."""
    orderBy: [CourseCataloguesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseCataloguesEdge
}

"""All input for the `updateCourseCatalogueByNodeId` mutation."""
input UpdateCourseCatalogueByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CourseCatalogue` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CourseCatalogue` being updated.
  """
  patch: CourseCataloguePatch!
}

"""
Represents an update to a `CourseCatalogue`. Fields that are set will be updated.
"""
input CourseCataloguePatch {
  """Primary key"""
  id: Int

  """fk"""
  catalogueId: Int

  """fk"""
  courseId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateCourseCatalogue` mutation."""
input UpdateCourseCatalogueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CourseCatalogue` being updated.
  """
  patch: CourseCataloguePatch!

  """Primary key"""
  id: Int!
}

"""The output of our update `CourseEnrollment` mutation."""
type UpdateCourseEnrollmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseEnrollment` that was updated by this mutation."""
  courseEnrollment: CourseEnrollment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Course` that is related to this `CourseEnrollment`."""
  course: Course

  """An edge for our `CourseEnrollment`. May be used by Relay 1."""
  courseEnrollmentEdge(
    """The method to use when ordering `CourseEnrollment`."""
    orderBy: [CourseEnrollmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseEnrollmentsEdge
}

"""All input for the `updateCourseEnrollmentByNodeId` mutation."""
input UpdateCourseEnrollmentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CourseEnrollment` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CourseEnrollment` being updated.
  """
  patch: CourseEnrollmentPatch!
}

"""
Represents an update to a `CourseEnrollment`. Fields that are set will be updated.
"""
input CourseEnrollmentPatch {
  """Primary key"""
  id: Int

  """fk"""
  userId: Int

  """fk"""
  courseId: Int

  """status"""
  status: String

  """url"""
  url: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateCourseEnrollment` mutation."""
input UpdateCourseEnrollmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CourseEnrollment` being updated.
  """
  patch: CourseEnrollmentPatch!

  """Primary key"""
  id: Int!
}

"""The output of our update `CourseTemp` mutation."""
type UpdateCourseTempPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseTemp` that was updated by this mutation."""
  courseTemp: CourseTemp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CourseTemp`. May be used by Relay 1."""
  courseTempEdge(
    """The method to use when ordering `CourseTemp`."""
    orderBy: [CourseTempsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseTempsEdge
}

"""All input for the `updateCourseTempByNodeId` mutation."""
input UpdateCourseTempByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CourseTemp` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CourseTemp` being updated.
  """
  patch: CourseTempPatch!
}

"""
Represents an update to a `CourseTemp`. Fields that are set will be updated.
"""
input CourseTempPatch {
  """Primary key"""
  id: Int

  """Docebo CourseId"""
  courseId: Int

  """technology"""
  technology: String

  """A short name for the Course taken from Docebo"""
  name: String

  """A reference to the image"""
  image: String

  """Promoted courses a listed higher than others"""
  promoted: Boolean

  """
  Some text from Docebo indicating whether it is a webinar, classroom etc
  """
  trainingType: String

  """Text description from Docebo"""
  description: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateCourseTemp` mutation."""
input UpdateCourseTempInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CourseTemp` being updated.
  """
  patch: CourseTempPatch!

  """Primary key"""
  id: Int!
}

"""The output of our delete `Course` mutation."""
type DeleteCoursePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Course` that was deleted by this mutation."""
  course: Course
  deletedCourseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Course`. May be used by Relay 1."""
  courseEdge(
    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CoursesEdge
}

"""All input for the `deleteCourseByNodeId` mutation."""
input DeleteCourseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Course` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCourse` mutation."""
input DeleteCourseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key"""
  id: Int!
}

"""All input for the `deleteCourseByCourseId` mutation."""
input DeleteCourseByCourseIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Docebo CourseId"""
  courseId: Int!
}

"""The output of our delete `CourseCatalog` mutation."""
type DeleteCourseCatalogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseCatalog` that was deleted by this mutation."""
  courseCatalog: CourseCatalog
  deletedCourseCatalogNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CourseCatalog`. May be used by Relay 1."""
  courseCatalogEdge(
    """The method to use when ordering `CourseCatalog`."""
    orderBy: [CourseCatalogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseCatalogsEdge
}

"""All input for the `deleteCourseCatalogByNodeId` mutation."""
input DeleteCourseCatalogByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CourseCatalog` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCourseCatalog` mutation."""
input DeleteCourseCatalogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key"""
  id: Int!
}

"""The output of our delete `CourseCatalogue` mutation."""
type DeleteCourseCataloguePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseCatalogue` that was deleted by this mutation."""
  courseCatalogue: CourseCatalogue
  deletedCourseCatalogueNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Course` that is related to this `CourseCatalogue`."""
  course: Course

  """An edge for our `CourseCatalogue`. May be used by Relay 1."""
  courseCatalogueEdge(
    """The method to use when ordering `CourseCatalogue`."""
    orderBy: [CourseCataloguesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseCataloguesEdge
}

"""All input for the `deleteCourseCatalogueByNodeId` mutation."""
input DeleteCourseCatalogueByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CourseCatalogue` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCourseCatalogue` mutation."""
input DeleteCourseCatalogueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key"""
  id: Int!
}

"""The output of our delete `CourseEnrollment` mutation."""
type DeleteCourseEnrollmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseEnrollment` that was deleted by this mutation."""
  courseEnrollment: CourseEnrollment
  deletedCourseEnrollmentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Course` that is related to this `CourseEnrollment`."""
  course: Course

  """An edge for our `CourseEnrollment`. May be used by Relay 1."""
  courseEnrollmentEdge(
    """The method to use when ordering `CourseEnrollment`."""
    orderBy: [CourseEnrollmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseEnrollmentsEdge
}

"""All input for the `deleteCourseEnrollmentByNodeId` mutation."""
input DeleteCourseEnrollmentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CourseEnrollment` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCourseEnrollment` mutation."""
input DeleteCourseEnrollmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key"""
  id: Int!
}

"""The output of our delete `CourseTemp` mutation."""
type DeleteCourseTempPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseTemp` that was deleted by this mutation."""
  courseTemp: CourseTemp
  deletedCourseTempNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CourseTemp`. May be used by Relay 1."""
  courseTempEdge(
    """The method to use when ordering `CourseTemp`."""
    orderBy: [CourseTempsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CourseTempsEdge
}

"""All input for the `deleteCourseTempByNodeId` mutation."""
input DeleteCourseTempByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CourseTemp` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCourseTemp` mutation."""
input DeleteCourseTempInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key"""
  id: Int!
}

"""The output of our `courseUpdateByTemp` mutation."""
type CourseUpdateByTempPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `courseUpdateByTemp` mutation."""
input CourseUpdateByTempInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

type SSOUrlOutput {
  url: String
}

"""
Used to represent a set of fields. Grammatically, a field set is a
selection set minus the braces.
"""
scalar _FieldSet
