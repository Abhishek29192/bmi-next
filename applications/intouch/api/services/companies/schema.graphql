directive @external on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

scalar _Any

"""
A union of all federated types (those that use the @key directive).
"""
union _Entity =
    Account
  | Market
  | Company
  | Address
  | Project
  | Guarantee
  | System
  | SystemMember
  | Product
  | GuaranteedProduct
  | EvidenceItem
  | Note
  | ProjectMember
  | CompanyDocument
  | CompanyMember
  | Invitation
  | Notification

"""
Used to represent a set of fields. Grammatically, a field set is a
selection set minus the braces.
"""
scalar _FieldSet

"""
Describes our federated service.
"""
type _Service {
  """
  The GraphQL Schema Language definiton of our endpoint including the
  Apollo Federation directives (but not their definitions or the special
  Apollo Federation fields).
  """
  sdl: String @deprecated(reason: "Only Apollo Federation should use this")
}

"""
An InTouch account
"""
type Account implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  ek
  """
  status: AccountStatus

  """
  fk
  """
  marketId: Int

  """
  ek
  """
  role: Role

  """
  The mail address associated with the account
  """
  email: String

  """
  A phone number that can optionally be provided, and is useful for Company Admin people to provide
  """
  phone: String

  """
  First name
  """
  firstName: String

  """
  Last name
  """
  lastName: String

  """
  When the account was created
  """
  created: Datetime

  """
  User account in Docebo
  """
  doceboId: String

  """
  File reference or the file itself. A profile picture of the user
  """
  photo: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Market` that is related to this `Account`.
  """
  market: Market

  """
  Reads and enables pagination through a set of `CompanyMember`.
  """
  companyMembers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CompanyMember`.
    """
    orderBy: [CompanyMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyMemberCondition
  ): CompanyMembersConnection!

  """
  Reads and enables pagination through a set of `Guarantee`.
  """
  guaranteesByRequestorAccountId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Guarantee`.
    """
    orderBy: [GuaranteesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuaranteeCondition
  ): GuaranteesConnection!

  """
  Reads and enables pagination through a set of `Guarantee`.
  """
  guaranteesByResponsibleInstallerAccountId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Guarantee`.
    """
    orderBy: [GuaranteesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuaranteeCondition
  ): GuaranteesConnection!

  """
  Reads and enables pagination through a set of `Guarantee`.
  """
  guaranteesByReviewerAccountId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Guarantee`.
    """
    orderBy: [GuaranteesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuaranteeCondition
  ): GuaranteesConnection!

  """
  Reads and enables pagination through a set of `Invitation`.
  """
  invitationsBySenderAccountId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Invitation`.
    """
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvitationCondition
  ): InvitationsConnection!

  """
  Reads and enables pagination through a set of `Note`.
  """
  authoredNotes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Note`.
    """
    orderBy: [NotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NoteCondition
  ): NotesConnection!

  """
  Reads and enables pagination through a set of `Notification`.
  """
  notifications(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Notification`.
    """
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition
  ): NotificationsConnection!

  """
  Reads and enables pagination through a set of `ProjectMember`.
  """
  projectMembers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectMember`.
    """
    orderBy: [ProjectMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectMemberCondition
  ): ProjectMembersConnection!
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `marketId` field.
  """
  marketId: Int

  """
  Checks for equality with the object’s `email` field.
  """
  email: String
}

"""
Represents an update to a `Account`. Fields that are set will be updated.
"""
input AccountPatch {
  """
  Primary key
  """
  id: Int

  """
  ek
  """
  status: AccountStatus

  """
  fk
  """
  marketId: Int

  """
  ek
  """
  role: Role

  """
  The mail address associated with the account
  """
  email: String

  """
  A phone number that can optionally be provided, and is useful for Company Admin people to provide
  """
  phone: String

  """
  First name
  """
  firstName: String

  """
  Last name
  """
  lastName: String

  """
  When the account was created
  """
  created: Datetime

  """
  User account in Docebo
  """
  doceboId: String

  """
  File reference or the file itself. A profile picture of the user
  """
  photo: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `Account` values.
"""
type AccountsConnection {
  """
  A list of `Account` objects.
  """
  nodes: [Account!]!

  """
  A list of edges which contains the `Account` and cursor to aid in pagination.
  """
  edges: [AccountsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Account` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Account` edge in the connection.
"""
type AccountsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Account` at the end of the edge.
  """
  node: Account!
}

"""
Methods to use when ordering `Account`.
"""
enum AccountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MARKET_ID_ASC
  MARKET_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum AccountStatus {
  NEW
  ACTIVE
  SUSPENDED
}

"""
A generic address
"""
type Address implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  projectId: Int

  """
  fk
  """
  companyId: Int

  """
  ek
  """
  addressType: AddressType

  """
  First line of this address
  """
  firstLine: String

  """
  Second line of this address
  """
  secondLine: String

  """
  The postal town
  """
  town: String

  """
  The country for this address
  """
  country: String

  """
  The postcode for this address
  """
  postcode: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Project` that is related to this `Address`.
  """
  project: Project

  """
  Reads a single `Company` that is related to this `Address`.
  """
  company: Company
}

"""
A condition to be used against `Address` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AddressCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int

  """
  Checks for equality with the object’s `companyId` field.
  """
  companyId: Int
}

"""
A connection to a list of `Address` values.
"""
type AddressesConnection {
  """
  A list of `Address` objects.
  """
  nodes: [Address!]!

  """
  A list of edges which contains the `Address` and cursor to aid in pagination.
  """
  edges: [AddressesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Address` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Address` edge in the connection.
"""
type AddressesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Address` at the end of the edge.
  """
  node: Address!
}

"""
Methods to use when ordering `Address`.
"""
enum AddressesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  COMPANY_ID_ASC
  COMPANY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
An input for mutations affecting `Address`
"""
input AddressInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  projectId: Int

  """
  fk
  """
  companyId: Int

  """
  ek
  """
  addressType: AddressType

  """
  First line of this address
  """
  firstLine: String

  """
  Second line of this address
  """
  secondLine: String

  """
  The postal town
  """
  town: String

  """
  The country for this address
  """
  country: String

  """
  The postcode for this address
  """
  postcode: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Address`. Fields that are set will be updated.
"""
input AddressPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  projectId: Int

  """
  fk
  """
  companyId: Int

  """
  ek
  """
  addressType: AddressType

  """
  First line of this address
  """
  firstLine: String

  """
  Second line of this address
  """
  secondLine: String

  """
  The postal town
  """
  town: String

  """
  The country for this address
  """
  country: String

  """
  The postcode for this address
  """
  postcode: String
  createdAt: Datetime
  updatedAt: Datetime
}

enum AddressType {
  REGISTERED
  TRADING
  BUILDING_OWNER
  SITE
}

enum BusinessType {
  CONTRACTOR
  ARCHITECT
  MERCHANT
  CORP_DEVELOPER
}

"""
A connection to a list of `Company` values.
"""
type CompaniesConnection {
  """
  A list of `Company` objects.
  """
  nodes: [Company!]!

  """
  A list of edges which contains the `Company` and cursor to aid in pagination.
  """
  edges: [CompaniesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Company` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Company` edge in the connection.
"""
type CompaniesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Company` at the end of the edge.
  """
  node: Company!
}

"""
Methods to use when ordering `Company`.
"""
enum CompaniesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MARKET_ID_ASC
  MARKET_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A company that has been registered in InTouch
"""
type Company implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  marketId: Int

  """
  the name of the owner of the Company
  """
  ownerFullname: String

  """
  the email address to contact the owner
  """
  ownerEmail: String

  """
  the phone number to contact the owner
  """
  ownerPhone: String

  """
  ek
  """
  businessType: BusinessType

  """
  ek
  """
  tier: Tier

  """
  ek
  """
  status: CompanyStatus

  """
  the email address of the person who filled out the company registration form
  """
  registeredBy: String

  """
  the date that the Company registration form was submitted
  """
  registeredDate: Datetime

  """
  The Group ID of the company in Docebo
  """
  lmsGroup: String

  """
  The registered name of the Company
  """
  name: String

  """
  The Tax number in that number, such as the VAT number
  """
  taxNumber: String

  """
  They Companys public phone number
  """
  phone: String

  """
  The companys GoogleMap address
  """
  coordinates: String

  """
  A bit of blurb to appear in Find a contractor
  """
  aboutUs: String

  """
  The email address that they can be contacted with by the public assuming they are listed.
  """
  publicEmail: String

  """
  The Company website URL
  """
  website: String

  """
  The Company facebook website
  """
  facebook: String

  """
  Their Company LinkedIn page URL
  """
  linkedIn: String

  """
  A 7 digit reference number generated for all Companies and visible to Roofpro
  member Companies. (aka membership number).  Should be unique.
  """
  referenceNumber: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Market` that is related to this `Company`.
  """
  market: Market

  """
  Reads and enables pagination through a set of `Address`.
  """
  addresses(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Address`.
    """
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition
  ): AddressesConnection!

  """
  Reads and enables pagination through a set of `CompanyDocument`.
  """
  companyDocuments(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CompanyDocument`.
    """
    orderBy: [CompanyDocumentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyDocumentCondition
  ): CompanyDocumentsConnection!

  """
  Reads and enables pagination through a set of `CompanyMember`.
  """
  companyMembers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CompanyMember`.
    """
    orderBy: [CompanyMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyMemberCondition
  ): CompanyMembersConnection!

  """
  Reads and enables pagination through a set of `Project`.
  """
  projects(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection!
}

"""
A condition to be used against `Company` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CompanyCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `marketId` field.
  """
  marketId: Int
}

"""
A document uploaded by the Company to InTouch that appears on their Company Profile, for example an insurance certificate
"""
type CompanyDocument implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  companyId: Int

  """
  The document itself or the path to it
  """
  document: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Company` that is related to this `CompanyDocument`.
  """
  company: Company
}

"""
A condition to be used against `CompanyDocument` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CompanyDocumentCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `companyId` field.
  """
  companyId: Int
}

"""
An input for mutations affecting `CompanyDocument`
"""
input CompanyDocumentInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  companyId: Int

  """
  The document itself or the path to it
  """
  document: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `CompanyDocument`. Fields that are set will be updated.
"""
input CompanyDocumentPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  companyId: Int

  """
  The document itself or the path to it
  """
  document: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `CompanyDocument` values.
"""
type CompanyDocumentsConnection {
  """
  A list of `CompanyDocument` objects.
  """
  nodes: [CompanyDocument!]!

  """
  A list of edges which contains the `CompanyDocument` and cursor to aid in pagination.
  """
  edges: [CompanyDocumentsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `CompanyDocument` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `CompanyDocument` edge in the connection.
"""
type CompanyDocumentsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `CompanyDocument` at the end of the edge.
  """
  node: CompanyDocument!
}

"""
Methods to use when ordering `CompanyDocument`.
"""
enum CompanyDocumentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COMPANY_ID_ASC
  COMPANY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
An input for mutations affecting `Company`
"""
input CompanyInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  marketId: Int

  """
  the name of the owner of the Company
  """
  ownerFullname: String

  """
  the email address to contact the owner
  """
  ownerEmail: String

  """
  the phone number to contact the owner
  """
  ownerPhone: String

  """
  ek
  """
  businessType: BusinessType

  """
  ek
  """
  tier: Tier

  """
  ek
  """
  status: CompanyStatus

  """
  the email address of the person who filled out the company registration form
  """
  registeredBy: String

  """
  the date that the Company registration form was submitted
  """
  registeredDate: Datetime

  """
  The Group ID of the company in Docebo
  """
  lmsGroup: String

  """
  The registered name of the Company
  """
  name: String

  """
  The Tax number in that number, such as the VAT number
  """
  taxNumber: String

  """
  They Companys public phone number
  """
  phone: String

  """
  The companys GoogleMap address
  """
  coordinates: String

  """
  A bit of blurb to appear in Find a contractor
  """
  aboutUs: String

  """
  The email address that they can be contacted with by the public assuming they are listed.
  """
  publicEmail: String

  """
  The Company website URL
  """
  website: String

  """
  The Company facebook website
  """
  facebook: String

  """
  Their Company LinkedIn page URL
  """
  linkedIn: String

  """
  A 7 digit reference number generated for all Companies and visible to Roofpro
  member Companies. (aka membership number).  Should be unique.
  """
  referenceNumber: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection between a user and a company
"""
type CompanyMember implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  marketId: Int

  """
  fk
  """
  accountId: Int

  """
  fk
  """
  companyId: Int
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Market` that is related to this `CompanyMember`.
  """
  market: Market

  """
  Reads a single `Account` that is related to this `CompanyMember`.
  """
  account: Account

  """
  Reads a single `Company` that is related to this `CompanyMember`.
  """
  company: Company
}

"""
A condition to be used against `CompanyMember` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CompanyMemberCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `marketId` field.
  """
  marketId: Int

  """
  Checks for equality with the object’s `accountId` field.
  """
  accountId: Int

  """
  Checks for equality with the object’s `companyId` field.
  """
  companyId: Int
}

"""
An input for mutations affecting `CompanyMember`
"""
input CompanyMemberInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  marketId: Int

  """
  fk
  """
  accountId: Int

  """
  fk
  """
  companyId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `CompanyMember`. Fields that are set will be updated.
"""
input CompanyMemberPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  marketId: Int

  """
  fk
  """
  accountId: Int

  """
  fk
  """
  companyId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `CompanyMember` values.
"""
type CompanyMembersConnection {
  """
  A list of `CompanyMember` objects.
  """
  nodes: [CompanyMember!]!

  """
  A list of edges which contains the `CompanyMember` and cursor to aid in pagination.
  """
  edges: [CompanyMembersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `CompanyMember` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `CompanyMember` edge in the connection.
"""
type CompanyMembersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `CompanyMember` at the end of the edge.
  """
  node: CompanyMember!
}

"""
Methods to use when ordering `CompanyMember`.
"""
enum CompanyMembersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MARKET_ID_ASC
  MARKET_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  COMPANY_ID_ASC
  COMPANY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Company`. Fields that are set will be updated.
"""
input CompanyPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  marketId: Int

  """
  the name of the owner of the Company
  """
  ownerFullname: String

  """
  the email address to contact the owner
  """
  ownerEmail: String

  """
  the phone number to contact the owner
  """
  ownerPhone: String

  """
  ek
  """
  businessType: BusinessType

  """
  ek
  """
  tier: Tier

  """
  ek
  """
  status: CompanyStatus

  """
  the email address of the person who filled out the company registration form
  """
  registeredBy: String

  """
  the date that the Company registration form was submitted
  """
  registeredDate: Datetime

  """
  The Group ID of the company in Docebo
  """
  lmsGroup: String

  """
  The registered name of the Company
  """
  name: String

  """
  The Tax number in that number, such as the VAT number
  """
  taxNumber: String

  """
  They Companys public phone number
  """
  phone: String

  """
  The companys GoogleMap address
  """
  coordinates: String

  """
  A bit of blurb to appear in Find a contractor
  """
  aboutUs: String

  """
  The email address that they can be contacted with by the public assuming they are listed.
  """
  publicEmail: String

  """
  The Company website URL
  """
  website: String

  """
  The Company facebook website
  """
  facebook: String

  """
  Their Company LinkedIn page URL
  """
  linkedIn: String

  """
  A 7 digit reference number generated for all Companies and visible to Roofpro
  member Companies. (aka membership number).  Should be unique.
  """
  referenceNumber: String
  createdAt: Datetime
  updatedAt: Datetime
}

enum CompanyStatus {
  NEW
  ACTIVE
  DEACTIVATED
}

type ContentfulGuaranteeType {
  name: String
  displayName: String
  technology: String
  coverage: String
  signature: ContentfulSignature
  guaranteeTemplatesCollection: GuaranteeTemplatesCollection
}

type ContentfulLogo {
  title: String
  url: String
}

type ContentfulMaintenanceTemplate {
  fileName: String
  url: String
}

type ContentfulSignature {
  fileName: String
  url: String
}

type ContentfulTerms {
  fileName: String
  url: String
}

"""
All input for the `createAccount` mutation.
"""
input CreateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  firstName: String
  lastName: String
  marketId: Int
  role: Role
}

"""
The output of our `createAccount` mutation.
"""
type CreateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `Account`.
  """
  market: Market

  """
  An edge for our `Account`. May be used by Relay 1.
  """
  accountEdge(
    """
    The method to use when ordering `Account`.
    """
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""
All input for the create `Address` mutation.
"""
input CreateAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Address` to be created by this mutation.
  """
  address: AddressInput!
}

"""
The output of our create `Address` mutation.
"""
type CreateAddressPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Address` that was created by this mutation.
  """
  address: Address

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `Address`.
  """
  project: Project

  """
  Reads a single `Company` that is related to this `Address`.
  """
  company: Company

  """
  An edge for our `Address`. May be used by Relay 1.
  """
  addressEdge(
    """
    The method to use when ordering `Address`.
    """
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesEdge
}

"""
All input for the create `CompanyDocument` mutation.
"""
input CreateCompanyDocumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `CompanyDocument` to be created by this mutation.
  """
  companyDocument: CompanyDocumentInput!
}

"""
The output of our create `CompanyDocument` mutation.
"""
type CreateCompanyDocumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CompanyDocument` that was created by this mutation.
  """
  companyDocument: CompanyDocument

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Company` that is related to this `CompanyDocument`.
  """
  company: Company

  """
  An edge for our `CompanyDocument`. May be used by Relay 1.
  """
  companyDocumentEdge(
    """
    The method to use when ordering `CompanyDocument`.
    """
    orderBy: [CompanyDocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyDocumentsEdge
}

"""
All input for the create `Company` mutation.
"""
input CreateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Company` to be created by this mutation.
  """
  company: CompanyInput!
}

"""
All input for the create `CompanyMember` mutation.
"""
input CreateCompanyMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `CompanyMember` to be created by this mutation.
  """
  companyMember: CompanyMemberInput!
}

"""
The output of our create `CompanyMember` mutation.
"""
type CreateCompanyMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CompanyMember` that was created by this mutation.
  """
  companyMember: CompanyMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `CompanyMember`.
  """
  market: Market

  """
  Reads a single `Account` that is related to this `CompanyMember`.
  """
  account: Account

  """
  Reads a single `Company` that is related to this `CompanyMember`.
  """
  company: Company

  """
  An edge for our `CompanyMember`. May be used by Relay 1.
  """
  companyMemberEdge(
    """
    The method to use when ordering `CompanyMember`.
    """
    orderBy: [CompanyMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyMembersEdge
}

"""
The output of our create `Company` mutation.
"""
type CreateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Company` that was created by this mutation.
  """
  company: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `Company`.
  """
  market: Market

  """
  An edge for our `Company`. May be used by Relay 1.
  """
  companyEdge(
    """
    The method to use when ordering `Company`.
    """
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge
}

"""
All input for the create `EvidenceItem` mutation.
"""
input CreateEvidenceItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `EvidenceItem` to be created by this mutation.
  """
  evidenceItem: EvidenceItemInput!
}

"""
The output of our create `EvidenceItem` mutation.
"""
type CreateEvidenceItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EvidenceItem` that was created by this mutation.
  """
  evidenceItem: EvidenceItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Guarantee` that is related to this `EvidenceItem`.
  """
  guarantee: Guarantee

  """
  An edge for our `EvidenceItem`. May be used by Relay 1.
  """
  evidenceItemEdge(
    """
    The method to use when ordering `EvidenceItem`.
    """
    orderBy: [EvidenceItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EvidenceItemsEdge
}

"""
All input for the create `GuaranteedProduct` mutation.
"""
input CreateGuaranteedProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `GuaranteedProduct` to be created by this mutation.
  """
  guaranteedProduct: GuaranteedProductInput!
}

"""
The output of our create `GuaranteedProduct` mutation.
"""
type CreateGuaranteedProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `GuaranteedProduct` that was created by this mutation.
  """
  guaranteedProduct: GuaranteedProduct

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Product` that is related to this `GuaranteedProduct`.
  """
  product: Product

  """
  Reads a single `Guarantee` that is related to this `GuaranteedProduct`.
  """
  guarantee: Guarantee

  """
  An edge for our `GuaranteedProduct`. May be used by Relay 1.
  """
  guaranteedProductEdge(
    """
    The method to use when ordering `GuaranteedProduct`.
    """
    orderBy: [GuaranteedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuaranteedProductsEdge
}

"""
All input for the create `Guarantee` mutation.
"""
input CreateGuaranteeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Guarantee` to be created by this mutation.
  """
  guarantee: GuaranteeInput!
}

"""
The output of our create `Guarantee` mutation.
"""
type CreateGuaranteePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Guarantee` that was created by this mutation.
  """
  guarantee: Guarantee

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  requestorAccount: Account

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  responsibleInstallerAccount: Account

  """
  Reads a single `Project` that is related to this `Guarantee`.
  """
  project: Project

  """
  Reads a single `System` that is related to this `Guarantee`.
  """
  system: System

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  reviewerAccount: Account

  """
  An edge for our `Guarantee`. May be used by Relay 1.
  """
  guaranteeEdge(
    """
    The method to use when ordering `Guarantee`.
    """
    orderBy: [GuaranteesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuaranteesEdge
}

"""
All input for the create `Invitation` mutation.
"""
input CreateInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Invitation` to be created by this mutation.
  """
  invitation: InvitationInput!
}

"""
The output of our create `Invitation` mutation.
"""
type CreateInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Invitation` that was created by this mutation.
  """
  invitation: Invitation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Invitation`.
  """
  senderAccount: Account

  """
  An edge for our `Invitation`. May be used by Relay 1.
  """
  invitationEdge(
    """
    The method to use when ordering `Invitation`.
    """
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvitationsEdge
}

"""
All input for the create `Market` mutation.
"""
input CreateMarketInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Market` to be created by this mutation.
  """
  market: MarketInput!
}

"""
The output of our create `Market` mutation.
"""
type CreateMarketPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Market` that was created by this mutation.
  """
  market: Market

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Market`. May be used by Relay 1.
  """
  marketEdge(
    """
    The method to use when ordering `Market`.
    """
    orderBy: [MarketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MarketsEdge
}

"""
All input for the create `Note` mutation.
"""
input CreateNoteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Note` to be created by this mutation.
  """
  note: NoteInput!
}

"""
The output of our create `Note` mutation.
"""
type CreateNotePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Note` that was created by this mutation.
  """
  note: Note

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Note`.
  """
  author: Account

  """
  Reads a single `Project` that is related to this `Note`.
  """
  project: Project

  """
  An edge for our `Note`. May be used by Relay 1.
  """
  noteEdge(
    """
    The method to use when ordering `Note`.
    """
    orderBy: [NotesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotesEdge
}

"""
All input for the create `Notification` mutation.
"""
input CreateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Notification` to be created by this mutation.
  """
  notification: NotificationInput!
}

"""
The output of our create `Notification` mutation.
"""
type CreateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Notification` that was created by this mutation.
  """
  notification: Notification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Notification`.
  """
  account: Account

  """
  An edge for our `Notification`. May be used by Relay 1.
  """
  notificationEdge(
    """
    The method to use when ordering `Notification`.
    """
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""
All input for the create `Product` mutation.
"""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Product` to be created by this mutation.
  """
  product: ProductInput!
}

"""
The output of our create `Product` mutation.
"""
type CreateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Product` that was created by this mutation.
  """
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `Product`.
  """
  market: Market

  """
  An edge for our `Product`. May be used by Relay 1.
  """
  productEdge(
    """
    The method to use when ordering `Product`.
    """
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""
All input for the create `Project` mutation.
"""
input CreateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Project` to be created by this mutation.
  """
  project: ProjectInput!
}

"""
All input for the create `ProjectMember` mutation.
"""
input CreateProjectMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ProjectMember` to be created by this mutation.
  """
  projectMember: ProjectMemberInput!
}

"""
The output of our create `ProjectMember` mutation.
"""
type CreateProjectMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectMember` that was created by this mutation.
  """
  projectMember: ProjectMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectMember`.
  """
  project: Project

  """
  Reads a single `Account` that is related to this `ProjectMember`.
  """
  account: Account

  """
  An edge for our `ProjectMember`. May be used by Relay 1.
  """
  projectMemberEdge(
    """
    The method to use when ordering `ProjectMember`.
    """
    orderBy: [ProjectMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectMembersEdge
}

"""
The output of our create `Project` mutation.
"""
type CreateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Project` that was created by this mutation.
  """
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Company` that is related to this `Project`.
  """
  company: Company

  """
  An edge for our `Project`. May be used by Relay 1.
  """
  projectEdge(
    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge
}

"""
All input for the create `System` mutation.
"""
input CreateSystemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `System` to be created by this mutation.
  """
  system: SystemInput!
}

"""
All input for the create `SystemMember` mutation.
"""
input CreateSystemMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `SystemMember` to be created by this mutation.
  """
  systemMember: SystemMemberInput!
}

"""
The output of our create `SystemMember` mutation.
"""
type CreateSystemMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `SystemMember` that was created by this mutation.
  """
  systemMember: SystemMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `System` that is related to this `SystemMember`.
  """
  system: System

  """
  Reads a single `Product` that is related to this `SystemMember`.
  """
  product: Product

  """
  An edge for our `SystemMember`. May be used by Relay 1.
  """
  systemMemberEdge(
    """
    The method to use when ordering `SystemMember`.
    """
    orderBy: [SystemMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SystemMembersEdge
}

"""
The output of our create `System` mutation.
"""
type CreateSystemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `System` that was created by this mutation.
  """
  system: System

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `System`.
  """
  market: Market

  """
  An edge for our `System`. May be used by Relay 1.
  """
  systemEdge(
    """
    The method to use when ordering `System`.
    """
    orderBy: [SystemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SystemsEdge
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
All input for the `deleteAccountByNodeId` mutation.
"""
input DeleteAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAccount` mutation.
"""
input DeleteAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `Account` mutation.
"""
type DeleteAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Account` that was deleted by this mutation.
  """
  account: Account
  deletedAccountNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `Account`.
  """
  market: Market

  """
  An edge for our `Account`. May be used by Relay 1.
  """
  accountEdge(
    """
    The method to use when ordering `Account`.
    """
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""
All input for the `deleteAddressByNodeId` mutation.
"""
input DeleteAddressByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Address` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAddress` mutation.
"""
input DeleteAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `Address` mutation.
"""
type DeleteAddressPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Address` that was deleted by this mutation.
  """
  address: Address
  deletedAddressNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `Address`.
  """
  project: Project

  """
  Reads a single `Company` that is related to this `Address`.
  """
  company: Company

  """
  An edge for our `Address`. May be used by Relay 1.
  """
  addressEdge(
    """
    The method to use when ordering `Address`.
    """
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesEdge
}

"""
All input for the `deleteCompanyByNodeId` mutation.
"""
input DeleteCompanyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Company` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCompanyDocumentByNodeId` mutation.
"""
input DeleteCompanyDocumentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CompanyDocument` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCompanyDocument` mutation.
"""
input DeleteCompanyDocumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `CompanyDocument` mutation.
"""
type DeleteCompanyDocumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CompanyDocument` that was deleted by this mutation.
  """
  companyDocument: CompanyDocument
  deletedCompanyDocumentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Company` that is related to this `CompanyDocument`.
  """
  company: Company

  """
  An edge for our `CompanyDocument`. May be used by Relay 1.
  """
  companyDocumentEdge(
    """
    The method to use when ordering `CompanyDocument`.
    """
    orderBy: [CompanyDocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyDocumentsEdge
}

"""
All input for the `deleteCompany` mutation.
"""
input DeleteCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
All input for the `deleteCompanyMemberByNodeId` mutation.
"""
input DeleteCompanyMemberByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CompanyMember` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCompanyMember` mutation.
"""
input DeleteCompanyMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `CompanyMember` mutation.
"""
type DeleteCompanyMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CompanyMember` that was deleted by this mutation.
  """
  companyMember: CompanyMember
  deletedCompanyMemberNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `CompanyMember`.
  """
  market: Market

  """
  Reads a single `Account` that is related to this `CompanyMember`.
  """
  account: Account

  """
  Reads a single `Company` that is related to this `CompanyMember`.
  """
  company: Company

  """
  An edge for our `CompanyMember`. May be used by Relay 1.
  """
  companyMemberEdge(
    """
    The method to use when ordering `CompanyMember`.
    """
    orderBy: [CompanyMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyMembersEdge
}

"""
The output of our delete `Company` mutation.
"""
type DeleteCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Company` that was deleted by this mutation.
  """
  company: Company
  deletedCompanyNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `Company`.
  """
  market: Market

  """
  An edge for our `Company`. May be used by Relay 1.
  """
  companyEdge(
    """
    The method to use when ordering `Company`.
    """
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge
}

"""
All input for the `deleteEvidenceItemByNodeId` mutation.
"""
input DeleteEvidenceItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EvidenceItem` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEvidenceItem` mutation.
"""
input DeleteEvidenceItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `EvidenceItem` mutation.
"""
type DeleteEvidenceItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EvidenceItem` that was deleted by this mutation.
  """
  evidenceItem: EvidenceItem
  deletedEvidenceItemNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Guarantee` that is related to this `EvidenceItem`.
  """
  guarantee: Guarantee

  """
  An edge for our `EvidenceItem`. May be used by Relay 1.
  """
  evidenceItemEdge(
    """
    The method to use when ordering `EvidenceItem`.
    """
    orderBy: [EvidenceItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EvidenceItemsEdge
}

"""
All input for the `deleteGuaranteeByNodeId` mutation.
"""
input DeleteGuaranteeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Guarantee` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteGuaranteedProductByNodeId` mutation.
"""
input DeleteGuaranteedProductByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GuaranteedProduct` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteGuaranteedProduct` mutation.
"""
input DeleteGuaranteedProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `GuaranteedProduct` mutation.
"""
type DeleteGuaranteedProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `GuaranteedProduct` that was deleted by this mutation.
  """
  guaranteedProduct: GuaranteedProduct
  deletedGuaranteedProductNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Product` that is related to this `GuaranteedProduct`.
  """
  product: Product

  """
  Reads a single `Guarantee` that is related to this `GuaranteedProduct`.
  """
  guarantee: Guarantee

  """
  An edge for our `GuaranteedProduct`. May be used by Relay 1.
  """
  guaranteedProductEdge(
    """
    The method to use when ordering `GuaranteedProduct`.
    """
    orderBy: [GuaranteedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuaranteedProductsEdge
}

"""
All input for the `deleteGuarantee` mutation.
"""
input DeleteGuaranteeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key - starts at 6100
  """
  id: Int!
}

"""
The output of our delete `Guarantee` mutation.
"""
type DeleteGuaranteePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Guarantee` that was deleted by this mutation.
  """
  guarantee: Guarantee
  deletedGuaranteeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  requestorAccount: Account

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  responsibleInstallerAccount: Account

  """
  Reads a single `Project` that is related to this `Guarantee`.
  """
  project: Project

  """
  Reads a single `System` that is related to this `Guarantee`.
  """
  system: System

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  reviewerAccount: Account

  """
  An edge for our `Guarantee`. May be used by Relay 1.
  """
  guaranteeEdge(
    """
    The method to use when ordering `Guarantee`.
    """
    orderBy: [GuaranteesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuaranteesEdge
}

"""
All input for the `deleteInvitationByNodeId` mutation.
"""
input DeleteInvitationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Invitation` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteInvitation` mutation.
"""
input DeleteInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `Invitation` mutation.
"""
type DeleteInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Invitation` that was deleted by this mutation.
  """
  invitation: Invitation
  deletedInvitationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Invitation`.
  """
  senderAccount: Account

  """
  An edge for our `Invitation`. May be used by Relay 1.
  """
  invitationEdge(
    """
    The method to use when ordering `Invitation`.
    """
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvitationsEdge
}

"""
All input for the `deleteMarketByNodeId` mutation.
"""
input DeleteMarketByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Market` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMarket` mutation.
"""
input DeleteMarketInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `Market` mutation.
"""
type DeleteMarketPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Market` that was deleted by this mutation.
  """
  market: Market
  deletedMarketNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Market`. May be used by Relay 1.
  """
  marketEdge(
    """
    The method to use when ordering `Market`.
    """
    orderBy: [MarketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MarketsEdge
}

"""
All input for the `deleteNoteByNodeId` mutation.
"""
input DeleteNoteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Note` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteNote` mutation.
"""
input DeleteNoteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `Note` mutation.
"""
type DeleteNotePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Note` that was deleted by this mutation.
  """
  note: Note
  deletedNoteNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Note`.
  """
  author: Account

  """
  Reads a single `Project` that is related to this `Note`.
  """
  project: Project

  """
  An edge for our `Note`. May be used by Relay 1.
  """
  noteEdge(
    """
    The method to use when ordering `Note`.
    """
    orderBy: [NotesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotesEdge
}

"""
All input for the `deleteNotificationByNodeId` mutation.
"""
input DeleteNotificationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteNotification` mutation.
"""
input DeleteNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `Notification` mutation.
"""
type DeleteNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Notification` that was deleted by this mutation.
  """
  notification: Notification
  deletedNotificationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Notification`.
  """
  account: Account

  """
  An edge for our `Notification`. May be used by Relay 1.
  """
  notificationEdge(
    """
    The method to use when ordering `Notification`.
    """
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""
All input for the `deleteProductByNodeId` mutation.
"""
input DeleteProductByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProduct` mutation.
"""
input DeleteProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `Product` mutation.
"""
type DeleteProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Product` that was deleted by this mutation.
  """
  product: Product
  deletedProductNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `Product`.
  """
  market: Market

  """
  An edge for our `Product`. May be used by Relay 1.
  """
  productEdge(
    """
    The method to use when ordering `Product`.
    """
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""
All input for the `deleteProjectByNodeId` mutation.
"""
input DeleteProjectByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Project` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProject` mutation.
"""
input DeleteProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
All input for the `deleteProjectMemberByNodeId` mutation.
"""
input DeleteProjectMemberByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectMember` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectMember` mutation.
"""
input DeleteProjectMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `ProjectMember` mutation.
"""
type DeleteProjectMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectMember` that was deleted by this mutation.
  """
  projectMember: ProjectMember
  deletedProjectMemberNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectMember`.
  """
  project: Project

  """
  Reads a single `Account` that is related to this `ProjectMember`.
  """
  account: Account

  """
  An edge for our `ProjectMember`. May be used by Relay 1.
  """
  projectMemberEdge(
    """
    The method to use when ordering `ProjectMember`.
    """
    orderBy: [ProjectMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectMembersEdge
}

"""
The output of our delete `Project` mutation.
"""
type DeleteProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Project` that was deleted by this mutation.
  """
  project: Project
  deletedProjectNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Company` that is related to this `Project`.
  """
  company: Company

  """
  An edge for our `Project`. May be used by Relay 1.
  """
  projectEdge(
    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge
}

"""
All input for the `deleteSystemByNodeId` mutation.
"""
input DeleteSystemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `System` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSystem` mutation.
"""
input DeleteSystemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
All input for the `deleteSystemMemberByNodeId` mutation.
"""
input DeleteSystemMemberByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SystemMember` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSystemMember` mutation.
"""
input DeleteSystemMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Primary key
  """
  id: Int!
}

"""
The output of our delete `SystemMember` mutation.
"""
type DeleteSystemMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `SystemMember` that was deleted by this mutation.
  """
  systemMember: SystemMember
  deletedSystemMemberNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `System` that is related to this `SystemMember`.
  """
  system: System

  """
  Reads a single `Product` that is related to this `SystemMember`.
  """
  product: Product

  """
  An edge for our `SystemMember`. May be used by Relay 1.
  """
  systemMemberEdge(
    """
    The method to use when ordering `SystemMember`.
    """
    orderBy: [SystemMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SystemMembersEdge
}

"""
The output of our delete `System` mutation.
"""
type DeleteSystemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `System` that was deleted by this mutation.
  """
  system: System
  deletedSystemNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `System`.
  """
  market: Market

  """
  An edge for our `System`. May be used by Relay 1.
  """
  systemEdge(
    """
    The method to use when ordering `System`.
    """
    orderBy: [SystemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SystemsEdge
}

"""
An item of evidence for a guarantee
"""
type EvidenceItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  a reference to the evidenceCategory sys id in Contentful
  """
  evidenceCategoryId: String

  """
  fk
  """
  guaranteeId: Int

  """
  Short name for the item of evidence
  """
  name: String

  """
  File reference or the file itself. Photo of the evidence
  """
  attachment: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Guarantee` that is related to this `EvidenceItem`.
  """
  guarantee: Guarantee
}

"""
A condition to be used against `EvidenceItem` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EvidenceItemCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `guaranteeId` field.
  """
  guaranteeId: Int
}

"""
An input for mutations affecting `EvidenceItem`
"""
input EvidenceItemInput {
  """
  Primary key
  """
  id: Int

  """
  a reference to the evidenceCategory sys id in Contentful
  """
  evidenceCategoryId: String

  """
  fk
  """
  guaranteeId: Int

  """
  Short name for the item of evidence
  """
  name: String

  """
  File reference or the file itself. Photo of the evidence
  """
  attachment: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `EvidenceItem`. Fields that are set will be updated.
"""
input EvidenceItemPatch {
  """
  Primary key
  """
  id: Int

  """
  a reference to the evidenceCategory sys id in Contentful
  """
  evidenceCategoryId: String

  """
  fk
  """
  guaranteeId: Int

  """
  Short name for the item of evidence
  """
  name: String

  """
  File reference or the file itself. Photo of the evidence
  """
  attachment: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `EvidenceItem` values.
"""
type EvidenceItemsConnection {
  """
  A list of `EvidenceItem` objects.
  """
  nodes: [EvidenceItem!]!

  """
  A list of edges which contains the `EvidenceItem` and cursor to aid in pagination.
  """
  edges: [EvidenceItemsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `EvidenceItem` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `EvidenceItem` edge in the connection.
"""
type EvidenceItemsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `EvidenceItem` at the end of the edge.
  """
  node: EvidenceItem!
}

"""
Methods to use when ordering `EvidenceItem`.
"""
enum EvidenceItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GUARANTEE_ID_ASC
  GUARANTEE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Starts life as request for a gurantee and becomes an actual issued guarantee
"""
type Guarantee implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key - starts at 6100
  """
  id: Int!

  """
  The pdf file that is emailed out, or a reference to it, or reference to the service that will generate it on demand
  """
  pdf: String

  """
  fk
  """
  requestorAccountId: Int

  """
  fk
  """
  responsibleInstallerAccountId: Int

  """
  fk
  """
  projectId: Int

  """
  a reference to the guaranteeType sys id in Contentful
  """
  guaranteeTypeId: String

  """
  fk
  """
  systemId: Int

  """
  fk
  """
  reviewerAccountId: Int

  """
  ek
  """
  status: RequestStatus

  """
  The date that the Guarantee is approved either automatically or manually.
  """
  startDate: Datetime

  """
  When the guarantee will expire.  This is calculated when the request_status
  becomes APPROVED. dependent on the StartDate, the Validity of the Product or
  System and the ValidityOffset in this Tier.
  """
  expiry: Datetime

  """
  This will be presented on the Guarantee pdf itself, if approved and is the
  primary reference for the Guarantees report. It is unique in the In the legacy
  system, the number is 3 sets of 4 digit numbers concatenated into one long
  number from the Company Id, Project Id and Request Id.
  """
  issueNumber: String

  """
  The date that the BMI merchandise was purchased
  """
  purchaseDate: Datetime
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  requestorAccount: Account

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  responsibleInstallerAccount: Account

  """
  Reads a single `Project` that is related to this `Guarantee`.
  """
  project: Project

  """
  Reads a single `System` that is related to this `Guarantee`.
  """
  system: System

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  reviewerAccount: Account

  """
  Reads and enables pagination through a set of `EvidenceItem`.
  """
  evidenceItems(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EvidenceItem`.
    """
    orderBy: [EvidenceItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EvidenceItemCondition
  ): EvidenceItemsConnection!

  """
  Reads and enables pagination through a set of `GuaranteedProduct`.
  """
  guaranteedProducts(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `GuaranteedProduct`.
    """
    orderBy: [GuaranteedProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuaranteedProductCondition
  ): GuaranteedProductsConnection!
  guaranteeType: ContentfulGuaranteeType
}

"""
A condition to be used against `Guarantee` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GuaranteeCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `requestorAccountId` field.
  """
  requestorAccountId: Int

  """
  Checks for equality with the object’s `responsibleInstallerAccountId` field.
  """
  responsibleInstallerAccountId: Int

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int

  """
  Checks for equality with the object’s `systemId` field.
  """
  systemId: Int

  """
  Checks for equality with the object’s `reviewerAccountId` field.
  """
  reviewerAccountId: Int
}

"""
A mapping of Products to Guarantees.  Needed because uou can have more than one Product per Product Guarantee.
"""
type GuaranteedProduct implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  productId: Int

  """
  fk
  """
  guaranteeId: Int
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Product` that is related to this `GuaranteedProduct`.
  """
  product: Product

  """
  Reads a single `Guarantee` that is related to this `GuaranteedProduct`.
  """
  guarantee: Guarantee
}

"""
A condition to be used against `GuaranteedProduct` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GuaranteedProductCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `productId` field.
  """
  productId: Int

  """
  Checks for equality with the object’s `guaranteeId` field.
  """
  guaranteeId: Int
}

"""
An input for mutations affecting `GuaranteedProduct`
"""
input GuaranteedProductInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  productId: Int

  """
  fk
  """
  guaranteeId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `GuaranteedProduct`. Fields that are set will be updated.
"""
input GuaranteedProductPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  productId: Int

  """
  fk
  """
  guaranteeId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `GuaranteedProduct` values.
"""
type GuaranteedProductsConnection {
  """
  A list of `GuaranteedProduct` objects.
  """
  nodes: [GuaranteedProduct!]!

  """
  A list of edges which contains the `GuaranteedProduct` and cursor to aid in pagination.
  """
  edges: [GuaranteedProductsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `GuaranteedProduct` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `GuaranteedProduct` edge in the connection.
"""
type GuaranteedProductsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `GuaranteedProduct` at the end of the edge.
  """
  node: GuaranteedProduct!
}

"""
Methods to use when ordering `GuaranteedProduct`.
"""
enum GuaranteedProductsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  GUARANTEE_ID_ASC
  GUARANTEE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
An input for mutations affecting `Guarantee`
"""
input GuaranteeInput {
  """
  Primary key - starts at 6100
  """
  id: Int

  """
  The pdf file that is emailed out, or a reference to it, or reference to the service that will generate it on demand
  """
  pdf: String

  """
  fk
  """
  requestorAccountId: Int

  """
  fk
  """
  responsibleInstallerAccountId: Int

  """
  fk
  """
  projectId: Int

  """
  a reference to the guaranteeType sys id in Contentful
  """
  guaranteeTypeId: String

  """
  fk
  """
  systemId: Int

  """
  fk
  """
  reviewerAccountId: Int

  """
  ek
  """
  status: RequestStatus

  """
  The date that the Guarantee is approved either automatically or manually.
  """
  startDate: Datetime

  """
  When the guarantee will expire.  This is calculated when the request_status
  becomes APPROVED. dependent on the StartDate, the Validity of the Product or
  System and the ValidityOffset in this Tier.
  """
  expiry: Datetime

  """
  This will be presented on the Guarantee pdf itself, if approved and is the
  primary reference for the Guarantees report. It is unique in the In the legacy
  system, the number is 3 sets of 4 digit numbers concatenated into one long
  number from the Company Id, Project Id and Request Id.
  """
  issueNumber: String

  """
  The date that the BMI merchandise was purchased
  """
  purchaseDate: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Guarantee`. Fields that are set will be updated.
"""
input GuaranteePatch {
  """
  Primary key - starts at 6100
  """
  id: Int

  """
  The pdf file that is emailed out, or a reference to it, or reference to the service that will generate it on demand
  """
  pdf: String

  """
  fk
  """
  requestorAccountId: Int

  """
  fk
  """
  responsibleInstallerAccountId: Int

  """
  fk
  """
  projectId: Int

  """
  a reference to the guaranteeType sys id in Contentful
  """
  guaranteeTypeId: String

  """
  fk
  """
  systemId: Int

  """
  fk
  """
  reviewerAccountId: Int

  """
  ek
  """
  status: RequestStatus

  """
  The date that the Guarantee is approved either automatically or manually.
  """
  startDate: Datetime

  """
  When the guarantee will expire.  This is calculated when the request_status
  becomes APPROVED. dependent on the StartDate, the Validity of the Product or
  System and the ValidityOffset in this Tier.
  """
  expiry: Datetime

  """
  This will be presented on the Guarantee pdf itself, if approved and is the
  primary reference for the Guarantees report. It is unique in the In the legacy
  system, the number is 3 sets of 4 digit numbers concatenated into one long
  number from the Company Id, Project Id and Request Id.
  """
  issueNumber: String

  """
  The date that the BMI merchandise was purchased
  """
  purchaseDate: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `Guarantee` values.
"""
type GuaranteesConnection {
  """
  A list of `Guarantee` objects.
  """
  nodes: [Guarantee!]!

  """
  A list of edges which contains the `Guarantee` and cursor to aid in pagination.
  """
  edges: [GuaranteesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Guarantee` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Guarantee` edge in the connection.
"""
type GuaranteesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Guarantee` at the end of the edge.
  """
  node: Guarantee!
}

"""
Methods to use when ordering `Guarantee`.
"""
enum GuaranteesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REQUESTOR_ACCOUNT_ID_ASC
  REQUESTOR_ACCOUNT_ID_DESC
  RESPONSIBLE_INSTALLER_ACCOUNT_ID_ASC
  RESPONSIBLE_INSTALLER_ACCOUNT_ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  SYSTEM_ID_ASC
  SYSTEM_ID_DESC
  REVIEWER_ACCOUNT_ID_ASC
  REVIEWER_ACCOUNT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type GuaranteeTemplateItems {
  guaranteeScope: String
  signatory: String
  headingGuarantee: String
  headingScope: String
  headingProducts: String
  headingBeneficiary: String
  headingBuildingOwnerName: String
  headingBuildingAddress: String
  headingRoofArea: String
  headingRoofType: String
  headingContractor: String
  headingContractorName: String
  headingContractorId: String
  headingStartDate: String
  headingGuaranteeId: String
  headingValidity: String
  headingExpiry: String
  footer: String
  terms: ContentfulTerms
  maintenanceTemplate: ContentfulMaintenanceTemplate
  logo: ContentfulLogo
}

type GuaranteeTemplatesCollection {
  items: [GuaranteeTemplateItems]
}

"""
An invitation to join InTouch
"""
type Invitation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  senderAccountId: Int

  """
  An email address
  """
  invitee: String

  """
  An optional note that can be included in the invitation by the sender
  """
  personalNote: String

  """
  if the invitation has been accepted
  """
  accepted: Boolean

  """
  When the invite was generated
  """
  generated: Datetime

  """
  When this invitation will expire
  """
  expires: Datetime
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Account` that is related to this `Invitation`.
  """
  senderAccount: Account
}

"""
A condition to be used against `Invitation` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input InvitationCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `senderAccountId` field.
  """
  senderAccountId: Int
}

"""
An input for mutations affecting `Invitation`
"""
input InvitationInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  senderAccountId: Int

  """
  An email address
  """
  invitee: String

  """
  An optional note that can be included in the invitation by the sender
  """
  personalNote: String

  """
  if the invitation has been accepted
  """
  accepted: Boolean

  """
  When the invite was generated
  """
  generated: Datetime

  """
  When this invitation will expire
  """
  expires: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Invitation`. Fields that are set will be updated.
"""
input InvitationPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  senderAccountId: Int

  """
  An email address
  """
  invitee: String

  """
  An optional note that can be included in the invitation by the sender
  """
  personalNote: String

  """
  if the invitation has been accepted
  """
  accepted: Boolean

  """
  When the invite was generated
  """
  generated: Datetime

  """
  When this invitation will expire
  """
  expires: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `Invitation` values.
"""
type InvitationsConnection {
  """
  A list of `Invitation` objects.
  """
  nodes: [Invitation!]!

  """
  A list of edges which contains the `Invitation` and cursor to aid in pagination.
  """
  edges: [InvitationsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Invitation` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Invitation` edge in the connection.
"""
type InvitationsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Invitation` at the end of the edge.
  """
  node: Invitation!
}

"""
Methods to use when ordering `Invitation`.
"""
enum InvitationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SENDER_ACCOUNT_ID_ASC
  SENDER_ACCOUNT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of `Int` values.
"""
type IsPartOfProjectConnection {
  """
  A list of `Int` objects.
  """
  nodes: [Int]!

  """
  A list of edges which contains the `Int` and cursor to aid in pagination.
  """
  edges: [IsPartOfProjectEdge!]!

  """
  The count of *all* `Int` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Int` edge in the connection.
"""
type IsPartOfProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Int` at the end of the edge.
  """
  node: Int
}

enum Language {
  DA
  NO
  EN
  SV
  PT
  DE
  NL
  SK
  FR
  PL
  ES
  FI
}

"""
A country that BMI operates in
"""
type Market implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  ek
  """
  language: Language

  """
  the country code used for example as the subdomain
  """
  domain: String

  """
  The space in Contenful
  """
  cmsSpaceId: String

  """
  A short name for the market, e.g. Italy, Norway, Netherlands
  """
  name: String

  """
  The From name used when sending an email
  """
  sendName: String

  """
  The mailbox on intouch.bmigroup.com that emails will be sent from for this Market
  """
  sendMailbox: String

  """
  The default branch in Docebo that installers go into
  """
  lmsBranch: String

  """
  The branch in Docebo that company admins go into
  """
  lmsOwnerBranch: String

  """
  The default catalogue for the market.  All users in the market are able to see
  all courses in the default catalog from InTouch
  """
  doceboCatalogueId: String

  """
  The address of the merchandising site for the market.  CTAs of the MERCHANDISING type will link to this address
  """
  merchandisingUrl: String

  """
  Whether the market supports Projects.  If so then the Project section is
  available.  Tier 0 can then be configured to support Guarantees in non-Roopro
  countries.  In Roofpro countries various Tier configurations become possible.
  """
  projectsEnabled: Boolean

  """
  Reference to the Google Analytics tracking ID that is used for the Country GA reports
  """
  gtag: String

  """
  The coordinates of the middle of the country on a map
  """
  geoMiddle: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads and enables pagination through a set of `Account`.
  """
  accounts(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Account`.
    """
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): AccountsConnection!

  """
  Reads and enables pagination through a set of `Company`.
  """
  companies(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Company`.
    """
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition
  ): CompaniesConnection!

  """
  Reads and enables pagination through a set of `CompanyMember`.
  """
  companyMembers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CompanyMember`.
    """
    orderBy: [CompanyMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyMemberCondition
  ): CompanyMembersConnection!

  """
  Reads and enables pagination through a set of `Product`.
  """
  products(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Product`.
    """
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): ProductsConnection!

  """
  Reads and enables pagination through a set of `System`.
  """
  systems(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `System`.
    """
    orderBy: [SystemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SystemCondition
  ): SystemsConnection!
}

"""
A condition to be used against `Market` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MarketCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int
}

"""
An input for mutations affecting `Market`
"""
input MarketInput {
  """
  Primary key
  """
  id: Int

  """
  ek
  """
  language: Language

  """
  the country code used for example as the subdomain
  """
  domain: String

  """
  The space in Contenful
  """
  cmsSpaceId: String

  """
  A short name for the market, e.g. Italy, Norway, Netherlands
  """
  name: String

  """
  The From name used when sending an email
  """
  sendName: String

  """
  The mailbox on intouch.bmigroup.com that emails will be sent from for this Market
  """
  sendMailbox: String

  """
  The default branch in Docebo that installers go into
  """
  lmsBranch: String

  """
  The branch in Docebo that company admins go into
  """
  lmsOwnerBranch: String

  """
  The default catalogue for the market.  All users in the market are able to see
  all courses in the default catalog from InTouch
  """
  doceboCatalogueId: String

  """
  The address of the merchandising site for the market.  CTAs of the MERCHANDISING type will link to this address
  """
  merchandisingUrl: String

  """
  Whether the market supports Projects.  If so then the Project section is
  available.  Tier 0 can then be configured to support Guarantees in non-Roopro
  countries.  In Roofpro countries various Tier configurations become possible.
  """
  projectsEnabled: Boolean

  """
  Reference to the Google Analytics tracking ID that is used for the Country GA reports
  """
  gtag: String

  """
  The coordinates of the middle of the country on a map
  """
  geoMiddle: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Market`. Fields that are set will be updated.
"""
input MarketPatch {
  """
  Primary key
  """
  id: Int

  """
  ek
  """
  language: Language

  """
  the country code used for example as the subdomain
  """
  domain: String

  """
  The space in Contenful
  """
  cmsSpaceId: String

  """
  A short name for the market, e.g. Italy, Norway, Netherlands
  """
  name: String

  """
  The From name used when sending an email
  """
  sendName: String

  """
  The mailbox on intouch.bmigroup.com that emails will be sent from for this Market
  """
  sendMailbox: String

  """
  The default branch in Docebo that installers go into
  """
  lmsBranch: String

  """
  The branch in Docebo that company admins go into
  """
  lmsOwnerBranch: String

  """
  The default catalogue for the market.  All users in the market are able to see
  all courses in the default catalog from InTouch
  """
  doceboCatalogueId: String

  """
  The address of the merchandising site for the market.  CTAs of the MERCHANDISING type will link to this address
  """
  merchandisingUrl: String

  """
  Whether the market supports Projects.  If so then the Project section is
  available.  Tier 0 can then be configured to support Guarantees in non-Roopro
  countries.  In Roofpro countries various Tier configurations become possible.
  """
  projectsEnabled: Boolean

  """
  Reference to the Google Analytics tracking ID that is used for the Country GA reports
  """
  gtag: String

  """
  The coordinates of the middle of the country on a map
  """
  geoMiddle: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `Market` values.
"""
type MarketsConnection {
  """
  A list of `Market` objects.
  """
  nodes: [Market!]!

  """
  A list of edges which contains the `Market` and cursor to aid in pagination.
  """
  edges: [MarketsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Market` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Market` edge in the connection.
"""
type MarketsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Market` at the end of the edge.
  """
  node: Market!
}

"""
Methods to use when ordering `Market`.
"""
enum MarketsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `Address`.
  """
  createAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAddressInput!
  ): CreateAddressPayload

  """
  Creates a single `Company`.
  """
  createCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompanyInput!
  ): CreateCompanyPayload

  """
  Creates a single `CompanyDocument`.
  """
  createCompanyDocument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompanyDocumentInput!
  ): CreateCompanyDocumentPayload

  """
  Creates a single `CompanyMember`.
  """
  createCompanyMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompanyMemberInput!
  ): CreateCompanyMemberPayload

  """
  Creates a single `EvidenceItem`.
  """
  createEvidenceItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEvidenceItemInput!
  ): CreateEvidenceItemPayload

  """
  Creates a single `Guarantee`.
  """
  createGuarantee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGuaranteeInput!
  ): CreateGuaranteePayload

  """
  Creates a single `GuaranteedProduct`.
  """
  createGuaranteedProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGuaranteedProductInput!
  ): CreateGuaranteedProductPayload

  """
  Creates a single `Invitation`.
  """
  createInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInvitationInput!
  ): CreateInvitationPayload

  """
  Creates a single `Market`.
  """
  createMarket(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMarketInput!
  ): CreateMarketPayload

  """
  Creates a single `Note`.
  """
  createNote(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNoteInput!
  ): CreateNotePayload

  """
  Creates a single `Notification`.
  """
  createNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNotificationInput!
  ): CreateNotificationPayload

  """
  Creates a single `Product`.
  """
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """
  Creates a single `Project`.
  """
  createProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """
  Creates a single `ProjectMember`.
  """
  createProjectMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectMemberInput!
  ): CreateProjectMemberPayload

  """
  Creates a single `System`.
  """
  createSystem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSystemInput!
  ): CreateSystemPayload

  """
  Creates a single `SystemMember`.
  """
  createSystemMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSystemMemberInput!
  ): CreateSystemMemberPayload

  """
  Updates a single `Account` using its globally unique id and a patch.
  """
  updateAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountByNodeIdInput!
  ): UpdateAccountPayload

  """
  Updates a single `Account` using a unique key and a patch.
  """
  updateAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload

  """
  Updates a single `Address` using its globally unique id and a patch.
  """
  updateAddressByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAddressByNodeIdInput!
  ): UpdateAddressPayload

  """
  Updates a single `Address` using a unique key and a patch.
  """
  updateAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAddressInput!
  ): UpdateAddressPayload

  """
  Updates a single `Company` using its globally unique id and a patch.
  """
  updateCompanyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyByNodeIdInput!
  ): UpdateCompanyPayload

  """
  Updates a single `Company` using a unique key and a patch.
  """
  updateCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyInput!
  ): UpdateCompanyPayload

  """
  Updates a single `CompanyDocument` using its globally unique id and a patch.
  """
  updateCompanyDocumentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyDocumentByNodeIdInput!
  ): UpdateCompanyDocumentPayload

  """
  Updates a single `CompanyDocument` using a unique key and a patch.
  """
  updateCompanyDocument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyDocumentInput!
  ): UpdateCompanyDocumentPayload

  """
  Updates a single `CompanyMember` using its globally unique id and a patch.
  """
  updateCompanyMemberByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyMemberByNodeIdInput!
  ): UpdateCompanyMemberPayload

  """
  Updates a single `CompanyMember` using a unique key and a patch.
  """
  updateCompanyMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyMemberInput!
  ): UpdateCompanyMemberPayload

  """
  Updates a single `EvidenceItem` using its globally unique id and a patch.
  """
  updateEvidenceItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEvidenceItemByNodeIdInput!
  ): UpdateEvidenceItemPayload

  """
  Updates a single `EvidenceItem` using a unique key and a patch.
  """
  updateEvidenceItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEvidenceItemInput!
  ): UpdateEvidenceItemPayload

  """
  Updates a single `Guarantee` using its globally unique id and a patch.
  """
  updateGuaranteeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuaranteeByNodeIdInput!
  ): UpdateGuaranteePayload

  """
  Updates a single `Guarantee` using a unique key and a patch.
  """
  updateGuarantee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuaranteeInput!
  ): UpdateGuaranteePayload

  """
  Updates a single `GuaranteedProduct` using its globally unique id and a patch.
  """
  updateGuaranteedProductByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuaranteedProductByNodeIdInput!
  ): UpdateGuaranteedProductPayload

  """
  Updates a single `GuaranteedProduct` using a unique key and a patch.
  """
  updateGuaranteedProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuaranteedProductInput!
  ): UpdateGuaranteedProductPayload

  """
  Updates a single `Invitation` using its globally unique id and a patch.
  """
  updateInvitationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInvitationByNodeIdInput!
  ): UpdateInvitationPayload

  """
  Updates a single `Invitation` using a unique key and a patch.
  """
  updateInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInvitationInput!
  ): UpdateInvitationPayload

  """
  Updates a single `Market` using its globally unique id and a patch.
  """
  updateMarketByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMarketByNodeIdInput!
  ): UpdateMarketPayload

  """
  Updates a single `Market` using a unique key and a patch.
  """
  updateMarket(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMarketInput!
  ): UpdateMarketPayload

  """
  Updates a single `Note` using its globally unique id and a patch.
  """
  updateNoteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNoteByNodeIdInput!
  ): UpdateNotePayload

  """
  Updates a single `Note` using a unique key and a patch.
  """
  updateNote(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNoteInput!
  ): UpdateNotePayload

  """
  Updates a single `Notification` using its globally unique id and a patch.
  """
  updateNotificationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationByNodeIdInput!
  ): UpdateNotificationPayload

  """
  Updates a single `Notification` using a unique key and a patch.
  """
  updateNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationInput!
  ): UpdateNotificationPayload

  """
  Updates a single `Product` using its globally unique id and a patch.
  """
  updateProductByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByNodeIdInput!
  ): UpdateProductPayload

  """
  Updates a single `Product` using a unique key and a patch.
  """
  updateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductInput!
  ): UpdateProductPayload

  """
  Updates a single `Project` using its globally unique id and a patch.
  """
  updateProjectByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectByNodeIdInput!
  ): UpdateProjectPayload

  """
  Updates a single `Project` using a unique key and a patch.
  """
  updateProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInput!
  ): UpdateProjectPayload

  """
  Updates a single `ProjectMember` using its globally unique id and a patch.
  """
  updateProjectMemberByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectMemberByNodeIdInput!
  ): UpdateProjectMemberPayload

  """
  Updates a single `ProjectMember` using a unique key and a patch.
  """
  updateProjectMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectMemberInput!
  ): UpdateProjectMemberPayload

  """
  Updates a single `System` using its globally unique id and a patch.
  """
  updateSystemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSystemByNodeIdInput!
  ): UpdateSystemPayload

  """
  Updates a single `System` using a unique key and a patch.
  """
  updateSystem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSystemInput!
  ): UpdateSystemPayload

  """
  Updates a single `SystemMember` using its globally unique id and a patch.
  """
  updateSystemMemberByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSystemMemberByNodeIdInput!
  ): UpdateSystemMemberPayload

  """
  Updates a single `SystemMember` using a unique key and a patch.
  """
  updateSystemMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSystemMemberInput!
  ): UpdateSystemMemberPayload

  """
  Deletes a single `Account` using its globally unique id.
  """
  deleteAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountByNodeIdInput!
  ): DeleteAccountPayload

  """
  Deletes a single `Account` using a unique key.
  """
  deleteAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountInput!
  ): DeleteAccountPayload

  """
  Deletes a single `Address` using its globally unique id.
  """
  deleteAddressByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAddressByNodeIdInput!
  ): DeleteAddressPayload

  """
  Deletes a single `Address` using a unique key.
  """
  deleteAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAddressInput!
  ): DeleteAddressPayload

  """
  Deletes a single `Company` using its globally unique id.
  """
  deleteCompanyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyByNodeIdInput!
  ): DeleteCompanyPayload

  """
  Deletes a single `Company` using a unique key.
  """
  deleteCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyInput!
  ): DeleteCompanyPayload

  """
  Deletes a single `CompanyDocument` using its globally unique id.
  """
  deleteCompanyDocumentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyDocumentByNodeIdInput!
  ): DeleteCompanyDocumentPayload

  """
  Deletes a single `CompanyDocument` using a unique key.
  """
  deleteCompanyDocument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyDocumentInput!
  ): DeleteCompanyDocumentPayload

  """
  Deletes a single `CompanyMember` using its globally unique id.
  """
  deleteCompanyMemberByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyMemberByNodeIdInput!
  ): DeleteCompanyMemberPayload

  """
  Deletes a single `CompanyMember` using a unique key.
  """
  deleteCompanyMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyMemberInput!
  ): DeleteCompanyMemberPayload

  """
  Deletes a single `EvidenceItem` using its globally unique id.
  """
  deleteEvidenceItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEvidenceItemByNodeIdInput!
  ): DeleteEvidenceItemPayload

  """
  Deletes a single `EvidenceItem` using a unique key.
  """
  deleteEvidenceItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEvidenceItemInput!
  ): DeleteEvidenceItemPayload

  """
  Deletes a single `Guarantee` using its globally unique id.
  """
  deleteGuaranteeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuaranteeByNodeIdInput!
  ): DeleteGuaranteePayload

  """
  Deletes a single `Guarantee` using a unique key.
  """
  deleteGuarantee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuaranteeInput!
  ): DeleteGuaranteePayload

  """
  Deletes a single `GuaranteedProduct` using its globally unique id.
  """
  deleteGuaranteedProductByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuaranteedProductByNodeIdInput!
  ): DeleteGuaranteedProductPayload

  """
  Deletes a single `GuaranteedProduct` using a unique key.
  """
  deleteGuaranteedProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuaranteedProductInput!
  ): DeleteGuaranteedProductPayload

  """
  Deletes a single `Invitation` using its globally unique id.
  """
  deleteInvitationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInvitationByNodeIdInput!
  ): DeleteInvitationPayload

  """
  Deletes a single `Invitation` using a unique key.
  """
  deleteInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInvitationInput!
  ): DeleteInvitationPayload

  """
  Deletes a single `Market` using its globally unique id.
  """
  deleteMarketByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMarketByNodeIdInput!
  ): DeleteMarketPayload

  """
  Deletes a single `Market` using a unique key.
  """
  deleteMarket(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMarketInput!
  ): DeleteMarketPayload

  """
  Deletes a single `Note` using its globally unique id.
  """
  deleteNoteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNoteByNodeIdInput!
  ): DeleteNotePayload

  """
  Deletes a single `Note` using a unique key.
  """
  deleteNote(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNoteInput!
  ): DeleteNotePayload

  """
  Deletes a single `Notification` using its globally unique id.
  """
  deleteNotificationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationByNodeIdInput!
  ): DeleteNotificationPayload

  """
  Deletes a single `Notification` using a unique key.
  """
  deleteNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationInput!
  ): DeleteNotificationPayload

  """
  Deletes a single `Product` using its globally unique id.
  """
  deleteProductByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByNodeIdInput!
  ): DeleteProductPayload

  """
  Deletes a single `Product` using a unique key.
  """
  deleteProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductInput!
  ): DeleteProductPayload

  """
  Deletes a single `Project` using its globally unique id.
  """
  deleteProjectByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectByNodeIdInput!
  ): DeleteProjectPayload

  """
  Deletes a single `Project` using a unique key.
  """
  deleteProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInput!
  ): DeleteProjectPayload

  """
  Deletes a single `ProjectMember` using its globally unique id.
  """
  deleteProjectMemberByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectMemberByNodeIdInput!
  ): DeleteProjectMemberPayload

  """
  Deletes a single `ProjectMember` using a unique key.
  """
  deleteProjectMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectMemberInput!
  ): DeleteProjectMemberPayload

  """
  Deletes a single `System` using its globally unique id.
  """
  deleteSystemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSystemByNodeIdInput!
  ): DeleteSystemPayload

  """
  Deletes a single `System` using a unique key.
  """
  deleteSystem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSystemInput!
  ): DeleteSystemPayload

  """
  Deletes a single `SystemMember` using its globally unique id.
  """
  deleteSystemMemberByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSystemMemberByNodeIdInput!
  ): DeleteSystemMemberPayload

  """
  Deletes a single `SystemMember` using a unique key.
  """
  deleteSystemMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSystemMemberInput!
  ): DeleteSystemMemberPayload
  createAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAccountInput!
  ): CreateAccountPayload
  publishMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PublishInput!
  ): Publish
  createGuaranteePdf(id: Int!): PublishOutput
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
Usually a note added by someone at BMI who has been asked to approve a
Guarantee.  It is likely to be either a short note of approval, saying something
like, Approved, or Good Job, or a note of rejection, saying  something like, The
photographs of the roof are not clear enough.
"""
type Note implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  authorId: Int

  """
  fk
  """
  projectId: Int

  """
  The body of the Note
  """
  body: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Account` that is related to this `Note`.
  """
  author: Account

  """
  Reads a single `Project` that is related to this `Note`.
  """
  project: Project
}

"""
A condition to be used against `Note` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NoteCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `authorId` field.
  """
  authorId: Int

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int
}

"""
An input for mutations affecting `Note`
"""
input NoteInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  authorId: Int

  """
  fk
  """
  projectId: Int

  """
  The body of the Note
  """
  body: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Note`. Fields that are set will be updated.
"""
input NotePatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  authorId: Int

  """
  fk
  """
  projectId: Int

  """
  The body of the Note
  """
  body: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `Note` values.
"""
type NotesConnection {
  """
  A list of `Note` objects.
  """
  nodes: [Note!]!

  """
  A list of edges which contains the `Note` and cursor to aid in pagination.
  """
  edges: [NotesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Note` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Note` edge in the connection.
"""
type NotesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Note` at the end of the edge.
  """
  node: Note!
}

"""
Methods to use when ordering `Note`.
"""
enum NotesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
An internal notification available to an end user
"""
type Notification implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  accountId: Int

  """
  The datetime stamp for when the message was sent
  """
  sendDate: Datetime

  """
  Whether the message still needs to be read
  """
  unread: Boolean

  """
  The body of the message
  """
  body: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Account` that is related to this `Notification`.
  """
  account: Account
}

"""
A condition to be used against `Notification` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NotificationCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `accountId` field.
  """
  accountId: Int
}

"""
An input for mutations affecting `Notification`
"""
input NotificationInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  accountId: Int

  """
  The datetime stamp for when the message was sent
  """
  sendDate: Datetime

  """
  Whether the message still needs to be read
  """
  unread: Boolean

  """
  The body of the message
  """
  body: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Notification`. Fields that are set will be updated.
"""
input NotificationPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  accountId: Int

  """
  The datetime stamp for when the message was sent
  """
  sendDate: Datetime

  """
  Whether the message still needs to be read
  """
  unread: Boolean

  """
  The body of the message
  """
  body: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `Notification` values.
"""
type NotificationsConnection {
  """
  A list of `Notification` objects.
  """
  nodes: [Notification!]!

  """
  A list of edges which contains the `Notification` and cursor to aid in pagination.
  """
  edges: [NotificationsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Notification` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Notification` edge in the connection.
"""
type NotificationsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Notification` at the end of the edge.
  """
  node: Notification!
}

"""
Methods to use when ordering `Notification`.
"""
enum NotificationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
A product made by BMI
"""
type Product implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  marketId: Int

  """
  ek
  """
  technology: Technology

  """
  The Products brand
  """
  brand: String

  """
  Short name for the product
  """
  name: String

  """
  A description of the product
  """
  description: String

  """
  The family of Products this Product is in
  """
  family: String

  """
  Whether the product is avialable when being selected or not
  """
  published: Boolean

  """
  The number of years that this product can be guaranteed for
  """
  maximumValidityYears: Int
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Market` that is related to this `Product`.
  """
  market: Market

  """
  Reads and enables pagination through a set of `GuaranteedProduct`.
  """
  guaranteedProducts(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `GuaranteedProduct`.
    """
    orderBy: [GuaranteedProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuaranteedProductCondition
  ): GuaranteedProductsConnection!

  """
  Reads and enables pagination through a set of `SystemMember`.
  """
  systemMembers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `SystemMember`.
    """
    orderBy: [SystemMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SystemMemberCondition
  ): SystemMembersConnection!
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `marketId` field.
  """
  marketId: Int
}

"""
An input for mutations affecting `Product`
"""
input ProductInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  marketId: Int

  """
  ek
  """
  technology: Technology

  """
  The Products brand
  """
  brand: String

  """
  Short name for the product
  """
  name: String

  """
  A description of the product
  """
  description: String

  """
  The family of Products this Product is in
  """
  family: String

  """
  Whether the product is avialable when being selected or not
  """
  published: Boolean

  """
  The number of years that this product can be guaranteed for
  """
  maximumValidityYears: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  marketId: Int

  """
  ek
  """
  technology: Technology

  """
  The Products brand
  """
  brand: String

  """
  Short name for the product
  """
  name: String

  """
  A description of the product
  """
  description: String

  """
  The family of Products this Product is in
  """
  family: String

  """
  Whether the product is avialable when being selected or not
  """
  published: Boolean

  """
  The number of years that this product can be guaranteed for
  """
  maximumValidityYears: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `Product` values.
"""
type ProductsConnection {
  """
  A list of `Product` objects.
  """
  nodes: [Product!]!

  """
  A list of edges which contains the `Product` and cursor to aid in pagination.
  """
  edges: [ProductsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Product` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Product` edge in the connection.
"""
type ProductsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Product` at the end of the edge.
  """
  node: Product!
}

"""
Methods to use when ordering `Product`.
"""
enum ProductsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MARKET_ID_ASC
  MARKET_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A project that has been put into InTouch by a Company Administrator to represent a project being done by that company
"""
type Project implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  companyId: Int

  """
  ek
  """
  technology: Technology

  """
  Short name for the Project
  """
  name: String

  """
  Short description of what the Project is about.  Sometimes useful to clarify some points to BMI
  """
  description: String

  """
  If this is true then the Project should have been hidden from users
  """
  hidden: Boolean

  """
  The number of square meters of roof that this project covers
  """
  roofArea: Int

  """
  Email address of the person who owns the building that the roof is going on.
  Not mandatory for a Project, but mandatory when the Company applies for a
  Guarantee related to the project.
  """
  buildingOwnerMail: String

  """
  Name of the Building Owner, seen on the Guarantee. Must be completed before a Guarantee is issued.
  """
  buildingOwnerFirstname: String

  """
  Name of the Building Owner, seen on the Guarantee. Must be completed before a Guarantee is issued.
  """
  buildingOwnerLastname: String

  """
  Name of the Building Owners Company if they have one
  """
  buildingOwnerCompany: String

  """
  The date that the Project starts
  """
  startDate: Datetime

  """
  The date that the Project expects to end.
  """
  endDate: Datetime
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Company` that is related to this `Project`.
  """
  company: Company

  """
  Reads and enables pagination through a set of `Address`.
  """
  addresses(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Address`.
    """
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition
  ): AddressesConnection!

  """
  Reads and enables pagination through a set of `Guarantee`.
  """
  guarantees(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Guarantee`.
    """
    orderBy: [GuaranteesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuaranteeCondition
  ): GuaranteesConnection!

  """
  Reads and enables pagination through a set of `Note`.
  """
  notes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Note`.
    """
    orderBy: [NotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NoteCondition
  ): NotesConnection!

  """
  Reads and enables pagination through a set of `ProjectMember`.
  """
  projectMembers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectMember`.
    """
    orderBy: [ProjectMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectMemberCondition
  ): ProjectMembersConnection!
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `companyId` field.
  """
  companyId: Int
}

"""
An input for mutations affecting `Project`
"""
input ProjectInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  companyId: Int

  """
  ek
  """
  technology: Technology

  """
  Short name for the Project
  """
  name: String

  """
  Short description of what the Project is about.  Sometimes useful to clarify some points to BMI
  """
  description: String

  """
  If this is true then the Project should have been hidden from users
  """
  hidden: Boolean

  """
  The number of square meters of roof that this project covers
  """
  roofArea: Int

  """
  Email address of the person who owns the building that the roof is going on.
  Not mandatory for a Project, but mandatory when the Company applies for a
  Guarantee related to the project.
  """
  buildingOwnerMail: String

  """
  Name of the Building Owner, seen on the Guarantee. Must be completed before a Guarantee is issued.
  """
  buildingOwnerFirstname: String

  """
  Name of the Building Owner, seen on the Guarantee. Must be completed before a Guarantee is issued.
  """
  buildingOwnerLastname: String

  """
  Name of the Building Owners Company if they have one
  """
  buildingOwnerCompany: String

  """
  The date that the Project starts
  """
  startDate: Datetime

  """
  The date that the Project expects to end.
  """
  endDate: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection between a User and a Project. A connection between a user and a
company. This relationship could be simplified as one to many at the moment, but
there is already demand for a many to many relationship.
"""
type ProjectMember implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  projectId: Int

  """
  fk
  """
  accountId: Int
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Project` that is related to this `ProjectMember`.
  """
  project: Project

  """
  Reads a single `Account` that is related to this `ProjectMember`.
  """
  account: Account
}

"""
A condition to be used against `ProjectMember` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectMemberCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int

  """
  Checks for equality with the object’s `accountId` field.
  """
  accountId: Int
}

"""
An input for mutations affecting `ProjectMember`
"""
input ProjectMemberInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  projectId: Int

  """
  fk
  """
  accountId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `ProjectMember`. Fields that are set will be updated.
"""
input ProjectMemberPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  projectId: Int

  """
  fk
  """
  accountId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `ProjectMember` values.
"""
type ProjectMembersConnection {
  """
  A list of `ProjectMember` objects.
  """
  nodes: [ProjectMember!]!

  """
  A list of edges which contains the `ProjectMember` and cursor to aid in pagination.
  """
  edges: [ProjectMembersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectMember` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectMember` edge in the connection.
"""
type ProjectMembersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ProjectMember` at the end of the edge.
  """
  node: ProjectMember!
}

"""
Methods to use when ordering `ProjectMember`.
"""
enum ProjectMembersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Project`. Fields that are set will be updated.
"""
input ProjectPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  companyId: Int

  """
  ek
  """
  technology: Technology

  """
  Short name for the Project
  """
  name: String

  """
  Short description of what the Project is about.  Sometimes useful to clarify some points to BMI
  """
  description: String

  """
  If this is true then the Project should have been hidden from users
  """
  hidden: Boolean

  """
  The number of square meters of roof that this project covers
  """
  roofArea: Int

  """
  Email address of the person who owns the building that the roof is going on.
  Not mandatory for a Project, but mandatory when the Company applies for a
  Guarantee related to the project.
  """
  buildingOwnerMail: String

  """
  Name of the Building Owner, seen on the Guarantee. Must be completed before a Guarantee is issued.
  """
  buildingOwnerFirstname: String

  """
  Name of the Building Owner, seen on the Guarantee. Must be completed before a Guarantee is issued.
  """
  buildingOwnerLastname: String

  """
  Name of the Building Owners Company if they have one
  """
  buildingOwnerCompany: String

  """
  The date that the Project starts
  """
  startDate: Datetime

  """
  The date that the Project expects to end.
  """
  endDate: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `Project` values.
"""
type ProjectsConnection {
  """
  A list of `Project` objects.
  """
  nodes: [Project!]!

  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Project` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Project` edge in the connection.
"""
type ProjectsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Project` at the end of the edge.
  """
  node: Project!
}

"""
Methods to use when ordering `Project`.
"""
enum ProjectsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COMPANY_ID_ASC
  COMPANY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Publish {
  title: String
  text: String
  html: String
  email: String
}

input PublishInput {
  title: String
  text: String
  html: String
  email: String
}

type PublishOutput {
  messageId: String
}

"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `Account`.
  """
  accounts(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Account`.
    """
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): AccountsConnection

  """
  Reads and enables pagination through a set of `Address`.
  """
  addresses(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Address`.
    """
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition
  ): AddressesConnection

  """
  Reads and enables pagination through a set of `Company`.
  """
  companies(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Company`.
    """
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition
  ): CompaniesConnection

  """
  Reads and enables pagination through a set of `CompanyDocument`.
  """
  companyDocuments(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CompanyDocument`.
    """
    orderBy: [CompanyDocumentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyDocumentCondition
  ): CompanyDocumentsConnection

  """
  Reads and enables pagination through a set of `CompanyMember`.
  """
  companyMembers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CompanyMember`.
    """
    orderBy: [CompanyMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyMemberCondition
  ): CompanyMembersConnection

  """
  Reads and enables pagination through a set of `EvidenceItem`.
  """
  evidenceItems(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EvidenceItem`.
    """
    orderBy: [EvidenceItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EvidenceItemCondition
  ): EvidenceItemsConnection

  """
  Reads and enables pagination through a set of `Guarantee`.
  """
  guarantees(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Guarantee`.
    """
    orderBy: [GuaranteesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuaranteeCondition
  ): GuaranteesConnection

  """
  Reads and enables pagination through a set of `GuaranteedProduct`.
  """
  guaranteedProducts(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `GuaranteedProduct`.
    """
    orderBy: [GuaranteedProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuaranteedProductCondition
  ): GuaranteedProductsConnection

  """
  Reads and enables pagination through a set of `Invitation`.
  """
  invitations(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Invitation`.
    """
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvitationCondition
  ): InvitationsConnection

  """
  Reads and enables pagination through a set of `Market`.
  """
  markets(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Market`.
    """
    orderBy: [MarketsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MarketCondition
  ): MarketsConnection

  """
  Reads and enables pagination through a set of `Note`.
  """
  notes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Note`.
    """
    orderBy: [NotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NoteCondition
  ): NotesConnection

  """
  Reads and enables pagination through a set of `Notification`.
  """
  notifications(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Notification`.
    """
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition
  ): NotificationsConnection

  """
  Reads and enables pagination through a set of `Product`.
  """
  products(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Product`.
    """
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): ProductsConnection

  """
  Reads and enables pagination through a set of `Project`.
  """
  projects(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection

  """
  Reads and enables pagination through a set of `ProjectMember`.
  """
  projectMembers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectMember`.
    """
    orderBy: [ProjectMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectMemberCondition
  ): ProjectMembersConnection

  """
  Reads and enables pagination through a set of `System`.
  """
  systems(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `System`.
    """
    orderBy: [SystemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SystemCondition
  ): SystemsConnection

  """
  Reads and enables pagination through a set of `SystemMember`.
  """
  systemMembers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `SystemMember`.
    """
    orderBy: [SystemMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SystemMemberCondition
  ): SystemMembersConnection
  account(id: Int!): Account
  address(id: Int!): Address
  company(id: Int!): Company
  companyDocument(id: Int!): CompanyDocument
  companyMember(id: Int!): CompanyMember
  evidenceItem(id: Int!): EvidenceItem
  guarantee(id: Int!): Guarantee
  guaranteedProduct(id: Int!): GuaranteedProduct
  invitation(id: Int!): Invitation
  market(id: Int!): Market
  note(id: Int!): Note
  notification(id: Int!): Notification
  product(id: Int!): Product
  project(id: Int!): Project
  projectMember(id: Int!): ProjectMember
  system(id: Int!): System
  systemMember(id: Int!): SystemMember
  currentAccount: Int
  currentCompany: Int
  currentMarket: Int
  isPartOfProject(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor
  ): IsPartOfProjectConnection
  isProjectEnabledByMarket: Boolean

  """
  Reads a single `Account` using its globally unique `ID`.
  """
  accountByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Account`.
    """
    nodeId: ID!
  ): Account

  """
  Reads a single `Address` using its globally unique `ID`.
  """
  addressByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Address`.
    """
    nodeId: ID!
  ): Address

  """
  Reads a single `Company` using its globally unique `ID`.
  """
  companyByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Company`.
    """
    nodeId: ID!
  ): Company

  """
  Reads a single `CompanyDocument` using its globally unique `ID`.
  """
  companyDocumentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CompanyDocument`.
    """
    nodeId: ID!
  ): CompanyDocument

  """
  Reads a single `CompanyMember` using its globally unique `ID`.
  """
  companyMemberByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CompanyMember`.
    """
    nodeId: ID!
  ): CompanyMember

  """
  Reads a single `EvidenceItem` using its globally unique `ID`.
  """
  evidenceItemByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EvidenceItem`.
    """
    nodeId: ID!
  ): EvidenceItem

  """
  Reads a single `Guarantee` using its globally unique `ID`.
  """
  guaranteeByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Guarantee`.
    """
    nodeId: ID!
  ): Guarantee

  """
  Reads a single `GuaranteedProduct` using its globally unique `ID`.
  """
  guaranteedProductByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GuaranteedProduct`.
    """
    nodeId: ID!
  ): GuaranteedProduct

  """
  Reads a single `Invitation` using its globally unique `ID`.
  """
  invitationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Invitation`.
    """
    nodeId: ID!
  ): Invitation

  """
  Reads a single `Market` using its globally unique `ID`.
  """
  marketByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Market`.
    """
    nodeId: ID!
  ): Market

  """
  Reads a single `Note` using its globally unique `ID`.
  """
  noteByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Note`.
    """
    nodeId: ID!
  ): Note

  """
  Reads a single `Notification` using its globally unique `ID`.
  """
  notificationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Notification`.
    """
    nodeId: ID!
  ): Notification

  """
  Reads a single `Product` using its globally unique `ID`.
  """
  productByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Product`.
    """
    nodeId: ID!
  ): Product

  """
  Reads a single `Project` using its globally unique `ID`.
  """
  projectByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Project`.
    """
    nodeId: ID!
  ): Project

  """
  Reads a single `ProjectMember` using its globally unique `ID`.
  """
  projectMemberByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProjectMember`.
    """
    nodeId: ID!
  ): ProjectMember

  """
  Reads a single `System` using its globally unique `ID`.
  """
  systemByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `System`.
    """
    nodeId: ID!
  ): System

  """
  Reads a single `SystemMember` using its globally unique `ID`.
  """
  systemMemberByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SystemMember`.
    """
    nodeId: ID!
  ): SystemMember

  """
  Fetches a list of entities using their representations; used for Apollo
  Federation.
  """
  _entities(representations: [_Any!]!): [_Entity]!
    @deprecated(reason: "Only Apollo Federation should use this")

  """
  Entrypoint for Apollo Federation to determine more information about
  this service.
  """
  _service: _Service!
    @deprecated(reason: "Only Apollo Federation should use this")
}

enum RequestStatus {
  NEW
  SUBMITTED
  REVIEW
  REJECTED
  APPROVED
}

enum Role {
  SUPER_ADMIN
  MARKET_ADMIN
  INSTALLER
  COMPANY_ADMIN
}

"""
A collection of products that can be guaranteed as a system
"""
type System implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  marketId: Int

  """
  ek
  """
  technology: Technology

  """
  Short name for the System
  """
  name: String

  """
  A description for the System
  """
  description: String

  """
  The maximum number of years that this system can be guaranteed for.  Must be greater than 10.
  """
  maximumValidityYears: Int

  """
  If true this system is on that is available for users to select when applying for a system or solution guarantee
  """
  published: Boolean
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Market` that is related to this `System`.
  """
  market: Market

  """
  Reads and enables pagination through a set of `Guarantee`.
  """
  guarantees(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Guarantee`.
    """
    orderBy: [GuaranteesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuaranteeCondition
  ): GuaranteesConnection!

  """
  Reads and enables pagination through a set of `SystemMember`.
  """
  systemMembers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `SystemMember`.
    """
    orderBy: [SystemMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SystemMemberCondition
  ): SystemMembersConnection!
}

"""
A condition to be used against `System` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SystemCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `marketId` field.
  """
  marketId: Int
}

"""
An input for mutations affecting `System`
"""
input SystemInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  marketId: Int

  """
  ek
  """
  technology: Technology

  """
  Short name for the System
  """
  name: String

  """
  A description for the System
  """
  description: String

  """
  The maximum number of years that this system can be guaranteed for.  Must be greater than 10.
  """
  maximumValidityYears: Int

  """
  If true this system is on that is available for users to select when applying for a system or solution guarantee
  """
  published: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A system product pair
"""
type SystemMember implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Primary key
  """
  id: Int!

  """
  fk
  """
  systemId: Int

  """
  fk
  """
  productId: Int
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `System` that is related to this `SystemMember`.
  """
  system: System

  """
  Reads a single `Product` that is related to this `SystemMember`.
  """
  product: Product
}

"""
A condition to be used against `SystemMember` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SystemMemberCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `systemId` field.
  """
  systemId: Int

  """
  Checks for equality with the object’s `productId` field.
  """
  productId: Int
}

"""
An input for mutations affecting `SystemMember`
"""
input SystemMemberInput {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  systemId: Int

  """
  fk
  """
  productId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `SystemMember`. Fields that are set will be updated.
"""
input SystemMemberPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  systemId: Int

  """
  fk
  """
  productId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `SystemMember` values.
"""
type SystemMembersConnection {
  """
  A list of `SystemMember` objects.
  """
  nodes: [SystemMember!]!

  """
  A list of edges which contains the `SystemMember` and cursor to aid in pagination.
  """
  edges: [SystemMembersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `SystemMember` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `SystemMember` edge in the connection.
"""
type SystemMembersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `SystemMember` at the end of the edge.
  """
  node: SystemMember!
}

"""
Methods to use when ordering `SystemMember`.
"""
enum SystemMembersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_ID_ASC
  SYSTEM_ID_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `System`. Fields that are set will be updated.
"""
input SystemPatch {
  """
  Primary key
  """
  id: Int

  """
  fk
  """
  marketId: Int

  """
  ek
  """
  technology: Technology

  """
  Short name for the System
  """
  name: String

  """
  A description for the System
  """
  description: String

  """
  The maximum number of years that this system can be guaranteed for.  Must be greater than 10.
  """
  maximumValidityYears: Int

  """
  If true this system is on that is available for users to select when applying for a system or solution guarantee
  """
  published: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A connection to a list of `System` values.
"""
type SystemsConnection {
  """
  A list of `System` objects.
  """
  nodes: [System!]!

  """
  A list of edges which contains the `System` and cursor to aid in pagination.
  """
  edges: [SystemsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `System` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `System` edge in the connection.
"""
type SystemsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `System` at the end of the edge.
  """
  node: System!
}

"""
Methods to use when ordering `System`.
"""
enum SystemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MARKET_ID_ASC
  MARKET_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum Technology {
  FLAT
  PITCHED
  OTHER
}

enum Tier {
  T1
  T2
  T3
  T4
}

"""
All input for the `updateAccountByNodeId` mutation.
"""
input UpdateAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!
}

"""
All input for the `updateAccount` mutation.
"""
input UpdateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `Account` mutation.
"""
type UpdateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Account` that was updated by this mutation.
  """
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `Account`.
  """
  market: Market

  """
  An edge for our `Account`. May be used by Relay 1.
  """
  accountEdge(
    """
    The method to use when ordering `Account`.
    """
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""
All input for the `updateAddressByNodeId` mutation.
"""
input UpdateAddressByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Address` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Address` being updated.
  """
  patch: AddressPatch!
}

"""
All input for the `updateAddress` mutation.
"""
input UpdateAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Address` being updated.
  """
  patch: AddressPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `Address` mutation.
"""
type UpdateAddressPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Address` that was updated by this mutation.
  """
  address: Address

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `Address`.
  """
  project: Project

  """
  Reads a single `Company` that is related to this `Address`.
  """
  company: Company

  """
  An edge for our `Address`. May be used by Relay 1.
  """
  addressEdge(
    """
    The method to use when ordering `Address`.
    """
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesEdge
}

"""
All input for the `updateCompanyByNodeId` mutation.
"""
input UpdateCompanyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Company` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  patch: CompanyPatch!
}

"""
All input for the `updateCompanyDocumentByNodeId` mutation.
"""
input UpdateCompanyDocumentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CompanyDocument` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CompanyDocument` being updated.
  """
  patch: CompanyDocumentPatch!
}

"""
All input for the `updateCompanyDocument` mutation.
"""
input UpdateCompanyDocumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CompanyDocument` being updated.
  """
  patch: CompanyDocumentPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `CompanyDocument` mutation.
"""
type UpdateCompanyDocumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CompanyDocument` that was updated by this mutation.
  """
  companyDocument: CompanyDocument

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Company` that is related to this `CompanyDocument`.
  """
  company: Company

  """
  An edge for our `CompanyDocument`. May be used by Relay 1.
  """
  companyDocumentEdge(
    """
    The method to use when ordering `CompanyDocument`.
    """
    orderBy: [CompanyDocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyDocumentsEdge
}

"""
All input for the `updateCompany` mutation.
"""
input UpdateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  patch: CompanyPatch!

  """
  Primary key
  """
  id: Int!
}

"""
All input for the `updateCompanyMemberByNodeId` mutation.
"""
input UpdateCompanyMemberByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CompanyMember` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CompanyMember` being updated.
  """
  patch: CompanyMemberPatch!
}

"""
All input for the `updateCompanyMember` mutation.
"""
input UpdateCompanyMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CompanyMember` being updated.
  """
  patch: CompanyMemberPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `CompanyMember` mutation.
"""
type UpdateCompanyMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CompanyMember` that was updated by this mutation.
  """
  companyMember: CompanyMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `CompanyMember`.
  """
  market: Market

  """
  Reads a single `Account` that is related to this `CompanyMember`.
  """
  account: Account

  """
  Reads a single `Company` that is related to this `CompanyMember`.
  """
  company: Company

  """
  An edge for our `CompanyMember`. May be used by Relay 1.
  """
  companyMemberEdge(
    """
    The method to use when ordering `CompanyMember`.
    """
    orderBy: [CompanyMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyMembersEdge
}

"""
The output of our update `Company` mutation.
"""
type UpdateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Company` that was updated by this mutation.
  """
  company: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `Company`.
  """
  market: Market

  """
  An edge for our `Company`. May be used by Relay 1.
  """
  companyEdge(
    """
    The method to use when ordering `Company`.
    """
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge
}

"""
All input for the `updateEvidenceItemByNodeId` mutation.
"""
input UpdateEvidenceItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EvidenceItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EvidenceItem` being updated.
  """
  patch: EvidenceItemPatch!
}

"""
All input for the `updateEvidenceItem` mutation.
"""
input UpdateEvidenceItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EvidenceItem` being updated.
  """
  patch: EvidenceItemPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `EvidenceItem` mutation.
"""
type UpdateEvidenceItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EvidenceItem` that was updated by this mutation.
  """
  evidenceItem: EvidenceItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Guarantee` that is related to this `EvidenceItem`.
  """
  guarantee: Guarantee

  """
  An edge for our `EvidenceItem`. May be used by Relay 1.
  """
  evidenceItemEdge(
    """
    The method to use when ordering `EvidenceItem`.
    """
    orderBy: [EvidenceItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EvidenceItemsEdge
}

"""
All input for the `updateGuaranteeByNodeId` mutation.
"""
input UpdateGuaranteeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Guarantee` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Guarantee` being updated.
  """
  patch: GuaranteePatch!
}

"""
All input for the `updateGuaranteedProductByNodeId` mutation.
"""
input UpdateGuaranteedProductByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GuaranteedProduct` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GuaranteedProduct` being updated.
  """
  patch: GuaranteedProductPatch!
}

"""
All input for the `updateGuaranteedProduct` mutation.
"""
input UpdateGuaranteedProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuaranteedProduct` being updated.
  """
  patch: GuaranteedProductPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `GuaranteedProduct` mutation.
"""
type UpdateGuaranteedProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `GuaranteedProduct` that was updated by this mutation.
  """
  guaranteedProduct: GuaranteedProduct

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Product` that is related to this `GuaranteedProduct`.
  """
  product: Product

  """
  Reads a single `Guarantee` that is related to this `GuaranteedProduct`.
  """
  guarantee: Guarantee

  """
  An edge for our `GuaranteedProduct`. May be used by Relay 1.
  """
  guaranteedProductEdge(
    """
    The method to use when ordering `GuaranteedProduct`.
    """
    orderBy: [GuaranteedProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuaranteedProductsEdge
}

"""
All input for the `updateGuarantee` mutation.
"""
input UpdateGuaranteeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Guarantee` being updated.
  """
  patch: GuaranteePatch!

  """
  Primary key - starts at 6100
  """
  id: Int!
}

"""
The output of our update `Guarantee` mutation.
"""
type UpdateGuaranteePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Guarantee` that was updated by this mutation.
  """
  guarantee: Guarantee

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  requestorAccount: Account

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  responsibleInstallerAccount: Account

  """
  Reads a single `Project` that is related to this `Guarantee`.
  """
  project: Project

  """
  Reads a single `System` that is related to this `Guarantee`.
  """
  system: System

  """
  Reads a single `Account` that is related to this `Guarantee`.
  """
  reviewerAccount: Account

  """
  An edge for our `Guarantee`. May be used by Relay 1.
  """
  guaranteeEdge(
    """
    The method to use when ordering `Guarantee`.
    """
    orderBy: [GuaranteesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuaranteesEdge
}

"""
All input for the `updateInvitationByNodeId` mutation.
"""
input UpdateInvitationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Invitation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Invitation` being updated.
  """
  patch: InvitationPatch!
}

"""
All input for the `updateInvitation` mutation.
"""
input UpdateInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Invitation` being updated.
  """
  patch: InvitationPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `Invitation` mutation.
"""
type UpdateInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Invitation` that was updated by this mutation.
  """
  invitation: Invitation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Invitation`.
  """
  senderAccount: Account

  """
  An edge for our `Invitation`. May be used by Relay 1.
  """
  invitationEdge(
    """
    The method to use when ordering `Invitation`.
    """
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvitationsEdge
}

"""
All input for the `updateMarketByNodeId` mutation.
"""
input UpdateMarketByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Market` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Market` being updated.
  """
  patch: MarketPatch!
}

"""
All input for the `updateMarket` mutation.
"""
input UpdateMarketInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Market` being updated.
  """
  patch: MarketPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `Market` mutation.
"""
type UpdateMarketPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Market` that was updated by this mutation.
  """
  market: Market

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Market`. May be used by Relay 1.
  """
  marketEdge(
    """
    The method to use when ordering `Market`.
    """
    orderBy: [MarketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MarketsEdge
}

"""
All input for the `updateNoteByNodeId` mutation.
"""
input UpdateNoteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Note` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Note` being updated.
  """
  patch: NotePatch!
}

"""
All input for the `updateNote` mutation.
"""
input UpdateNoteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Note` being updated.
  """
  patch: NotePatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `Note` mutation.
"""
type UpdateNotePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Note` that was updated by this mutation.
  """
  note: Note

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Note`.
  """
  author: Account

  """
  Reads a single `Project` that is related to this `Note`.
  """
  project: Project

  """
  An edge for our `Note`. May be used by Relay 1.
  """
  noteEdge(
    """
    The method to use when ordering `Note`.
    """
    orderBy: [NotesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotesEdge
}

"""
All input for the `updateNotificationByNodeId` mutation.
"""
input UpdateNotificationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  patch: NotificationPatch!
}

"""
All input for the `updateNotification` mutation.
"""
input UpdateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  patch: NotificationPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `Notification` mutation.
"""
type UpdateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Notification` that was updated by this mutation.
  """
  notification: Notification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Account` that is related to this `Notification`.
  """
  account: Account

  """
  An edge for our `Notification`. May be used by Relay 1.
  """
  notificationEdge(
    """
    The method to use when ordering `Notification`.
    """
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""
All input for the `updateProductByNodeId` mutation.
"""
input UpdateProductByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  patch: ProductPatch!
}

"""
All input for the `updateProduct` mutation.
"""
input UpdateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  patch: ProductPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `Product` mutation.
"""
type UpdateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Product` that was updated by this mutation.
  """
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `Product`.
  """
  market: Market

  """
  An edge for our `Product`. May be used by Relay 1.
  """
  productEdge(
    """
    The method to use when ordering `Product`.
    """
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""
All input for the `updateProjectByNodeId` mutation.
"""
input UpdateProjectByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Project` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!
}

"""
All input for the `updateProject` mutation.
"""
input UpdateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!

  """
  Primary key
  """
  id: Int!
}

"""
All input for the `updateProjectMemberByNodeId` mutation.
"""
input UpdateProjectMemberByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectMember` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectMember` being updated.
  """
  patch: ProjectMemberPatch!
}

"""
All input for the `updateProjectMember` mutation.
"""
input UpdateProjectMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectMember` being updated.
  """
  patch: ProjectMemberPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `ProjectMember` mutation.
"""
type UpdateProjectMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectMember` that was updated by this mutation.
  """
  projectMember: ProjectMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectMember`.
  """
  project: Project

  """
  Reads a single `Account` that is related to this `ProjectMember`.
  """
  account: Account

  """
  An edge for our `ProjectMember`. May be used by Relay 1.
  """
  projectMemberEdge(
    """
    The method to use when ordering `ProjectMember`.
    """
    orderBy: [ProjectMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectMembersEdge
}

"""
The output of our update `Project` mutation.
"""
type UpdateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Project` that was updated by this mutation.
  """
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Company` that is related to this `Project`.
  """
  company: Company

  """
  An edge for our `Project`. May be used by Relay 1.
  """
  projectEdge(
    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge
}

"""
All input for the `updateSystemByNodeId` mutation.
"""
input UpdateSystemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `System` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `System` being updated.
  """
  patch: SystemPatch!
}

"""
All input for the `updateSystem` mutation.
"""
input UpdateSystemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `System` being updated.
  """
  patch: SystemPatch!

  """
  Primary key
  """
  id: Int!
}

"""
All input for the `updateSystemMemberByNodeId` mutation.
"""
input UpdateSystemMemberByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SystemMember` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SystemMember` being updated.
  """
  patch: SystemMemberPatch!
}

"""
All input for the `updateSystemMember` mutation.
"""
input UpdateSystemMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SystemMember` being updated.
  """
  patch: SystemMemberPatch!

  """
  Primary key
  """
  id: Int!
}

"""
The output of our update `SystemMember` mutation.
"""
type UpdateSystemMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `SystemMember` that was updated by this mutation.
  """
  systemMember: SystemMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `System` that is related to this `SystemMember`.
  """
  system: System

  """
  Reads a single `Product` that is related to this `SystemMember`.
  """
  product: Product

  """
  An edge for our `SystemMember`. May be used by Relay 1.
  """
  systemMemberEdge(
    """
    The method to use when ordering `SystemMember`.
    """
    orderBy: [SystemMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SystemMembersEdge
}

"""
The output of our update `System` mutation.
"""
type UpdateSystemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `System` that was updated by this mutation.
  """
  system: System

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Market` that is related to this `System`.
  """
  market: Market

  """
  An edge for our `System`. May be used by Relay 1.
  """
  systemEdge(
    """
    The method to use when ordering `System`.
    """
    orderBy: [SystemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SystemsEdge
}
